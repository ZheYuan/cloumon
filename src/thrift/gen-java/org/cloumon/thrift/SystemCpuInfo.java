/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SystemCpuInfo implements org.apache.thrift.TBase<SystemCpuInfo, SystemCpuInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemCpuInfo");

  private static final org.apache.thrift.protocol.TField VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vendor", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MHZ_FIELD_DESC = new org.apache.thrift.protocol.TField("mhz", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheSize", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCores", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_SOCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSockets", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CORES_PER_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("coresPerSocket", org.apache.thrift.protocol.TType.I32, (short)7);

  public String vendor;
  public String model;
  public int mhz;
  public long cacheSize;
  public int totalCores;
  public int totalSockets;
  public int coresPerSocket;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VENDOR((short)1, "vendor"),
    MODEL((short)2, "model"),
    MHZ((short)3, "mhz"),
    CACHE_SIZE((short)4, "cacheSize"),
    TOTAL_CORES((short)5, "totalCores"),
    TOTAL_SOCKETS((short)6, "totalSockets"),
    CORES_PER_SOCKET((short)7, "coresPerSocket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VENDOR
          return VENDOR;
        case 2: // MODEL
          return MODEL;
        case 3: // MHZ
          return MHZ;
        case 4: // CACHE_SIZE
          return CACHE_SIZE;
        case 5: // TOTAL_CORES
          return TOTAL_CORES;
        case 6: // TOTAL_SOCKETS
          return TOTAL_SOCKETS;
        case 7: // CORES_PER_SOCKET
          return CORES_PER_SOCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MHZ_ISSET_ID = 0;
  private static final int __CACHESIZE_ISSET_ID = 1;
  private static final int __TOTALCORES_ISSET_ID = 2;
  private static final int __TOTALSOCKETS_ISSET_ID = 3;
  private static final int __CORESPERSOCKET_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VENDOR, new org.apache.thrift.meta_data.FieldMetaData("vendor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MHZ, new org.apache.thrift.meta_data.FieldMetaData("mhz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_CORES, new org.apache.thrift.meta_data.FieldMetaData("totalCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SOCKETS, new org.apache.thrift.meta_data.FieldMetaData("totalSockets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORES_PER_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("coresPerSocket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemCpuInfo.class, metaDataMap);
  }

  public SystemCpuInfo() {
  }

  public SystemCpuInfo(
    String vendor,
    String model,
    int mhz,
    long cacheSize,
    int totalCores,
    int totalSockets,
    int coresPerSocket)
  {
    this();
    this.vendor = vendor;
    this.model = model;
    this.mhz = mhz;
    setMhzIsSet(true);
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    this.totalCores = totalCores;
    setTotalCoresIsSet(true);
    this.totalSockets = totalSockets;
    setTotalSocketsIsSet(true);
    this.coresPerSocket = coresPerSocket;
    setCoresPerSocketIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemCpuInfo(SystemCpuInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetVendor()) {
      this.vendor = other.vendor;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    this.mhz = other.mhz;
    this.cacheSize = other.cacheSize;
    this.totalCores = other.totalCores;
    this.totalSockets = other.totalSockets;
    this.coresPerSocket = other.coresPerSocket;
  }

  public SystemCpuInfo deepCopy() {
    return new SystemCpuInfo(this);
  }

  @Override
  public void clear() {
    this.vendor = null;
    this.model = null;
    setMhzIsSet(false);
    this.mhz = 0;
    setCacheSizeIsSet(false);
    this.cacheSize = 0;
    setTotalCoresIsSet(false);
    this.totalCores = 0;
    setTotalSocketsIsSet(false);
    this.totalSockets = 0;
    setCoresPerSocketIsSet(false);
    this.coresPerSocket = 0;
  }

  public String getVendor() {
    return this.vendor;
  }

  public SystemCpuInfo setVendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  public void unsetVendor() {
    this.vendor = null;
  }

  /** Returns true if field vendor is set (has been assigned a value) and false otherwise */
  public boolean isSetVendor() {
    return this.vendor != null;
  }

  public void setVendorIsSet(boolean value) {
    if (!value) {
      this.vendor = null;
    }
  }

  public String getModel() {
    return this.model;
  }

  public SystemCpuInfo setModel(String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public int getMhz() {
    return this.mhz;
  }

  public SystemCpuInfo setMhz(int mhz) {
    this.mhz = mhz;
    setMhzIsSet(true);
    return this;
  }

  public void unsetMhz() {
    __isset_bit_vector.clear(__MHZ_ISSET_ID);
  }

  /** Returns true if field mhz is set (has been assigned a value) and false otherwise */
  public boolean isSetMhz() {
    return __isset_bit_vector.get(__MHZ_ISSET_ID);
  }

  public void setMhzIsSet(boolean value) {
    __isset_bit_vector.set(__MHZ_ISSET_ID, value);
  }

  public long getCacheSize() {
    return this.cacheSize;
  }

  public SystemCpuInfo setCacheSize(long cacheSize) {
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    return this;
  }

  public void unsetCacheSize() {
    __isset_bit_vector.clear(__CACHESIZE_ISSET_ID);
  }

  /** Returns true if field cacheSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheSize() {
    return __isset_bit_vector.get(__CACHESIZE_ISSET_ID);
  }

  public void setCacheSizeIsSet(boolean value) {
    __isset_bit_vector.set(__CACHESIZE_ISSET_ID, value);
  }

  public int getTotalCores() {
    return this.totalCores;
  }

  public SystemCpuInfo setTotalCores(int totalCores) {
    this.totalCores = totalCores;
    setTotalCoresIsSet(true);
    return this;
  }

  public void unsetTotalCores() {
    __isset_bit_vector.clear(__TOTALCORES_ISSET_ID);
  }

  /** Returns true if field totalCores is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCores() {
    return __isset_bit_vector.get(__TOTALCORES_ISSET_ID);
  }

  public void setTotalCoresIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALCORES_ISSET_ID, value);
  }

  public int getTotalSockets() {
    return this.totalSockets;
  }

  public SystemCpuInfo setTotalSockets(int totalSockets) {
    this.totalSockets = totalSockets;
    setTotalSocketsIsSet(true);
    return this;
  }

  public void unsetTotalSockets() {
    __isset_bit_vector.clear(__TOTALSOCKETS_ISSET_ID);
  }

  /** Returns true if field totalSockets is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSockets() {
    return __isset_bit_vector.get(__TOTALSOCKETS_ISSET_ID);
  }

  public void setTotalSocketsIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALSOCKETS_ISSET_ID, value);
  }

  public int getCoresPerSocket() {
    return this.coresPerSocket;
  }

  public SystemCpuInfo setCoresPerSocket(int coresPerSocket) {
    this.coresPerSocket = coresPerSocket;
    setCoresPerSocketIsSet(true);
    return this;
  }

  public void unsetCoresPerSocket() {
    __isset_bit_vector.clear(__CORESPERSOCKET_ISSET_ID);
  }

  /** Returns true if field coresPerSocket is set (has been assigned a value) and false otherwise */
  public boolean isSetCoresPerSocket() {
    return __isset_bit_vector.get(__CORESPERSOCKET_ISSET_ID);
  }

  public void setCoresPerSocketIsSet(boolean value) {
    __isset_bit_vector.set(__CORESPERSOCKET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VENDOR:
      if (value == null) {
        unsetVendor();
      } else {
        setVendor((String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((String)value);
      }
      break;

    case MHZ:
      if (value == null) {
        unsetMhz();
      } else {
        setMhz((Integer)value);
      }
      break;

    case CACHE_SIZE:
      if (value == null) {
        unsetCacheSize();
      } else {
        setCacheSize((Long)value);
      }
      break;

    case TOTAL_CORES:
      if (value == null) {
        unsetTotalCores();
      } else {
        setTotalCores((Integer)value);
      }
      break;

    case TOTAL_SOCKETS:
      if (value == null) {
        unsetTotalSockets();
      } else {
        setTotalSockets((Integer)value);
      }
      break;

    case CORES_PER_SOCKET:
      if (value == null) {
        unsetCoresPerSocket();
      } else {
        setCoresPerSocket((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VENDOR:
      return getVendor();

    case MODEL:
      return getModel();

    case MHZ:
      return Integer.valueOf(getMhz());

    case CACHE_SIZE:
      return Long.valueOf(getCacheSize());

    case TOTAL_CORES:
      return Integer.valueOf(getTotalCores());

    case TOTAL_SOCKETS:
      return Integer.valueOf(getTotalSockets());

    case CORES_PER_SOCKET:
      return Integer.valueOf(getCoresPerSocket());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VENDOR:
      return isSetVendor();
    case MODEL:
      return isSetModel();
    case MHZ:
      return isSetMhz();
    case CACHE_SIZE:
      return isSetCacheSize();
    case TOTAL_CORES:
      return isSetTotalCores();
    case TOTAL_SOCKETS:
      return isSetTotalSockets();
    case CORES_PER_SOCKET:
      return isSetCoresPerSocket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemCpuInfo)
      return this.equals((SystemCpuInfo)that);
    return false;
  }

  public boolean equals(SystemCpuInfo that) {
    if (that == null)
      return false;

    boolean this_present_vendor = true && this.isSetVendor();
    boolean that_present_vendor = true && that.isSetVendor();
    if (this_present_vendor || that_present_vendor) {
      if (!(this_present_vendor && that_present_vendor))
        return false;
      if (!this.vendor.equals(that.vendor))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_mhz = true;
    boolean that_present_mhz = true;
    if (this_present_mhz || that_present_mhz) {
      if (!(this_present_mhz && that_present_mhz))
        return false;
      if (this.mhz != that.mhz)
        return false;
    }

    boolean this_present_cacheSize = true;
    boolean that_present_cacheSize = true;
    if (this_present_cacheSize || that_present_cacheSize) {
      if (!(this_present_cacheSize && that_present_cacheSize))
        return false;
      if (this.cacheSize != that.cacheSize)
        return false;
    }

    boolean this_present_totalCores = true;
    boolean that_present_totalCores = true;
    if (this_present_totalCores || that_present_totalCores) {
      if (!(this_present_totalCores && that_present_totalCores))
        return false;
      if (this.totalCores != that.totalCores)
        return false;
    }

    boolean this_present_totalSockets = true;
    boolean that_present_totalSockets = true;
    if (this_present_totalSockets || that_present_totalSockets) {
      if (!(this_present_totalSockets && that_present_totalSockets))
        return false;
      if (this.totalSockets != that.totalSockets)
        return false;
    }

    boolean this_present_coresPerSocket = true;
    boolean that_present_coresPerSocket = true;
    if (this_present_coresPerSocket || that_present_coresPerSocket) {
      if (!(this_present_coresPerSocket && that_present_coresPerSocket))
        return false;
      if (this.coresPerSocket != that.coresPerSocket)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SystemCpuInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SystemCpuInfo typedOther = (SystemCpuInfo)other;

    lastComparison = Boolean.valueOf(isSetVendor()).compareTo(typedOther.isSetVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vendor, typedOther.vendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(typedOther.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, typedOther.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMhz()).compareTo(typedOther.isSetMhz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMhz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mhz, typedOther.mhz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheSize()).compareTo(typedOther.isSetCacheSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheSize, typedOther.cacheSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCores()).compareTo(typedOther.isSetTotalCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCores, typedOther.totalCores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSockets()).compareTo(typedOther.isSetTotalSockets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSockets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSockets, typedOther.totalSockets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoresPerSocket()).compareTo(typedOther.isSetCoresPerSocket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoresPerSocket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coresPerSocket, typedOther.coresPerSocket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // VENDOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.vendor = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MODEL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.model = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MHZ
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.mhz = iprot.readI32();
            setMhzIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CACHE_SIZE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.cacheSize = iprot.readI64();
            setCacheSizeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TOTAL_CORES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.totalCores = iprot.readI32();
            setTotalCoresIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TOTAL_SOCKETS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.totalSockets = iprot.readI32();
            setTotalSocketsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CORES_PER_SOCKET
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.coresPerSocket = iprot.readI32();
            setCoresPerSocketIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.vendor != null) {
      oprot.writeFieldBegin(VENDOR_FIELD_DESC);
      oprot.writeString(this.vendor);
      oprot.writeFieldEnd();
    }
    if (this.model != null) {
      oprot.writeFieldBegin(MODEL_FIELD_DESC);
      oprot.writeString(this.model);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MHZ_FIELD_DESC);
    oprot.writeI32(this.mhz);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CACHE_SIZE_FIELD_DESC);
    oprot.writeI64(this.cacheSize);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_CORES_FIELD_DESC);
    oprot.writeI32(this.totalCores);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_SOCKETS_FIELD_DESC);
    oprot.writeI32(this.totalSockets);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CORES_PER_SOCKET_FIELD_DESC);
    oprot.writeI32(this.coresPerSocket);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemCpuInfo(");
    boolean first = true;

    sb.append("vendor:");
    if (this.vendor == null) {
      sb.append("null");
    } else {
      sb.append(this.vendor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mhz:");
    sb.append(this.mhz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheSize:");
    sb.append(this.cacheSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCores:");
    sb.append(this.totalCores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSockets:");
    sb.append(this.totalSockets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coresPerSocket:");
    sb.append(this.coresPerSocket);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

