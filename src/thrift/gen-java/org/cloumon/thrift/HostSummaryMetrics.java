/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostSummaryMetrics implements org.apache.thrift.TBase<HostSummaryMetrics, HostSummaryMetrics._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostSummaryMetrics");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuLoad", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUser", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISK_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("diskUsed", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NET_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("netIn", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NET_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("netOut", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("logTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("liveStatus", org.apache.thrift.protocol.TType.BOOL, (short)9);

  public String hostName;
  public String hostIp;
  public String cpuLoad;
  public String cpuUser;
  public String diskUsed;
  public String netIn;
  public String netOut;
  public String logTime;
  public boolean liveStatus;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "hostName"),
    HOST_IP((short)2, "hostIp"),
    CPU_LOAD((short)3, "cpuLoad"),
    CPU_USER((short)4, "cpuUser"),
    DISK_USED((short)5, "diskUsed"),
    NET_IN((short)6, "netIn"),
    NET_OUT((short)7, "netOut"),
    LOG_TIME((short)8, "logTime"),
    LIVE_STATUS((short)9, "liveStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // HOST_IP
          return HOST_IP;
        case 3: // CPU_LOAD
          return CPU_LOAD;
        case 4: // CPU_USER
          return CPU_USER;
        case 5: // DISK_USED
          return DISK_USED;
        case 6: // NET_IN
          return NET_IN;
        case 7: // NET_OUT
          return NET_OUT;
        case 8: // LOG_TIME
          return LOG_TIME;
        case 9: // LIVE_STATUS
          return LIVE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIVESTATUS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_LOAD, new org.apache.thrift.meta_data.FieldMetaData("cpuLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_USER, new org.apache.thrift.meta_data.FieldMetaData("cpuUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISK_USED, new org.apache.thrift.meta_data.FieldMetaData("diskUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NET_IN, new org.apache.thrift.meta_data.FieldMetaData("netIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NET_OUT, new org.apache.thrift.meta_data.FieldMetaData("netOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_TIME, new org.apache.thrift.meta_data.FieldMetaData("logTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("liveStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostSummaryMetrics.class, metaDataMap);
  }

  public HostSummaryMetrics() {
  }

  public HostSummaryMetrics(
    String hostName,
    String hostIp,
    String cpuLoad,
    String cpuUser,
    String diskUsed,
    String netIn,
    String netOut,
    String logTime,
    boolean liveStatus)
  {
    this();
    this.hostName = hostName;
    this.hostIp = hostIp;
    this.cpuLoad = cpuLoad;
    this.cpuUser = cpuUser;
    this.diskUsed = diskUsed;
    this.netIn = netIn;
    this.netOut = netOut;
    this.logTime = logTime;
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostSummaryMetrics(HostSummaryMetrics other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetHostIp()) {
      this.hostIp = other.hostIp;
    }
    if (other.isSetCpuLoad()) {
      this.cpuLoad = other.cpuLoad;
    }
    if (other.isSetCpuUser()) {
      this.cpuUser = other.cpuUser;
    }
    if (other.isSetDiskUsed()) {
      this.diskUsed = other.diskUsed;
    }
    if (other.isSetNetIn()) {
      this.netIn = other.netIn;
    }
    if (other.isSetNetOut()) {
      this.netOut = other.netOut;
    }
    if (other.isSetLogTime()) {
      this.logTime = other.logTime;
    }
    this.liveStatus = other.liveStatus;
  }

  public HostSummaryMetrics deepCopy() {
    return new HostSummaryMetrics(this);
  }

  @Override
  public void clear() {
    this.hostName = null;
    this.hostIp = null;
    this.cpuLoad = null;
    this.cpuUser = null;
    this.diskUsed = null;
    this.netIn = null;
    this.netOut = null;
    this.logTime = null;
    setLiveStatusIsSet(false);
    this.liveStatus = false;
  }

  public String getHostName() {
    return this.hostName;
  }

  public HostSummaryMetrics setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public String getHostIp() {
    return this.hostIp;
  }

  public HostSummaryMetrics setHostIp(String hostIp) {
    this.hostIp = hostIp;
    return this;
  }

  public void unsetHostIp() {
    this.hostIp = null;
  }

  /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
  public boolean isSetHostIp() {
    return this.hostIp != null;
  }

  public void setHostIpIsSet(boolean value) {
    if (!value) {
      this.hostIp = null;
    }
  }

  public String getCpuLoad() {
    return this.cpuLoad;
  }

  public HostSummaryMetrics setCpuLoad(String cpuLoad) {
    this.cpuLoad = cpuLoad;
    return this;
  }

  public void unsetCpuLoad() {
    this.cpuLoad = null;
  }

  /** Returns true if field cpuLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuLoad() {
    return this.cpuLoad != null;
  }

  public void setCpuLoadIsSet(boolean value) {
    if (!value) {
      this.cpuLoad = null;
    }
  }

  public String getCpuUser() {
    return this.cpuUser;
  }

  public HostSummaryMetrics setCpuUser(String cpuUser) {
    this.cpuUser = cpuUser;
    return this;
  }

  public void unsetCpuUser() {
    this.cpuUser = null;
  }

  /** Returns true if field cpuUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUser() {
    return this.cpuUser != null;
  }

  public void setCpuUserIsSet(boolean value) {
    if (!value) {
      this.cpuUser = null;
    }
  }

  public String getDiskUsed() {
    return this.diskUsed;
  }

  public HostSummaryMetrics setDiskUsed(String diskUsed) {
    this.diskUsed = diskUsed;
    return this;
  }

  public void unsetDiskUsed() {
    this.diskUsed = null;
  }

  /** Returns true if field diskUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskUsed() {
    return this.diskUsed != null;
  }

  public void setDiskUsedIsSet(boolean value) {
    if (!value) {
      this.diskUsed = null;
    }
  }

  public String getNetIn() {
    return this.netIn;
  }

  public HostSummaryMetrics setNetIn(String netIn) {
    this.netIn = netIn;
    return this;
  }

  public void unsetNetIn() {
    this.netIn = null;
  }

  /** Returns true if field netIn is set (has been assigned a value) and false otherwise */
  public boolean isSetNetIn() {
    return this.netIn != null;
  }

  public void setNetInIsSet(boolean value) {
    if (!value) {
      this.netIn = null;
    }
  }

  public String getNetOut() {
    return this.netOut;
  }

  public HostSummaryMetrics setNetOut(String netOut) {
    this.netOut = netOut;
    return this;
  }

  public void unsetNetOut() {
    this.netOut = null;
  }

  /** Returns true if field netOut is set (has been assigned a value) and false otherwise */
  public boolean isSetNetOut() {
    return this.netOut != null;
  }

  public void setNetOutIsSet(boolean value) {
    if (!value) {
      this.netOut = null;
    }
  }

  public String getLogTime() {
    return this.logTime;
  }

  public HostSummaryMetrics setLogTime(String logTime) {
    this.logTime = logTime;
    return this;
  }

  public void unsetLogTime() {
    this.logTime = null;
  }

  /** Returns true if field logTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLogTime() {
    return this.logTime != null;
  }

  public void setLogTimeIsSet(boolean value) {
    if (!value) {
      this.logTime = null;
    }
  }

  public boolean isLiveStatus() {
    return this.liveStatus;
  }

  public HostSummaryMetrics setLiveStatus(boolean liveStatus) {
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
    return this;
  }

  public void unsetLiveStatus() {
    __isset_bit_vector.clear(__LIVESTATUS_ISSET_ID);
  }

  /** Returns true if field liveStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveStatus() {
    return __isset_bit_vector.get(__LIVESTATUS_ISSET_ID);
  }

  public void setLiveStatusIsSet(boolean value) {
    __isset_bit_vector.set(__LIVESTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case HOST_IP:
      if (value == null) {
        unsetHostIp();
      } else {
        setHostIp((String)value);
      }
      break;

    case CPU_LOAD:
      if (value == null) {
        unsetCpuLoad();
      } else {
        setCpuLoad((String)value);
      }
      break;

    case CPU_USER:
      if (value == null) {
        unsetCpuUser();
      } else {
        setCpuUser((String)value);
      }
      break;

    case DISK_USED:
      if (value == null) {
        unsetDiskUsed();
      } else {
        setDiskUsed((String)value);
      }
      break;

    case NET_IN:
      if (value == null) {
        unsetNetIn();
      } else {
        setNetIn((String)value);
      }
      break;

    case NET_OUT:
      if (value == null) {
        unsetNetOut();
      } else {
        setNetOut((String)value);
      }
      break;

    case LOG_TIME:
      if (value == null) {
        unsetLogTime();
      } else {
        setLogTime((String)value);
      }
      break;

    case LIVE_STATUS:
      if (value == null) {
        unsetLiveStatus();
      } else {
        setLiveStatus((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHostName();

    case HOST_IP:
      return getHostIp();

    case CPU_LOAD:
      return getCpuLoad();

    case CPU_USER:
      return getCpuUser();

    case DISK_USED:
      return getDiskUsed();

    case NET_IN:
      return getNetIn();

    case NET_OUT:
      return getNetOut();

    case LOG_TIME:
      return getLogTime();

    case LIVE_STATUS:
      return Boolean.valueOf(isLiveStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHostName();
    case HOST_IP:
      return isSetHostIp();
    case CPU_LOAD:
      return isSetCpuLoad();
    case CPU_USER:
      return isSetCpuUser();
    case DISK_USED:
      return isSetDiskUsed();
    case NET_IN:
      return isSetNetIn();
    case NET_OUT:
      return isSetNetOut();
    case LOG_TIME:
      return isSetLogTime();
    case LIVE_STATUS:
      return isSetLiveStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostSummaryMetrics)
      return this.equals((HostSummaryMetrics)that);
    return false;
  }

  public boolean equals(HostSummaryMetrics that) {
    if (that == null)
      return false;

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_hostIp = true && this.isSetHostIp();
    boolean that_present_hostIp = true && that.isSetHostIp();
    if (this_present_hostIp || that_present_hostIp) {
      if (!(this_present_hostIp && that_present_hostIp))
        return false;
      if (!this.hostIp.equals(that.hostIp))
        return false;
    }

    boolean this_present_cpuLoad = true && this.isSetCpuLoad();
    boolean that_present_cpuLoad = true && that.isSetCpuLoad();
    if (this_present_cpuLoad || that_present_cpuLoad) {
      if (!(this_present_cpuLoad && that_present_cpuLoad))
        return false;
      if (!this.cpuLoad.equals(that.cpuLoad))
        return false;
    }

    boolean this_present_cpuUser = true && this.isSetCpuUser();
    boolean that_present_cpuUser = true && that.isSetCpuUser();
    if (this_present_cpuUser || that_present_cpuUser) {
      if (!(this_present_cpuUser && that_present_cpuUser))
        return false;
      if (!this.cpuUser.equals(that.cpuUser))
        return false;
    }

    boolean this_present_diskUsed = true && this.isSetDiskUsed();
    boolean that_present_diskUsed = true && that.isSetDiskUsed();
    if (this_present_diskUsed || that_present_diskUsed) {
      if (!(this_present_diskUsed && that_present_diskUsed))
        return false;
      if (!this.diskUsed.equals(that.diskUsed))
        return false;
    }

    boolean this_present_netIn = true && this.isSetNetIn();
    boolean that_present_netIn = true && that.isSetNetIn();
    if (this_present_netIn || that_present_netIn) {
      if (!(this_present_netIn && that_present_netIn))
        return false;
      if (!this.netIn.equals(that.netIn))
        return false;
    }

    boolean this_present_netOut = true && this.isSetNetOut();
    boolean that_present_netOut = true && that.isSetNetOut();
    if (this_present_netOut || that_present_netOut) {
      if (!(this_present_netOut && that_present_netOut))
        return false;
      if (!this.netOut.equals(that.netOut))
        return false;
    }

    boolean this_present_logTime = true && this.isSetLogTime();
    boolean that_present_logTime = true && that.isSetLogTime();
    if (this_present_logTime || that_present_logTime) {
      if (!(this_present_logTime && that_present_logTime))
        return false;
      if (!this.logTime.equals(that.logTime))
        return false;
    }

    boolean this_present_liveStatus = true;
    boolean that_present_liveStatus = true;
    if (this_present_liveStatus || that_present_liveStatus) {
      if (!(this_present_liveStatus && that_present_liveStatus))
        return false;
      if (this.liveStatus != that.liveStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HostSummaryMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HostSummaryMetrics typedOther = (HostSummaryMetrics)other;

    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(typedOther.isSetHostIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, typedOther.hostIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuLoad()).compareTo(typedOther.isSetCpuLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuLoad, typedOther.cpuLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuUser()).compareTo(typedOther.isSetCpuUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUser, typedOther.cpuUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiskUsed()).compareTo(typedOther.isSetDiskUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskUsed, typedOther.diskUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetIn()).compareTo(typedOther.isSetNetIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netIn, typedOther.netIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetOut()).compareTo(typedOther.isSetNetOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netOut, typedOther.netOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogTime()).compareTo(typedOther.isSetLogTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logTime, typedOther.logTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveStatus()).compareTo(typedOther.isSetLiveStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveStatus, typedOther.liveStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HOST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hostName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HOST_IP
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hostIp = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CPU_LOAD
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.cpuLoad = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CPU_USER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.cpuUser = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DISK_USED
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.diskUsed = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // NET_IN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.netIn = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // NET_OUT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.netOut = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // LOG_TIME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.logTime = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // LIVE_STATUS
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.liveStatus = iprot.readBool();
            setLiveStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.hostName != null) {
      oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
      oprot.writeString(this.hostName);
      oprot.writeFieldEnd();
    }
    if (this.hostIp != null) {
      oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
      oprot.writeString(this.hostIp);
      oprot.writeFieldEnd();
    }
    if (this.cpuLoad != null) {
      oprot.writeFieldBegin(CPU_LOAD_FIELD_DESC);
      oprot.writeString(this.cpuLoad);
      oprot.writeFieldEnd();
    }
    if (this.cpuUser != null) {
      oprot.writeFieldBegin(CPU_USER_FIELD_DESC);
      oprot.writeString(this.cpuUser);
      oprot.writeFieldEnd();
    }
    if (this.diskUsed != null) {
      oprot.writeFieldBegin(DISK_USED_FIELD_DESC);
      oprot.writeString(this.diskUsed);
      oprot.writeFieldEnd();
    }
    if (this.netIn != null) {
      oprot.writeFieldBegin(NET_IN_FIELD_DESC);
      oprot.writeString(this.netIn);
      oprot.writeFieldEnd();
    }
    if (this.netOut != null) {
      oprot.writeFieldBegin(NET_OUT_FIELD_DESC);
      oprot.writeString(this.netOut);
      oprot.writeFieldEnd();
    }
    if (this.logTime != null) {
      oprot.writeFieldBegin(LOG_TIME_FIELD_DESC);
      oprot.writeString(this.logTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LIVE_STATUS_FIELD_DESC);
    oprot.writeBool(this.liveStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostSummaryMetrics(");
    boolean first = true;

    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostIp:");
    if (this.hostIp == null) {
      sb.append("null");
    } else {
      sb.append(this.hostIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuLoad:");
    if (this.cpuLoad == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuLoad);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUser:");
    if (this.cpuUser == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diskUsed:");
    if (this.diskUsed == null) {
      sb.append("null");
    } else {
      sb.append(this.diskUsed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("netIn:");
    if (this.netIn == null) {
      sb.append("null");
    } else {
      sb.append(this.netIn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("netOut:");
    if (this.netOut == null) {
      sb.append("null");
    } else {
      sb.append(this.netOut);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logTime:");
    if (this.logTime == null) {
      sb.append("null");
    } else {
      sb.append(this.logTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveStatus:");
    sb.append(this.liveStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

