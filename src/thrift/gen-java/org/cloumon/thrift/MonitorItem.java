/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MonitorItem implements org.apache.thrift.TBase<MonitorItem, MonitorItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonitorItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultItem", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ADAPTOR_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("adaptorClass", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarm", org.apache.thrift.protocol.TType.STRING, (short)9);

  public String itemId;
  public String itemName;
  public String groupName;
  public boolean defaultItem;
  public String adaptorClass;
  public int period;
  public String params;
  public String description;
  public String alarm;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    ITEM_NAME((short)2, "itemName"),
    GROUP_NAME((short)3, "groupName"),
    DEFAULT_ITEM((short)4, "defaultItem"),
    ADAPTOR_CLASS((short)5, "adaptorClass"),
    PERIOD((short)6, "period"),
    PARAMS((short)7, "params"),
    DESCRIPTION((short)8, "description"),
    ALARM((short)9, "alarm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // ITEM_NAME
          return ITEM_NAME;
        case 3: // GROUP_NAME
          return GROUP_NAME;
        case 4: // DEFAULT_ITEM
          return DEFAULT_ITEM;
        case 5: // ADAPTOR_CLASS
          return ADAPTOR_CLASS;
        case 6: // PERIOD
          return PERIOD;
        case 7: // PARAMS
          return PARAMS;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // ALARM
          return ALARM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEFAULTITEM_ISSET_ID = 0;
  private static final int __PERIOD_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_ITEM, new org.apache.thrift.meta_data.FieldMetaData("defaultItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ADAPTOR_CLASS, new org.apache.thrift.meta_data.FieldMetaData("adaptorClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALARM, new org.apache.thrift.meta_data.FieldMetaData("alarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonitorItem.class, metaDataMap);
  }

  public MonitorItem() {
  }

  public MonitorItem(
    String itemId,
    String itemName,
    String groupName,
    boolean defaultItem,
    String adaptorClass,
    int period,
    String params,
    String description,
    String alarm)
  {
    this();
    this.itemId = itemId;
    this.itemName = itemName;
    this.groupName = groupName;
    this.defaultItem = defaultItem;
    setDefaultItemIsSet(true);
    this.adaptorClass = adaptorClass;
    this.period = period;
    setPeriodIsSet(true);
    this.params = params;
    this.description = description;
    this.alarm = alarm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonitorItem(MonitorItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    this.defaultItem = other.defaultItem;
    if (other.isSetAdaptorClass()) {
      this.adaptorClass = other.adaptorClass;
    }
    this.period = other.period;
    if (other.isSetParams()) {
      this.params = other.params;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAlarm()) {
      this.alarm = other.alarm;
    }
  }

  public MonitorItem deepCopy() {
    return new MonitorItem(this);
  }

  @Override
  public void clear() {
    this.itemId = null;
    this.itemName = null;
    this.groupName = null;
    setDefaultItemIsSet(false);
    this.defaultItem = false;
    this.adaptorClass = null;
    setPeriodIsSet(false);
    this.period = 0;
    this.params = null;
    this.description = null;
    this.alarm = null;
  }

  public String getItemId() {
    return this.itemId;
  }

  public MonitorItem setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public String getItemName() {
    return this.itemName;
  }

  public MonitorItem setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public MonitorItem setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public boolean isDefaultItem() {
    return this.defaultItem;
  }

  public MonitorItem setDefaultItem(boolean defaultItem) {
    this.defaultItem = defaultItem;
    setDefaultItemIsSet(true);
    return this;
  }

  public void unsetDefaultItem() {
    __isset_bit_vector.clear(__DEFAULTITEM_ISSET_ID);
  }

  /** Returns true if field defaultItem is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultItem() {
    return __isset_bit_vector.get(__DEFAULTITEM_ISSET_ID);
  }

  public void setDefaultItemIsSet(boolean value) {
    __isset_bit_vector.set(__DEFAULTITEM_ISSET_ID, value);
  }

  public String getAdaptorClass() {
    return this.adaptorClass;
  }

  public MonitorItem setAdaptorClass(String adaptorClass) {
    this.adaptorClass = adaptorClass;
    return this;
  }

  public void unsetAdaptorClass() {
    this.adaptorClass = null;
  }

  /** Returns true if field adaptorClass is set (has been assigned a value) and false otherwise */
  public boolean isSetAdaptorClass() {
    return this.adaptorClass != null;
  }

  public void setAdaptorClassIsSet(boolean value) {
    if (!value) {
      this.adaptorClass = null;
    }
  }

  public int getPeriod() {
    return this.period;
  }

  public MonitorItem setPeriod(int period) {
    this.period = period;
    setPeriodIsSet(true);
    return this;
  }

  public void unsetPeriod() {
    __isset_bit_vector.clear(__PERIOD_ISSET_ID);
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return __isset_bit_vector.get(__PERIOD_ISSET_ID);
  }

  public void setPeriodIsSet(boolean value) {
    __isset_bit_vector.set(__PERIOD_ISSET_ID, value);
  }

  public String getParams() {
    return this.params;
  }

  public MonitorItem setParams(String params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public MonitorItem setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getAlarm() {
    return this.alarm;
  }

  public MonitorItem setAlarm(String alarm) {
    this.alarm = alarm;
    return this;
  }

  public void unsetAlarm() {
    this.alarm = null;
  }

  /** Returns true if field alarm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarm() {
    return this.alarm != null;
  }

  public void setAlarmIsSet(boolean value) {
    if (!value) {
      this.alarm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case DEFAULT_ITEM:
      if (value == null) {
        unsetDefaultItem();
      } else {
        setDefaultItem((Boolean)value);
      }
      break;

    case ADAPTOR_CLASS:
      if (value == null) {
        unsetAdaptorClass();
      } else {
        setAdaptorClass((String)value);
      }
      break;

    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((Integer)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ALARM:
      if (value == null) {
        unsetAlarm();
      } else {
        setAlarm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return getItemId();

    case ITEM_NAME:
      return getItemName();

    case GROUP_NAME:
      return getGroupName();

    case DEFAULT_ITEM:
      return Boolean.valueOf(isDefaultItem());

    case ADAPTOR_CLASS:
      return getAdaptorClass();

    case PERIOD:
      return Integer.valueOf(getPeriod());

    case PARAMS:
      return getParams();

    case DESCRIPTION:
      return getDescription();

    case ALARM:
      return getAlarm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case ITEM_NAME:
      return isSetItemName();
    case GROUP_NAME:
      return isSetGroupName();
    case DEFAULT_ITEM:
      return isSetDefaultItem();
    case ADAPTOR_CLASS:
      return isSetAdaptorClass();
    case PERIOD:
      return isSetPeriod();
    case PARAMS:
      return isSetParams();
    case DESCRIPTION:
      return isSetDescription();
    case ALARM:
      return isSetAlarm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MonitorItem)
      return this.equals((MonitorItem)that);
    return false;
  }

  public boolean equals(MonitorItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_defaultItem = true;
    boolean that_present_defaultItem = true;
    if (this_present_defaultItem || that_present_defaultItem) {
      if (!(this_present_defaultItem && that_present_defaultItem))
        return false;
      if (this.defaultItem != that.defaultItem)
        return false;
    }

    boolean this_present_adaptorClass = true && this.isSetAdaptorClass();
    boolean that_present_adaptorClass = true && that.isSetAdaptorClass();
    if (this_present_adaptorClass || that_present_adaptorClass) {
      if (!(this_present_adaptorClass && that_present_adaptorClass))
        return false;
      if (!this.adaptorClass.equals(that.adaptorClass))
        return false;
    }

    boolean this_present_period = true;
    boolean that_present_period = true;
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (this.period != that.period)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_alarm = true && this.isSetAlarm();
    boolean that_present_alarm = true && that.isSetAlarm();
    if (this_present_alarm || that_present_alarm) {
      if (!(this_present_alarm && that_present_alarm))
        return false;
      if (!this.alarm.equals(that.alarm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MonitorItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MonitorItem typedOther = (MonitorItem)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(typedOther.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, typedOther.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultItem()).compareTo(typedOther.isSetDefaultItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultItem, typedOther.defaultItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdaptorClass()).compareTo(typedOther.isSetAdaptorClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdaptorClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adaptorClass, typedOther.adaptorClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(typedOther.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, typedOther.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarm()).compareTo(typedOther.isSetAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarm, typedOther.alarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ITEM_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.itemId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ITEM_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.itemName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // GROUP_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.groupName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DEFAULT_ITEM
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.defaultItem = iprot.readBool();
            setDefaultItemIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ADAPTOR_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.adaptorClass = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PERIOD
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.period = iprot.readI32();
            setPeriodIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PARAMS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.params = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DESCRIPTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.description = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ALARM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.alarm = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.itemId != null) {
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeString(this.itemId);
      oprot.writeFieldEnd();
    }
    if (this.itemName != null) {
      oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
      oprot.writeString(this.itemName);
      oprot.writeFieldEnd();
    }
    if (this.groupName != null) {
      oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
      oprot.writeString(this.groupName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DEFAULT_ITEM_FIELD_DESC);
    oprot.writeBool(this.defaultItem);
    oprot.writeFieldEnd();
    if (this.adaptorClass != null) {
      oprot.writeFieldBegin(ADAPTOR_CLASS_FIELD_DESC);
      oprot.writeString(this.adaptorClass);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PERIOD_FIELD_DESC);
    oprot.writeI32(this.period);
    oprot.writeFieldEnd();
    if (this.params != null) {
      oprot.writeFieldBegin(PARAMS_FIELD_DESC);
      oprot.writeString(this.params);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    if (this.alarm != null) {
      oprot.writeFieldBegin(ALARM_FIELD_DESC);
      oprot.writeString(this.alarm);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MonitorItem(");
    boolean first = true;

    sb.append("itemId:");
    if (this.itemId == null) {
      sb.append("null");
    } else {
      sb.append(this.itemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultItem:");
    sb.append(this.defaultItem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adaptorClass:");
    if (this.adaptorClass == null) {
      sb.append("null");
    } else {
      sb.append(this.adaptorClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("period:");
    sb.append(this.period);
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarm:");
    if (this.alarm == null) {
      sb.append("null");
    } else {
      sb.append(this.alarm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

