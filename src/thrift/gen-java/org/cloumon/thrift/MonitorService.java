/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MonitorService {

  public interface Iface {

    public void addMinitorItem(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException;

    public void modifyMonitorItem(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm) throws org.apache.thrift.TException;

    public void removeMonitorItem(String monitorItemId) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.MonitorItem> findAllMonitorItems() throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.MonitorItem> findHostMonitorItems(String hostName) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.MonitorItem> findMonitorItemByGroup(String groupName) throws org.apache.thrift.TException;

    public List<String> findHostItemGroup(String hostName) throws org.apache.thrift.TException;

    public org.cloumon.thrift.MonitorItem getMonitorItem(String itemId) throws org.apache.thrift.TException;

    public void addHostToMonitorItem(List<String> itemId, List<String> hostNames) throws org.apache.thrift.TException;

    public void modifyMonitorItemToHosts(String monitorItemId, List<String> hostsIs) throws org.apache.thrift.TException;

    public void modifyHostMonitorItem(String monitorItemId, String hostName, String alarm) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostSummaryMetrics> getHostSummaryMetrics() throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.MetricViewRecord> getHostCurrentMetrics(String hostName, String groupName) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostHistoryMetrics> getHostHistoryMetrics(String hostName, String groupName, String startTime, String endTime) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostHistoryMetrics> getHostHistoryItemMetrics(String hostName, String groupName, List<String> itemNames, String startTime, String endTime) throws org.apache.thrift.TException;

    public String checkMetricHistoryTime(String startTime, String endTime) throws org.apache.thrift.TException;

    public org.cloumon.thrift.HostInfo getHostInfo(String hostName) throws org.apache.thrift.TException;

    public void removeHosts(List<String> hostNames) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostInfo> findAllHosts() throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostInfo> findHostByServiceGroup(String serviceGroupName) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HostInfo> findHostByMonitorItem(String monitorItemId) throws org.apache.thrift.TException;

    public void registerAgent(String agentIp, org.cloumon.thrift.HostInfo hostInfo) throws org.apache.thrift.TException;

    public void updateAgentLiveStatus(String agentHostName, boolean liveStatus) throws org.apache.thrift.TException;

    public void updateAgentAlarm(String agentHostName, String alarm, boolean on) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.ServiceGroup> findAllServiceGroup() throws org.apache.thrift.TException;

    public void addServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup) throws org.apache.thrift.TException;

    public void removeServiceGroup(String serviceGroupName) throws org.apache.thrift.TException;

    public void removeHostsFromServiceGroup(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException;

    public void addHostToService(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException;

    public List<org.cloumon.thrift.HadoopServerStatus> getHadoopServerList(String type) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addMinitorItem(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addMinitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyMonitorItem(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void removeMonitorItem(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void findAllMonitorItems(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAllMonitorItems_call> resultHandler) throws org.apache.thrift.TException;

    public void findHostMonitorItems(String hostName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findHostMonitorItems_call> resultHandler) throws org.apache.thrift.TException;

    public void findMonitorItemByGroup(String groupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findMonitorItemByGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void findHostItemGroup(String hostName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findHostItemGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void getMonitorItem(String itemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void addHostToMonitorItem(List<String> itemId, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addHostToMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyMonitorItemToHosts(String monitorItemId, List<String> hostsIs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyMonitorItemToHosts_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyHostMonitorItem(String monitorItemId, String hostName, String alarm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyHostMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostSummaryMetrics(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostSummaryMetrics_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostCurrentMetrics(String hostName, String groupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostCurrentMetrics_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostHistoryMetrics(String hostName, String groupName, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostHistoryMetrics_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostHistoryItemMetrics(String hostName, String groupName, List<String> itemNames, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostHistoryItemMetrics_call> resultHandler) throws org.apache.thrift.TException;

    public void checkMetricHistoryTime(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkMetricHistoryTime_call> resultHandler) throws org.apache.thrift.TException;

    public void getHostInfo(String hostName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHostInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void removeHosts(List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeHosts_call> resultHandler) throws org.apache.thrift.TException;

    public void findAllHosts(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAllHosts_call> resultHandler) throws org.apache.thrift.TException;

    public void findHostByServiceGroup(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findHostByServiceGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void findHostByMonitorItem(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findHostByMonitorItem_call> resultHandler) throws org.apache.thrift.TException;

    public void registerAgent(String agentIp, org.cloumon.thrift.HostInfo hostInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerAgent_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAgentLiveStatus(String agentHostName, boolean liveStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAgentLiveStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAgentAlarm(String agentHostName, String alarm, boolean on, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAgentAlarm_call> resultHandler) throws org.apache.thrift.TException;

    public void findAllServiceGroup(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAllServiceGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void addServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addServiceGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void removeServiceGroup(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeServiceGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void removeHostsFromServiceGroup(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeHostsFromServiceGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void addHostToService(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addHostToService_call> resultHandler) throws org.apache.thrift.TException;

    public void getHadoopServerList(String type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHadoopServerList_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addMinitorItem(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException
    {
      send_addMinitorItem(monitorItems);
      recv_addMinitorItem();
    }

    public void send_addMinitorItem(List<org.cloumon.thrift.MonitorItem> monitorItems) throws org.apache.thrift.TException
    {
      addMinitorItem_args args = new addMinitorItem_args();
      args.setMonitorItems(monitorItems);
      sendBase("addMinitorItem", args);
    }

    public void recv_addMinitorItem() throws org.apache.thrift.TException
    {
      addMinitorItem_result result = new addMinitorItem_result();
      receiveBase(result, "addMinitorItem");
      return;
    }

    public void modifyMonitorItem(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm) throws org.apache.thrift.TException
    {
      send_modifyMonitorItem(monitorItem, autoDeployAlarm);
      recv_modifyMonitorItem();
    }

    public void send_modifyMonitorItem(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm) throws org.apache.thrift.TException
    {
      modifyMonitorItem_args args = new modifyMonitorItem_args();
      args.setMonitorItem(monitorItem);
      args.setAutoDeployAlarm(autoDeployAlarm);
      sendBase("modifyMonitorItem", args);
    }

    public void recv_modifyMonitorItem() throws org.apache.thrift.TException
    {
      modifyMonitorItem_result result = new modifyMonitorItem_result();
      receiveBase(result, "modifyMonitorItem");
      return;
    }

    public void removeMonitorItem(String monitorItemId) throws org.apache.thrift.TException
    {
      send_removeMonitorItem(monitorItemId);
      recv_removeMonitorItem();
    }

    public void send_removeMonitorItem(String monitorItemId) throws org.apache.thrift.TException
    {
      removeMonitorItem_args args = new removeMonitorItem_args();
      args.setMonitorItemId(monitorItemId);
      sendBase("removeMonitorItem", args);
    }

    public void recv_removeMonitorItem() throws org.apache.thrift.TException
    {
      removeMonitorItem_result result = new removeMonitorItem_result();
      receiveBase(result, "removeMonitorItem");
      return;
    }

    public List<org.cloumon.thrift.MonitorItem> findAllMonitorItems() throws org.apache.thrift.TException
    {
      send_findAllMonitorItems();
      return recv_findAllMonitorItems();
    }

    public void send_findAllMonitorItems() throws org.apache.thrift.TException
    {
      findAllMonitorItems_args args = new findAllMonitorItems_args();
      sendBase("findAllMonitorItems", args);
    }

    public List<org.cloumon.thrift.MonitorItem> recv_findAllMonitorItems() throws org.apache.thrift.TException
    {
      findAllMonitorItems_result result = new findAllMonitorItems_result();
      receiveBase(result, "findAllMonitorItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllMonitorItems failed: unknown result");
    }

    public List<org.cloumon.thrift.MonitorItem> findHostMonitorItems(String hostName) throws org.apache.thrift.TException
    {
      send_findHostMonitorItems(hostName);
      return recv_findHostMonitorItems();
    }

    public void send_findHostMonitorItems(String hostName) throws org.apache.thrift.TException
    {
      findHostMonitorItems_args args = new findHostMonitorItems_args();
      args.setHostName(hostName);
      sendBase("findHostMonitorItems", args);
    }

    public List<org.cloumon.thrift.MonitorItem> recv_findHostMonitorItems() throws org.apache.thrift.TException
    {
      findHostMonitorItems_result result = new findHostMonitorItems_result();
      receiveBase(result, "findHostMonitorItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHostMonitorItems failed: unknown result");
    }

    public List<org.cloumon.thrift.MonitorItem> findMonitorItemByGroup(String groupName) throws org.apache.thrift.TException
    {
      send_findMonitorItemByGroup(groupName);
      return recv_findMonitorItemByGroup();
    }

    public void send_findMonitorItemByGroup(String groupName) throws org.apache.thrift.TException
    {
      findMonitorItemByGroup_args args = new findMonitorItemByGroup_args();
      args.setGroupName(groupName);
      sendBase("findMonitorItemByGroup", args);
    }

    public List<org.cloumon.thrift.MonitorItem> recv_findMonitorItemByGroup() throws org.apache.thrift.TException
    {
      findMonitorItemByGroup_result result = new findMonitorItemByGroup_result();
      receiveBase(result, "findMonitorItemByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMonitorItemByGroup failed: unknown result");
    }

    public List<String> findHostItemGroup(String hostName) throws org.apache.thrift.TException
    {
      send_findHostItemGroup(hostName);
      return recv_findHostItemGroup();
    }

    public void send_findHostItemGroup(String hostName) throws org.apache.thrift.TException
    {
      findHostItemGroup_args args = new findHostItemGroup_args();
      args.setHostName(hostName);
      sendBase("findHostItemGroup", args);
    }

    public List<String> recv_findHostItemGroup() throws org.apache.thrift.TException
    {
      findHostItemGroup_result result = new findHostItemGroup_result();
      receiveBase(result, "findHostItemGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHostItemGroup failed: unknown result");
    }

    public org.cloumon.thrift.MonitorItem getMonitorItem(String itemId) throws org.apache.thrift.TException
    {
      send_getMonitorItem(itemId);
      return recv_getMonitorItem();
    }

    public void send_getMonitorItem(String itemId) throws org.apache.thrift.TException
    {
      getMonitorItem_args args = new getMonitorItem_args();
      args.setItemId(itemId);
      sendBase("getMonitorItem", args);
    }

    public org.cloumon.thrift.MonitorItem recv_getMonitorItem() throws org.apache.thrift.TException
    {
      getMonitorItem_result result = new getMonitorItem_result();
      receiveBase(result, "getMonitorItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMonitorItem failed: unknown result");
    }

    public void addHostToMonitorItem(List<String> itemId, List<String> hostNames) throws org.apache.thrift.TException
    {
      send_addHostToMonitorItem(itemId, hostNames);
      recv_addHostToMonitorItem();
    }

    public void send_addHostToMonitorItem(List<String> itemId, List<String> hostNames) throws org.apache.thrift.TException
    {
      addHostToMonitorItem_args args = new addHostToMonitorItem_args();
      args.setItemId(itemId);
      args.setHostNames(hostNames);
      sendBase("addHostToMonitorItem", args);
    }

    public void recv_addHostToMonitorItem() throws org.apache.thrift.TException
    {
      addHostToMonitorItem_result result = new addHostToMonitorItem_result();
      receiveBase(result, "addHostToMonitorItem");
      return;
    }

    public void modifyMonitorItemToHosts(String monitorItemId, List<String> hostsIs) throws org.apache.thrift.TException
    {
      send_modifyMonitorItemToHosts(monitorItemId, hostsIs);
      recv_modifyMonitorItemToHosts();
    }

    public void send_modifyMonitorItemToHosts(String monitorItemId, List<String> hostsIs) throws org.apache.thrift.TException
    {
      modifyMonitorItemToHosts_args args = new modifyMonitorItemToHosts_args();
      args.setMonitorItemId(monitorItemId);
      args.setHostsIs(hostsIs);
      sendBase("modifyMonitorItemToHosts", args);
    }

    public void recv_modifyMonitorItemToHosts() throws org.apache.thrift.TException
    {
      modifyMonitorItemToHosts_result result = new modifyMonitorItemToHosts_result();
      receiveBase(result, "modifyMonitorItemToHosts");
      return;
    }

    public void modifyHostMonitorItem(String monitorItemId, String hostName, String alarm) throws org.apache.thrift.TException
    {
      send_modifyHostMonitorItem(monitorItemId, hostName, alarm);
      recv_modifyHostMonitorItem();
    }

    public void send_modifyHostMonitorItem(String monitorItemId, String hostName, String alarm) throws org.apache.thrift.TException
    {
      modifyHostMonitorItem_args args = new modifyHostMonitorItem_args();
      args.setMonitorItemId(monitorItemId);
      args.setHostName(hostName);
      args.setAlarm(alarm);
      sendBase("modifyHostMonitorItem", args);
    }

    public void recv_modifyHostMonitorItem() throws org.apache.thrift.TException
    {
      modifyHostMonitorItem_result result = new modifyHostMonitorItem_result();
      receiveBase(result, "modifyHostMonitorItem");
      return;
    }

    public List<org.cloumon.thrift.HostSummaryMetrics> getHostSummaryMetrics() throws org.apache.thrift.TException
    {
      send_getHostSummaryMetrics();
      return recv_getHostSummaryMetrics();
    }

    public void send_getHostSummaryMetrics() throws org.apache.thrift.TException
    {
      getHostSummaryMetrics_args args = new getHostSummaryMetrics_args();
      sendBase("getHostSummaryMetrics", args);
    }

    public List<org.cloumon.thrift.HostSummaryMetrics> recv_getHostSummaryMetrics() throws org.apache.thrift.TException
    {
      getHostSummaryMetrics_result result = new getHostSummaryMetrics_result();
      receiveBase(result, "getHostSummaryMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostSummaryMetrics failed: unknown result");
    }

    public List<org.cloumon.thrift.MetricViewRecord> getHostCurrentMetrics(String hostName, String groupName) throws org.apache.thrift.TException
    {
      send_getHostCurrentMetrics(hostName, groupName);
      return recv_getHostCurrentMetrics();
    }

    public void send_getHostCurrentMetrics(String hostName, String groupName) throws org.apache.thrift.TException
    {
      getHostCurrentMetrics_args args = new getHostCurrentMetrics_args();
      args.setHostName(hostName);
      args.setGroupName(groupName);
      sendBase("getHostCurrentMetrics", args);
    }

    public List<org.cloumon.thrift.MetricViewRecord> recv_getHostCurrentMetrics() throws org.apache.thrift.TException
    {
      getHostCurrentMetrics_result result = new getHostCurrentMetrics_result();
      receiveBase(result, "getHostCurrentMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostCurrentMetrics failed: unknown result");
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> getHostHistoryMetrics(String hostName, String groupName, String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_getHostHistoryMetrics(hostName, groupName, startTime, endTime);
      return recv_getHostHistoryMetrics();
    }

    public void send_getHostHistoryMetrics(String hostName, String groupName, String startTime, String endTime) throws org.apache.thrift.TException
    {
      getHostHistoryMetrics_args args = new getHostHistoryMetrics_args();
      args.setHostName(hostName);
      args.setGroupName(groupName);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getHostHistoryMetrics", args);
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> recv_getHostHistoryMetrics() throws org.apache.thrift.TException
    {
      getHostHistoryMetrics_result result = new getHostHistoryMetrics_result();
      receiveBase(result, "getHostHistoryMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostHistoryMetrics failed: unknown result");
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> getHostHistoryItemMetrics(String hostName, String groupName, List<String> itemNames, String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_getHostHistoryItemMetrics(hostName, groupName, itemNames, startTime, endTime);
      return recv_getHostHistoryItemMetrics();
    }

    public void send_getHostHistoryItemMetrics(String hostName, String groupName, List<String> itemNames, String startTime, String endTime) throws org.apache.thrift.TException
    {
      getHostHistoryItemMetrics_args args = new getHostHistoryItemMetrics_args();
      args.setHostName(hostName);
      args.setGroupName(groupName);
      args.setItemNames(itemNames);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("getHostHistoryItemMetrics", args);
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> recv_getHostHistoryItemMetrics() throws org.apache.thrift.TException
    {
      getHostHistoryItemMetrics_result result = new getHostHistoryItemMetrics_result();
      receiveBase(result, "getHostHistoryItemMetrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostHistoryItemMetrics failed: unknown result");
    }

    public String checkMetricHistoryTime(String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_checkMetricHistoryTime(startTime, endTime);
      return recv_checkMetricHistoryTime();
    }

    public void send_checkMetricHistoryTime(String startTime, String endTime) throws org.apache.thrift.TException
    {
      checkMetricHistoryTime_args args = new checkMetricHistoryTime_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("checkMetricHistoryTime", args);
    }

    public String recv_checkMetricHistoryTime() throws org.apache.thrift.TException
    {
      checkMetricHistoryTime_result result = new checkMetricHistoryTime_result();
      receiveBase(result, "checkMetricHistoryTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkMetricHistoryTime failed: unknown result");
    }

    public org.cloumon.thrift.HostInfo getHostInfo(String hostName) throws org.apache.thrift.TException
    {
      send_getHostInfo(hostName);
      return recv_getHostInfo();
    }

    public void send_getHostInfo(String hostName) throws org.apache.thrift.TException
    {
      getHostInfo_args args = new getHostInfo_args();
      args.setHostName(hostName);
      sendBase("getHostInfo", args);
    }

    public org.cloumon.thrift.HostInfo recv_getHostInfo() throws org.apache.thrift.TException
    {
      getHostInfo_result result = new getHostInfo_result();
      receiveBase(result, "getHostInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHostInfo failed: unknown result");
    }

    public void removeHosts(List<String> hostNames) throws org.apache.thrift.TException
    {
      send_removeHosts(hostNames);
      recv_removeHosts();
    }

    public void send_removeHosts(List<String> hostNames) throws org.apache.thrift.TException
    {
      removeHosts_args args = new removeHosts_args();
      args.setHostNames(hostNames);
      sendBase("removeHosts", args);
    }

    public void recv_removeHosts() throws org.apache.thrift.TException
    {
      removeHosts_result result = new removeHosts_result();
      receiveBase(result, "removeHosts");
      return;
    }

    public List<org.cloumon.thrift.HostInfo> findAllHosts() throws org.apache.thrift.TException
    {
      send_findAllHosts();
      return recv_findAllHosts();
    }

    public void send_findAllHosts() throws org.apache.thrift.TException
    {
      findAllHosts_args args = new findAllHosts_args();
      sendBase("findAllHosts", args);
    }

    public List<org.cloumon.thrift.HostInfo> recv_findAllHosts() throws org.apache.thrift.TException
    {
      findAllHosts_result result = new findAllHosts_result();
      receiveBase(result, "findAllHosts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllHosts failed: unknown result");
    }

    public List<org.cloumon.thrift.HostInfo> findHostByServiceGroup(String serviceGroupName) throws org.apache.thrift.TException
    {
      send_findHostByServiceGroup(serviceGroupName);
      return recv_findHostByServiceGroup();
    }

    public void send_findHostByServiceGroup(String serviceGroupName) throws org.apache.thrift.TException
    {
      findHostByServiceGroup_args args = new findHostByServiceGroup_args();
      args.setServiceGroupName(serviceGroupName);
      sendBase("findHostByServiceGroup", args);
    }

    public List<org.cloumon.thrift.HostInfo> recv_findHostByServiceGroup() throws org.apache.thrift.TException
    {
      findHostByServiceGroup_result result = new findHostByServiceGroup_result();
      receiveBase(result, "findHostByServiceGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHostByServiceGroup failed: unknown result");
    }

    public List<org.cloumon.thrift.HostInfo> findHostByMonitorItem(String monitorItemId) throws org.apache.thrift.TException
    {
      send_findHostByMonitorItem(monitorItemId);
      return recv_findHostByMonitorItem();
    }

    public void send_findHostByMonitorItem(String monitorItemId) throws org.apache.thrift.TException
    {
      findHostByMonitorItem_args args = new findHostByMonitorItem_args();
      args.setMonitorItemId(monitorItemId);
      sendBase("findHostByMonitorItem", args);
    }

    public List<org.cloumon.thrift.HostInfo> recv_findHostByMonitorItem() throws org.apache.thrift.TException
    {
      findHostByMonitorItem_result result = new findHostByMonitorItem_result();
      receiveBase(result, "findHostByMonitorItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findHostByMonitorItem failed: unknown result");
    }

    public void registerAgent(String agentIp, org.cloumon.thrift.HostInfo hostInfo) throws org.apache.thrift.TException
    {
      send_registerAgent(agentIp, hostInfo);
      recv_registerAgent();
    }

    public void send_registerAgent(String agentIp, org.cloumon.thrift.HostInfo hostInfo) throws org.apache.thrift.TException
    {
      registerAgent_args args = new registerAgent_args();
      args.setAgentIp(agentIp);
      args.setHostInfo(hostInfo);
      sendBase("registerAgent", args);
    }

    public void recv_registerAgent() throws org.apache.thrift.TException
    {
      registerAgent_result result = new registerAgent_result();
      receiveBase(result, "registerAgent");
      return;
    }

    public void updateAgentLiveStatus(String agentHostName, boolean liveStatus) throws org.apache.thrift.TException
    {
      send_updateAgentLiveStatus(agentHostName, liveStatus);
      recv_updateAgentLiveStatus();
    }

    public void send_updateAgentLiveStatus(String agentHostName, boolean liveStatus) throws org.apache.thrift.TException
    {
      updateAgentLiveStatus_args args = new updateAgentLiveStatus_args();
      args.setAgentHostName(agentHostName);
      args.setLiveStatus(liveStatus);
      sendBase("updateAgentLiveStatus", args);
    }

    public void recv_updateAgentLiveStatus() throws org.apache.thrift.TException
    {
      updateAgentLiveStatus_result result = new updateAgentLiveStatus_result();
      receiveBase(result, "updateAgentLiveStatus");
      return;
    }

    public void updateAgentAlarm(String agentHostName, String alarm, boolean on) throws org.apache.thrift.TException
    {
      send_updateAgentAlarm(agentHostName, alarm, on);
      recv_updateAgentAlarm();
    }

    public void send_updateAgentAlarm(String agentHostName, String alarm, boolean on) throws org.apache.thrift.TException
    {
      updateAgentAlarm_args args = new updateAgentAlarm_args();
      args.setAgentHostName(agentHostName);
      args.setAlarm(alarm);
      args.setOn(on);
      sendBase("updateAgentAlarm", args);
    }

    public void recv_updateAgentAlarm() throws org.apache.thrift.TException
    {
      updateAgentAlarm_result result = new updateAgentAlarm_result();
      receiveBase(result, "updateAgentAlarm");
      return;
    }

    public List<org.cloumon.thrift.ServiceGroup> findAllServiceGroup() throws org.apache.thrift.TException
    {
      send_findAllServiceGroup();
      return recv_findAllServiceGroup();
    }

    public void send_findAllServiceGroup() throws org.apache.thrift.TException
    {
      findAllServiceGroup_args args = new findAllServiceGroup_args();
      sendBase("findAllServiceGroup", args);
    }

    public List<org.cloumon.thrift.ServiceGroup> recv_findAllServiceGroup() throws org.apache.thrift.TException
    {
      findAllServiceGroup_result result = new findAllServiceGroup_result();
      receiveBase(result, "findAllServiceGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllServiceGroup failed: unknown result");
    }

    public void addServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup) throws org.apache.thrift.TException
    {
      send_addServiceGroup(serviceGroup);
      recv_addServiceGroup();
    }

    public void send_addServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup) throws org.apache.thrift.TException
    {
      addServiceGroup_args args = new addServiceGroup_args();
      args.setServiceGroup(serviceGroup);
      sendBase("addServiceGroup", args);
    }

    public void recv_addServiceGroup() throws org.apache.thrift.TException
    {
      addServiceGroup_result result = new addServiceGroup_result();
      receiveBase(result, "addServiceGroup");
      return;
    }

    public void removeServiceGroup(String serviceGroupName) throws org.apache.thrift.TException
    {
      send_removeServiceGroup(serviceGroupName);
      recv_removeServiceGroup();
    }

    public void send_removeServiceGroup(String serviceGroupName) throws org.apache.thrift.TException
    {
      removeServiceGroup_args args = new removeServiceGroup_args();
      args.setServiceGroupName(serviceGroupName);
      sendBase("removeServiceGroup", args);
    }

    public void recv_removeServiceGroup() throws org.apache.thrift.TException
    {
      removeServiceGroup_result result = new removeServiceGroup_result();
      receiveBase(result, "removeServiceGroup");
      return;
    }

    public void removeHostsFromServiceGroup(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException
    {
      send_removeHostsFromServiceGroup(serviceGroupName, hostNames);
      recv_removeHostsFromServiceGroup();
    }

    public void send_removeHostsFromServiceGroup(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException
    {
      removeHostsFromServiceGroup_args args = new removeHostsFromServiceGroup_args();
      args.setServiceGroupName(serviceGroupName);
      args.setHostNames(hostNames);
      sendBase("removeHostsFromServiceGroup", args);
    }

    public void recv_removeHostsFromServiceGroup() throws org.apache.thrift.TException
    {
      removeHostsFromServiceGroup_result result = new removeHostsFromServiceGroup_result();
      receiveBase(result, "removeHostsFromServiceGroup");
      return;
    }

    public void addHostToService(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException
    {
      send_addHostToService(serviceGroupName, hostNames);
      recv_addHostToService();
    }

    public void send_addHostToService(String serviceGroupName, List<String> hostNames) throws org.apache.thrift.TException
    {
      addHostToService_args args = new addHostToService_args();
      args.setServiceGroupName(serviceGroupName);
      args.setHostNames(hostNames);
      sendBase("addHostToService", args);
    }

    public void recv_addHostToService() throws org.apache.thrift.TException
    {
      addHostToService_result result = new addHostToService_result();
      receiveBase(result, "addHostToService");
      return;
    }

    public List<org.cloumon.thrift.HadoopServerStatus> getHadoopServerList(String type) throws org.apache.thrift.TException
    {
      send_getHadoopServerList(type);
      return recv_getHadoopServerList();
    }

    public void send_getHadoopServerList(String type) throws org.apache.thrift.TException
    {
      getHadoopServerList_args args = new getHadoopServerList_args();
      args.setType(type);
      sendBase("getHadoopServerList", args);
    }

    public List<org.cloumon.thrift.HadoopServerStatus> recv_getHadoopServerList() throws org.apache.thrift.TException
    {
      getHadoopServerList_result result = new getHadoopServerList_result();
      receiveBase(result, "getHadoopServerList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHadoopServerList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMinitorItem(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<addMinitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMinitorItem_call method_call = new addMinitorItem_call(monitorItems, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addMinitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<org.cloumon.thrift.MonitorItem> monitorItems;
      public addMinitorItem_call(List<org.cloumon.thrift.MonitorItem> monitorItems, org.apache.thrift.async.AsyncMethodCallback<addMinitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItems = monitorItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMinitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMinitorItem_args args = new addMinitorItem_args();
        args.setMonitorItems(monitorItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addMinitorItem();
      }
    }

    public void modifyMonitorItem(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm, org.apache.thrift.async.AsyncMethodCallback<modifyMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyMonitorItem_call method_call = new modifyMonitorItem_call(monitorItem, autoDeployAlarm, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.cloumon.thrift.MonitorItem monitorItem;
      private boolean autoDeployAlarm;
      public modifyMonitorItem_call(org.cloumon.thrift.MonitorItem monitorItem, boolean autoDeployAlarm, org.apache.thrift.async.AsyncMethodCallback<modifyMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItem = monitorItem;
        this.autoDeployAlarm = autoDeployAlarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyMonitorItem_args args = new modifyMonitorItem_args();
        args.setMonitorItem(monitorItem);
        args.setAutoDeployAlarm(autoDeployAlarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_modifyMonitorItem();
      }
    }

    public void removeMonitorItem(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<removeMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeMonitorItem_call method_call = new removeMonitorItem_call(monitorItemId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class removeMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String monitorItemId;
      public removeMonitorItem_call(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<removeMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItemId = monitorItemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeMonitorItem_args args = new removeMonitorItem_args();
        args.setMonitorItemId(monitorItemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeMonitorItem();
      }
    }

    public void findAllMonitorItems(org.apache.thrift.async.AsyncMethodCallback<findAllMonitorItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllMonitorItems_call method_call = new findAllMonitorItems_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findAllMonitorItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllMonitorItems_call(org.apache.thrift.async.AsyncMethodCallback<findAllMonitorItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllMonitorItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllMonitorItems_args args = new findAllMonitorItems_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.MonitorItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllMonitorItems();
      }
    }

    public void findHostMonitorItems(String hostName, org.apache.thrift.async.AsyncMethodCallback<findHostMonitorItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHostMonitorItems_call method_call = new findHostMonitorItems_call(hostName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findHostMonitorItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      public findHostMonitorItems_call(String hostName, org.apache.thrift.async.AsyncMethodCallback<findHostMonitorItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHostMonitorItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHostMonitorItems_args args = new findHostMonitorItems_args();
        args.setHostName(hostName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.MonitorItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHostMonitorItems();
      }
    }

    public void findMonitorItemByGroup(String groupName, org.apache.thrift.async.AsyncMethodCallback<findMonitorItemByGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMonitorItemByGroup_call method_call = new findMonitorItemByGroup_call(groupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findMonitorItemByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupName;
      public findMonitorItemByGroup_call(String groupName, org.apache.thrift.async.AsyncMethodCallback<findMonitorItemByGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupName = groupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMonitorItemByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMonitorItemByGroup_args args = new findMonitorItemByGroup_args();
        args.setGroupName(groupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.MonitorItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMonitorItemByGroup();
      }
    }

    public void findHostItemGroup(String hostName, org.apache.thrift.async.AsyncMethodCallback<findHostItemGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHostItemGroup_call method_call = new findHostItemGroup_call(hostName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findHostItemGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      public findHostItemGroup_call(String hostName, org.apache.thrift.async.AsyncMethodCallback<findHostItemGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHostItemGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHostItemGroup_args args = new findHostItemGroup_args();
        args.setHostName(hostName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHostItemGroup();
      }
    }

    public void getMonitorItem(String itemId, org.apache.thrift.async.AsyncMethodCallback<getMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMonitorItem_call method_call = new getMonitorItem_call(itemId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String itemId;
      public getMonitorItem_call(String itemId, org.apache.thrift.async.AsyncMethodCallback<getMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.itemId = itemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMonitorItem_args args = new getMonitorItem_args();
        args.setItemId(itemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.cloumon.thrift.MonitorItem getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMonitorItem();
      }
    }

    public void addHostToMonitorItem(List<String> itemId, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<addHostToMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHostToMonitorItem_call method_call = new addHostToMonitorItem_call(itemId, hostNames, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addHostToMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> itemId;
      private List<String> hostNames;
      public addHostToMonitorItem_call(List<String> itemId, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<addHostToMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.itemId = itemId;
        this.hostNames = hostNames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHostToMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHostToMonitorItem_args args = new addHostToMonitorItem_args();
        args.setItemId(itemId);
        args.setHostNames(hostNames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addHostToMonitorItem();
      }
    }

    public void modifyMonitorItemToHosts(String monitorItemId, List<String> hostsIs, org.apache.thrift.async.AsyncMethodCallback<modifyMonitorItemToHosts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyMonitorItemToHosts_call method_call = new modifyMonitorItemToHosts_call(monitorItemId, hostsIs, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyMonitorItemToHosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String monitorItemId;
      private List<String> hostsIs;
      public modifyMonitorItemToHosts_call(String monitorItemId, List<String> hostsIs, org.apache.thrift.async.AsyncMethodCallback<modifyMonitorItemToHosts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItemId = monitorItemId;
        this.hostsIs = hostsIs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyMonitorItemToHosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyMonitorItemToHosts_args args = new modifyMonitorItemToHosts_args();
        args.setMonitorItemId(monitorItemId);
        args.setHostsIs(hostsIs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_modifyMonitorItemToHosts();
      }
    }

    public void modifyHostMonitorItem(String monitorItemId, String hostName, String alarm, org.apache.thrift.async.AsyncMethodCallback<modifyHostMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyHostMonitorItem_call method_call = new modifyHostMonitorItem_call(monitorItemId, hostName, alarm, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class modifyHostMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String monitorItemId;
      private String hostName;
      private String alarm;
      public modifyHostMonitorItem_call(String monitorItemId, String hostName, String alarm, org.apache.thrift.async.AsyncMethodCallback<modifyHostMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItemId = monitorItemId;
        this.hostName = hostName;
        this.alarm = alarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyHostMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyHostMonitorItem_args args = new modifyHostMonitorItem_args();
        args.setMonitorItemId(monitorItemId);
        args.setHostName(hostName);
        args.setAlarm(alarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_modifyHostMonitorItem();
      }
    }

    public void getHostSummaryMetrics(org.apache.thrift.async.AsyncMethodCallback<getHostSummaryMetrics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostSummaryMetrics_call method_call = new getHostSummaryMetrics_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHostSummaryMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getHostSummaryMetrics_call(org.apache.thrift.async.AsyncMethodCallback<getHostSummaryMetrics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostSummaryMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostSummaryMetrics_args args = new getHostSummaryMetrics_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostSummaryMetrics> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostSummaryMetrics();
      }
    }

    public void getHostCurrentMetrics(String hostName, String groupName, org.apache.thrift.async.AsyncMethodCallback<getHostCurrentMetrics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostCurrentMetrics_call method_call = new getHostCurrentMetrics_call(hostName, groupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHostCurrentMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      private String groupName;
      public getHostCurrentMetrics_call(String hostName, String groupName, org.apache.thrift.async.AsyncMethodCallback<getHostCurrentMetrics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
        this.groupName = groupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostCurrentMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostCurrentMetrics_args args = new getHostCurrentMetrics_args();
        args.setHostName(hostName);
        args.setGroupName(groupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.MetricViewRecord> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostCurrentMetrics();
      }
    }

    public void getHostHistoryMetrics(String hostName, String groupName, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getHostHistoryMetrics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostHistoryMetrics_call method_call = new getHostHistoryMetrics_call(hostName, groupName, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHostHistoryMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      private String groupName;
      private String startTime;
      private String endTime;
      public getHostHistoryMetrics_call(String hostName, String groupName, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getHostHistoryMetrics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
        this.groupName = groupName;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostHistoryMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostHistoryMetrics_args args = new getHostHistoryMetrics_args();
        args.setHostName(hostName);
        args.setGroupName(groupName);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostHistoryMetrics> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostHistoryMetrics();
      }
    }

    public void getHostHistoryItemMetrics(String hostName, String groupName, List<String> itemNames, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getHostHistoryItemMetrics_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostHistoryItemMetrics_call method_call = new getHostHistoryItemMetrics_call(hostName, groupName, itemNames, startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHostHistoryItemMetrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      private String groupName;
      private List<String> itemNames;
      private String startTime;
      private String endTime;
      public getHostHistoryItemMetrics_call(String hostName, String groupName, List<String> itemNames, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getHostHistoryItemMetrics_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
        this.groupName = groupName;
        this.itemNames = itemNames;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostHistoryItemMetrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostHistoryItemMetrics_args args = new getHostHistoryItemMetrics_args();
        args.setHostName(hostName);
        args.setGroupName(groupName);
        args.setItemNames(itemNames);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostHistoryMetrics> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostHistoryItemMetrics();
      }
    }

    public void checkMetricHistoryTime(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<checkMetricHistoryTime_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkMetricHistoryTime_call method_call = new checkMetricHistoryTime_call(startTime, endTime, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class checkMetricHistoryTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startTime;
      private String endTime;
      public checkMetricHistoryTime_call(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<checkMetricHistoryTime_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkMetricHistoryTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkMetricHistoryTime_args args = new checkMetricHistoryTime_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkMetricHistoryTime();
      }
    }

    public void getHostInfo(String hostName, org.apache.thrift.async.AsyncMethodCallback<getHostInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHostInfo_call method_call = new getHostInfo_call(hostName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHostInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      public getHostInfo_call(String hostName, org.apache.thrift.async.AsyncMethodCallback<getHostInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHostInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHostInfo_args args = new getHostInfo_args();
        args.setHostName(hostName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.cloumon.thrift.HostInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHostInfo();
      }
    }

    public void removeHosts(List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<removeHosts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeHosts_call method_call = new removeHosts_call(hostNames, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class removeHosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> hostNames;
      public removeHosts_call(List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<removeHosts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostNames = hostNames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeHosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeHosts_args args = new removeHosts_args();
        args.setHostNames(hostNames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeHosts();
      }
    }

    public void findAllHosts(org.apache.thrift.async.AsyncMethodCallback<findAllHosts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllHosts_call method_call = new findAllHosts_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findAllHosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllHosts_call(org.apache.thrift.async.AsyncMethodCallback<findAllHosts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllHosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllHosts_args args = new findAllHosts_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllHosts();
      }
    }

    public void findHostByServiceGroup(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<findHostByServiceGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHostByServiceGroup_call method_call = new findHostByServiceGroup_call(serviceGroupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findHostByServiceGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceGroupName;
      public findHostByServiceGroup_call(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<findHostByServiceGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceGroupName = serviceGroupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHostByServiceGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHostByServiceGroup_args args = new findHostByServiceGroup_args();
        args.setServiceGroupName(serviceGroupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHostByServiceGroup();
      }
    }

    public void findHostByMonitorItem(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<findHostByMonitorItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findHostByMonitorItem_call method_call = new findHostByMonitorItem_call(monitorItemId, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findHostByMonitorItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String monitorItemId;
      public findHostByMonitorItem_call(String monitorItemId, org.apache.thrift.async.AsyncMethodCallback<findHostByMonitorItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monitorItemId = monitorItemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findHostByMonitorItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findHostByMonitorItem_args args = new findHostByMonitorItem_args();
        args.setMonitorItemId(monitorItemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HostInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findHostByMonitorItem();
      }
    }

    public void registerAgent(String agentIp, org.cloumon.thrift.HostInfo hostInfo, org.apache.thrift.async.AsyncMethodCallback<registerAgent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerAgent_call method_call = new registerAgent_call(agentIp, hostInfo, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class registerAgent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String agentIp;
      private org.cloumon.thrift.HostInfo hostInfo;
      public registerAgent_call(String agentIp, org.cloumon.thrift.HostInfo hostInfo, org.apache.thrift.async.AsyncMethodCallback<registerAgent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentIp = agentIp;
        this.hostInfo = hostInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerAgent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerAgent_args args = new registerAgent_args();
        args.setAgentIp(agentIp);
        args.setHostInfo(hostInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerAgent();
      }
    }

    public void updateAgentLiveStatus(String agentHostName, boolean liveStatus, org.apache.thrift.async.AsyncMethodCallback<updateAgentLiveStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAgentLiveStatus_call method_call = new updateAgentLiveStatus_call(agentHostName, liveStatus, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class updateAgentLiveStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String agentHostName;
      private boolean liveStatus;
      public updateAgentLiveStatus_call(String agentHostName, boolean liveStatus, org.apache.thrift.async.AsyncMethodCallback<updateAgentLiveStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentHostName = agentHostName;
        this.liveStatus = liveStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAgentLiveStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAgentLiveStatus_args args = new updateAgentLiveStatus_args();
        args.setAgentHostName(agentHostName);
        args.setLiveStatus(liveStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAgentLiveStatus();
      }
    }

    public void updateAgentAlarm(String agentHostName, String alarm, boolean on, org.apache.thrift.async.AsyncMethodCallback<updateAgentAlarm_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAgentAlarm_call method_call = new updateAgentAlarm_call(agentHostName, alarm, on, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class updateAgentAlarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String agentHostName;
      private String alarm;
      private boolean on;
      public updateAgentAlarm_call(String agentHostName, String alarm, boolean on, org.apache.thrift.async.AsyncMethodCallback<updateAgentAlarm_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agentHostName = agentHostName;
        this.alarm = alarm;
        this.on = on;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAgentAlarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAgentAlarm_args args = new updateAgentAlarm_args();
        args.setAgentHostName(agentHostName);
        args.setAlarm(alarm);
        args.setOn(on);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAgentAlarm();
      }
    }

    public void findAllServiceGroup(org.apache.thrift.async.AsyncMethodCallback<findAllServiceGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllServiceGroup_call method_call = new findAllServiceGroup_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class findAllServiceGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllServiceGroup_call(org.apache.thrift.async.AsyncMethodCallback<findAllServiceGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllServiceGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllServiceGroup_args args = new findAllServiceGroup_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.ServiceGroup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllServiceGroup();
      }
    }

    public void addServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup, org.apache.thrift.async.AsyncMethodCallback<addServiceGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addServiceGroup_call method_call = new addServiceGroup_call(serviceGroup, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addServiceGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.cloumon.thrift.ServiceGroup serviceGroup;
      public addServiceGroup_call(org.cloumon.thrift.ServiceGroup serviceGroup, org.apache.thrift.async.AsyncMethodCallback<addServiceGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceGroup = serviceGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addServiceGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addServiceGroup_args args = new addServiceGroup_args();
        args.setServiceGroup(serviceGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addServiceGroup();
      }
    }

    public void removeServiceGroup(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<removeServiceGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeServiceGroup_call method_call = new removeServiceGroup_call(serviceGroupName, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class removeServiceGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceGroupName;
      public removeServiceGroup_call(String serviceGroupName, org.apache.thrift.async.AsyncMethodCallback<removeServiceGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceGroupName = serviceGroupName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeServiceGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeServiceGroup_args args = new removeServiceGroup_args();
        args.setServiceGroupName(serviceGroupName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeServiceGroup();
      }
    }

    public void removeHostsFromServiceGroup(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<removeHostsFromServiceGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeHostsFromServiceGroup_call method_call = new removeHostsFromServiceGroup_call(serviceGroupName, hostNames, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class removeHostsFromServiceGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceGroupName;
      private List<String> hostNames;
      public removeHostsFromServiceGroup_call(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<removeHostsFromServiceGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceGroupName = serviceGroupName;
        this.hostNames = hostNames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeHostsFromServiceGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeHostsFromServiceGroup_args args = new removeHostsFromServiceGroup_args();
        args.setServiceGroupName(serviceGroupName);
        args.setHostNames(hostNames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeHostsFromServiceGroup();
      }
    }

    public void addHostToService(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<addHostToService_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHostToService_call method_call = new addHostToService_call(serviceGroupName, hostNames, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class addHostToService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceGroupName;
      private List<String> hostNames;
      public addHostToService_call(String serviceGroupName, List<String> hostNames, org.apache.thrift.async.AsyncMethodCallback<addHostToService_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceGroupName = serviceGroupName;
        this.hostNames = hostNames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHostToService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHostToService_args args = new addHostToService_args();
        args.setServiceGroupName(serviceGroupName);
        args.setHostNames(hostNames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addHostToService();
      }
    }

    public void getHadoopServerList(String type, org.apache.thrift.async.AsyncMethodCallback<getHadoopServerList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHadoopServerList_call method_call = new getHadoopServerList_call(type, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }

    public static class getHadoopServerList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String type;
      public getHadoopServerList_call(String type, org.apache.thrift.async.AsyncMethodCallback<getHadoopServerList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHadoopServerList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHadoopServerList_args args = new getHadoopServerList_args();
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.cloumon.thrift.HadoopServerStatus> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHadoopServerList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMinitorItem", new addMinitorItem());
      processMap.put("modifyMonitorItem", new modifyMonitorItem());
      processMap.put("removeMonitorItem", new removeMonitorItem());
      processMap.put("findAllMonitorItems", new findAllMonitorItems());
      processMap.put("findHostMonitorItems", new findHostMonitorItems());
      processMap.put("findMonitorItemByGroup", new findMonitorItemByGroup());
      processMap.put("findHostItemGroup", new findHostItemGroup());
      processMap.put("getMonitorItem", new getMonitorItem());
      processMap.put("addHostToMonitorItem", new addHostToMonitorItem());
      processMap.put("modifyMonitorItemToHosts", new modifyMonitorItemToHosts());
      processMap.put("modifyHostMonitorItem", new modifyHostMonitorItem());
      processMap.put("getHostSummaryMetrics", new getHostSummaryMetrics());
      processMap.put("getHostCurrentMetrics", new getHostCurrentMetrics());
      processMap.put("getHostHistoryMetrics", new getHostHistoryMetrics());
      processMap.put("getHostHistoryItemMetrics", new getHostHistoryItemMetrics());
      processMap.put("checkMetricHistoryTime", new checkMetricHistoryTime());
      processMap.put("getHostInfo", new getHostInfo());
      processMap.put("removeHosts", new removeHosts());
      processMap.put("findAllHosts", new findAllHosts());
      processMap.put("findHostByServiceGroup", new findHostByServiceGroup());
      processMap.put("findHostByMonitorItem", new findHostByMonitorItem());
      processMap.put("registerAgent", new registerAgent());
      processMap.put("updateAgentLiveStatus", new updateAgentLiveStatus());
      processMap.put("updateAgentAlarm", new updateAgentAlarm());
      processMap.put("findAllServiceGroup", new findAllServiceGroup());
      processMap.put("addServiceGroup", new addServiceGroup());
      processMap.put("removeServiceGroup", new removeServiceGroup());
      processMap.put("removeHostsFromServiceGroup", new removeHostsFromServiceGroup());
      processMap.put("addHostToService", new addHostToService());
      processMap.put("getHadoopServerList", new getHadoopServerList());
      return processMap;
    }

    private static class addMinitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMinitorItem_args> {
      public addMinitorItem() {
        super("addMinitorItem");
      }

      protected addMinitorItem_args getEmptyArgsInstance() {
        return new addMinitorItem_args();
      }

      protected addMinitorItem_result getResult(I iface, addMinitorItem_args args) throws org.apache.thrift.TException {
        addMinitorItem_result result = new addMinitorItem_result();
        iface.addMinitorItem(args.monitorItems);
        return result;
      }
    }

    private static class modifyMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyMonitorItem_args> {
      public modifyMonitorItem() {
        super("modifyMonitorItem");
      }

      protected modifyMonitorItem_args getEmptyArgsInstance() {
        return new modifyMonitorItem_args();
      }

      protected modifyMonitorItem_result getResult(I iface, modifyMonitorItem_args args) throws org.apache.thrift.TException {
        modifyMonitorItem_result result = new modifyMonitorItem_result();
        iface.modifyMonitorItem(args.monitorItem, args.autoDeployAlarm);
        return result;
      }
    }

    private static class removeMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeMonitorItem_args> {
      public removeMonitorItem() {
        super("removeMonitorItem");
      }

      protected removeMonitorItem_args getEmptyArgsInstance() {
        return new removeMonitorItem_args();
      }

      protected removeMonitorItem_result getResult(I iface, removeMonitorItem_args args) throws org.apache.thrift.TException {
        removeMonitorItem_result result = new removeMonitorItem_result();
        iface.removeMonitorItem(args.monitorItemId);
        return result;
      }
    }

    private static class findAllMonitorItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllMonitorItems_args> {
      public findAllMonitorItems() {
        super("findAllMonitorItems");
      }

      protected findAllMonitorItems_args getEmptyArgsInstance() {
        return new findAllMonitorItems_args();
      }

      protected findAllMonitorItems_result getResult(I iface, findAllMonitorItems_args args) throws org.apache.thrift.TException {
        findAllMonitorItems_result result = new findAllMonitorItems_result();
        result.success = iface.findAllMonitorItems();
        return result;
      }
    }

    private static class findHostMonitorItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHostMonitorItems_args> {
      public findHostMonitorItems() {
        super("findHostMonitorItems");
      }

      protected findHostMonitorItems_args getEmptyArgsInstance() {
        return new findHostMonitorItems_args();
      }

      protected findHostMonitorItems_result getResult(I iface, findHostMonitorItems_args args) throws org.apache.thrift.TException {
        findHostMonitorItems_result result = new findHostMonitorItems_result();
        result.success = iface.findHostMonitorItems(args.hostName);
        return result;
      }
    }

    private static class findMonitorItemByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMonitorItemByGroup_args> {
      public findMonitorItemByGroup() {
        super("findMonitorItemByGroup");
      }

      protected findMonitorItemByGroup_args getEmptyArgsInstance() {
        return new findMonitorItemByGroup_args();
      }

      protected findMonitorItemByGroup_result getResult(I iface, findMonitorItemByGroup_args args) throws org.apache.thrift.TException {
        findMonitorItemByGroup_result result = new findMonitorItemByGroup_result();
        result.success = iface.findMonitorItemByGroup(args.groupName);
        return result;
      }
    }

    private static class findHostItemGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHostItemGroup_args> {
      public findHostItemGroup() {
        super("findHostItemGroup");
      }

      protected findHostItemGroup_args getEmptyArgsInstance() {
        return new findHostItemGroup_args();
      }

      protected findHostItemGroup_result getResult(I iface, findHostItemGroup_args args) throws org.apache.thrift.TException {
        findHostItemGroup_result result = new findHostItemGroup_result();
        result.success = iface.findHostItemGroup(args.hostName);
        return result;
      }
    }

    private static class getMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMonitorItem_args> {
      public getMonitorItem() {
        super("getMonitorItem");
      }

      protected getMonitorItem_args getEmptyArgsInstance() {
        return new getMonitorItem_args();
      }

      protected getMonitorItem_result getResult(I iface, getMonitorItem_args args) throws org.apache.thrift.TException {
        getMonitorItem_result result = new getMonitorItem_result();
        result.success = iface.getMonitorItem(args.itemId);
        return result;
      }
    }

    private static class addHostToMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHostToMonitorItem_args> {
      public addHostToMonitorItem() {
        super("addHostToMonitorItem");
      }

      protected addHostToMonitorItem_args getEmptyArgsInstance() {
        return new addHostToMonitorItem_args();
      }

      protected addHostToMonitorItem_result getResult(I iface, addHostToMonitorItem_args args) throws org.apache.thrift.TException {
        addHostToMonitorItem_result result = new addHostToMonitorItem_result();
        iface.addHostToMonitorItem(args.itemId, args.hostNames);
        return result;
      }
    }

    private static class modifyMonitorItemToHosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyMonitorItemToHosts_args> {
      public modifyMonitorItemToHosts() {
        super("modifyMonitorItemToHosts");
      }

      protected modifyMonitorItemToHosts_args getEmptyArgsInstance() {
        return new modifyMonitorItemToHosts_args();
      }

      protected modifyMonitorItemToHosts_result getResult(I iface, modifyMonitorItemToHosts_args args) throws org.apache.thrift.TException {
        modifyMonitorItemToHosts_result result = new modifyMonitorItemToHosts_result();
        iface.modifyMonitorItemToHosts(args.monitorItemId, args.hostsIs);
        return result;
      }
    }

    private static class modifyHostMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyHostMonitorItem_args> {
      public modifyHostMonitorItem() {
        super("modifyHostMonitorItem");
      }

      protected modifyHostMonitorItem_args getEmptyArgsInstance() {
        return new modifyHostMonitorItem_args();
      }

      protected modifyHostMonitorItem_result getResult(I iface, modifyHostMonitorItem_args args) throws org.apache.thrift.TException {
        modifyHostMonitorItem_result result = new modifyHostMonitorItem_result();
        iface.modifyHostMonitorItem(args.monitorItemId, args.hostName, args.alarm);
        return result;
      }
    }

    private static class getHostSummaryMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostSummaryMetrics_args> {
      public getHostSummaryMetrics() {
        super("getHostSummaryMetrics");
      }

      protected getHostSummaryMetrics_args getEmptyArgsInstance() {
        return new getHostSummaryMetrics_args();
      }

      protected getHostSummaryMetrics_result getResult(I iface, getHostSummaryMetrics_args args) throws org.apache.thrift.TException {
        getHostSummaryMetrics_result result = new getHostSummaryMetrics_result();
        result.success = iface.getHostSummaryMetrics();
        return result;
      }
    }

    private static class getHostCurrentMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostCurrentMetrics_args> {
      public getHostCurrentMetrics() {
        super("getHostCurrentMetrics");
      }

      protected getHostCurrentMetrics_args getEmptyArgsInstance() {
        return new getHostCurrentMetrics_args();
      }

      protected getHostCurrentMetrics_result getResult(I iface, getHostCurrentMetrics_args args) throws org.apache.thrift.TException {
        getHostCurrentMetrics_result result = new getHostCurrentMetrics_result();
        result.success = iface.getHostCurrentMetrics(args.hostName, args.groupName);
        return result;
      }
    }

    private static class getHostHistoryMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostHistoryMetrics_args> {
      public getHostHistoryMetrics() {
        super("getHostHistoryMetrics");
      }

      protected getHostHistoryMetrics_args getEmptyArgsInstance() {
        return new getHostHistoryMetrics_args();
      }

      protected getHostHistoryMetrics_result getResult(I iface, getHostHistoryMetrics_args args) throws org.apache.thrift.TException {
        getHostHistoryMetrics_result result = new getHostHistoryMetrics_result();
        result.success = iface.getHostHistoryMetrics(args.hostName, args.groupName, args.startTime, args.endTime);
        return result;
      }
    }

    private static class getHostHistoryItemMetrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostHistoryItemMetrics_args> {
      public getHostHistoryItemMetrics() {
        super("getHostHistoryItemMetrics");
      }

      protected getHostHistoryItemMetrics_args getEmptyArgsInstance() {
        return new getHostHistoryItemMetrics_args();
      }

      protected getHostHistoryItemMetrics_result getResult(I iface, getHostHistoryItemMetrics_args args) throws org.apache.thrift.TException {
        getHostHistoryItemMetrics_result result = new getHostHistoryItemMetrics_result();
        result.success = iface.getHostHistoryItemMetrics(args.hostName, args.groupName, args.itemNames, args.startTime, args.endTime);
        return result;
      }
    }

    private static class checkMetricHistoryTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkMetricHistoryTime_args> {
      public checkMetricHistoryTime() {
        super("checkMetricHistoryTime");
      }

      protected checkMetricHistoryTime_args getEmptyArgsInstance() {
        return new checkMetricHistoryTime_args();
      }

      protected checkMetricHistoryTime_result getResult(I iface, checkMetricHistoryTime_args args) throws org.apache.thrift.TException {
        checkMetricHistoryTime_result result = new checkMetricHistoryTime_result();
        result.success = iface.checkMetricHistoryTime(args.startTime, args.endTime);
        return result;
      }
    }

    private static class getHostInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHostInfo_args> {
      public getHostInfo() {
        super("getHostInfo");
      }

      protected getHostInfo_args getEmptyArgsInstance() {
        return new getHostInfo_args();
      }

      protected getHostInfo_result getResult(I iface, getHostInfo_args args) throws org.apache.thrift.TException {
        getHostInfo_result result = new getHostInfo_result();
        result.success = iface.getHostInfo(args.hostName);
        return result;
      }
    }

    private static class removeHosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeHosts_args> {
      public removeHosts() {
        super("removeHosts");
      }

      protected removeHosts_args getEmptyArgsInstance() {
        return new removeHosts_args();
      }

      protected removeHosts_result getResult(I iface, removeHosts_args args) throws org.apache.thrift.TException {
        removeHosts_result result = new removeHosts_result();
        iface.removeHosts(args.hostNames);
        return result;
      }
    }

    private static class findAllHosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllHosts_args> {
      public findAllHosts() {
        super("findAllHosts");
      }

      protected findAllHosts_args getEmptyArgsInstance() {
        return new findAllHosts_args();
      }

      protected findAllHosts_result getResult(I iface, findAllHosts_args args) throws org.apache.thrift.TException {
        findAllHosts_result result = new findAllHosts_result();
        result.success = iface.findAllHosts();
        return result;
      }
    }

    private static class findHostByServiceGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHostByServiceGroup_args> {
      public findHostByServiceGroup() {
        super("findHostByServiceGroup");
      }

      protected findHostByServiceGroup_args getEmptyArgsInstance() {
        return new findHostByServiceGroup_args();
      }

      protected findHostByServiceGroup_result getResult(I iface, findHostByServiceGroup_args args) throws org.apache.thrift.TException {
        findHostByServiceGroup_result result = new findHostByServiceGroup_result();
        result.success = iface.findHostByServiceGroup(args.serviceGroupName);
        return result;
      }
    }

    private static class findHostByMonitorItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findHostByMonitorItem_args> {
      public findHostByMonitorItem() {
        super("findHostByMonitorItem");
      }

      protected findHostByMonitorItem_args getEmptyArgsInstance() {
        return new findHostByMonitorItem_args();
      }

      protected findHostByMonitorItem_result getResult(I iface, findHostByMonitorItem_args args) throws org.apache.thrift.TException {
        findHostByMonitorItem_result result = new findHostByMonitorItem_result();
        result.success = iface.findHostByMonitorItem(args.monitorItemId);
        return result;
      }
    }

    private static class registerAgent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerAgent_args> {
      public registerAgent() {
        super("registerAgent");
      }

      protected registerAgent_args getEmptyArgsInstance() {
        return new registerAgent_args();
      }

      protected registerAgent_result getResult(I iface, registerAgent_args args) throws org.apache.thrift.TException {
        registerAgent_result result = new registerAgent_result();
        iface.registerAgent(args.agentIp, args.hostInfo);
        return result;
      }
    }

    private static class updateAgentLiveStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAgentLiveStatus_args> {
      public updateAgentLiveStatus() {
        super("updateAgentLiveStatus");
      }

      protected updateAgentLiveStatus_args getEmptyArgsInstance() {
        return new updateAgentLiveStatus_args();
      }

      protected updateAgentLiveStatus_result getResult(I iface, updateAgentLiveStatus_args args) throws org.apache.thrift.TException {
        updateAgentLiveStatus_result result = new updateAgentLiveStatus_result();
        iface.updateAgentLiveStatus(args.agentHostName, args.liveStatus);
        return result;
      }
    }

    private static class updateAgentAlarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAgentAlarm_args> {
      public updateAgentAlarm() {
        super("updateAgentAlarm");
      }

      protected updateAgentAlarm_args getEmptyArgsInstance() {
        return new updateAgentAlarm_args();
      }

      protected updateAgentAlarm_result getResult(I iface, updateAgentAlarm_args args) throws org.apache.thrift.TException {
        updateAgentAlarm_result result = new updateAgentAlarm_result();
        iface.updateAgentAlarm(args.agentHostName, args.alarm, args.on);
        return result;
      }
    }

    private static class findAllServiceGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllServiceGroup_args> {
      public findAllServiceGroup() {
        super("findAllServiceGroup");
      }

      protected findAllServiceGroup_args getEmptyArgsInstance() {
        return new findAllServiceGroup_args();
      }

      protected findAllServiceGroup_result getResult(I iface, findAllServiceGroup_args args) throws org.apache.thrift.TException {
        findAllServiceGroup_result result = new findAllServiceGroup_result();
        result.success = iface.findAllServiceGroup();
        return result;
      }
    }

    private static class addServiceGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addServiceGroup_args> {
      public addServiceGroup() {
        super("addServiceGroup");
      }

      protected addServiceGroup_args getEmptyArgsInstance() {
        return new addServiceGroup_args();
      }

      protected addServiceGroup_result getResult(I iface, addServiceGroup_args args) throws org.apache.thrift.TException {
        addServiceGroup_result result = new addServiceGroup_result();
        iface.addServiceGroup(args.serviceGroup);
        return result;
      }
    }

    private static class removeServiceGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeServiceGroup_args> {
      public removeServiceGroup() {
        super("removeServiceGroup");
      }

      protected removeServiceGroup_args getEmptyArgsInstance() {
        return new removeServiceGroup_args();
      }

      protected removeServiceGroup_result getResult(I iface, removeServiceGroup_args args) throws org.apache.thrift.TException {
        removeServiceGroup_result result = new removeServiceGroup_result();
        iface.removeServiceGroup(args.serviceGroupName);
        return result;
      }
    }

    private static class removeHostsFromServiceGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeHostsFromServiceGroup_args> {
      public removeHostsFromServiceGroup() {
        super("removeHostsFromServiceGroup");
      }

      protected removeHostsFromServiceGroup_args getEmptyArgsInstance() {
        return new removeHostsFromServiceGroup_args();
      }

      protected removeHostsFromServiceGroup_result getResult(I iface, removeHostsFromServiceGroup_args args) throws org.apache.thrift.TException {
        removeHostsFromServiceGroup_result result = new removeHostsFromServiceGroup_result();
        iface.removeHostsFromServiceGroup(args.serviceGroupName, args.hostNames);
        return result;
      }
    }

    private static class addHostToService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHostToService_args> {
      public addHostToService() {
        super("addHostToService");
      }

      protected addHostToService_args getEmptyArgsInstance() {
        return new addHostToService_args();
      }

      protected addHostToService_result getResult(I iface, addHostToService_args args) throws org.apache.thrift.TException {
        addHostToService_result result = new addHostToService_result();
        iface.addHostToService(args.serviceGroupName, args.hostNames);
        return result;
      }
    }

    private static class getHadoopServerList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHadoopServerList_args> {
      public getHadoopServerList() {
        super("getHadoopServerList");
      }

      protected getHadoopServerList_args getEmptyArgsInstance() {
        return new getHadoopServerList_args();
      }

      protected getHadoopServerList_result getResult(I iface, getHadoopServerList_args args) throws org.apache.thrift.TException {
        getHadoopServerList_result result = new getHadoopServerList_result();
        result.success = iface.getHadoopServerList(args.type);
        return result;
      }
    }

  }

  public static class addMinitorItem_args implements org.apache.thrift.TBase<addMinitorItem_args, addMinitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMinitorItem_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItems", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<org.cloumon.thrift.MonitorItem> monitorItems;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEMS((short)1, "monitorItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEMS
            return MONITOR_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("monitorItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMinitorItem_args.class, metaDataMap);
    }

    public addMinitorItem_args() {
    }

    public addMinitorItem_args(
      List<org.cloumon.thrift.MonitorItem> monitorItems)
    {
      this();
      this.monitorItems = monitorItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMinitorItem_args(addMinitorItem_args other) {
      if (other.isSetMonitorItems()) {
        List<org.cloumon.thrift.MonitorItem> __this__monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>();
        for (org.cloumon.thrift.MonitorItem other_element : other.monitorItems) {
          __this__monitorItems.add(new org.cloumon.thrift.MonitorItem(other_element));
        }
        this.monitorItems = __this__monitorItems;
      }
    }

    public addMinitorItem_args deepCopy() {
      return new addMinitorItem_args(this);
    }

    @Override
    public void clear() {
      this.monitorItems = null;
    }

    public int getMonitorItemsSize() {
      return (this.monitorItems == null) ? 0 : this.monitorItems.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MonitorItem> getMonitorItemsIterator() {
      return (this.monitorItems == null) ? null : this.monitorItems.iterator();
    }

    public void addToMonitorItems(org.cloumon.thrift.MonitorItem elem) {
      if (this.monitorItems == null) {
        this.monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>();
      }
      this.monitorItems.add(elem);
    }

    public List<org.cloumon.thrift.MonitorItem> getMonitorItems() {
      return this.monitorItems;
    }

    public addMinitorItem_args setMonitorItems(List<org.cloumon.thrift.MonitorItem> monitorItems) {
      this.monitorItems = monitorItems;
      return this;
    }

    public void unsetMonitorItems() {
      this.monitorItems = null;
    }

    /** Returns true if field monitorItems is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItems() {
      return this.monitorItems != null;
    }

    public void setMonitorItemsIsSet(boolean value) {
      if (!value) {
        this.monitorItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEMS:
        if (value == null) {
          unsetMonitorItems();
        } else {
          setMonitorItems((List<org.cloumon.thrift.MonitorItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEMS:
        return getMonitorItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEMS:
        return isSetMonitorItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMinitorItem_args)
        return this.equals((addMinitorItem_args)that);
      return false;
    }

    public boolean equals(addMinitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItems = true && this.isSetMonitorItems();
      boolean that_present_monitorItems = true && that.isSetMonitorItems();
      if (this_present_monitorItems || that_present_monitorItems) {
        if (!(this_present_monitorItems && that_present_monitorItems))
          return false;
        if (!this.monitorItems.equals(that.monitorItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMinitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMinitorItem_args typedOther = (addMinitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItems()).compareTo(typedOther.isSetMonitorItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItems, typedOther.monitorItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEMS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                this.monitorItems = new ArrayList<org.cloumon.thrift.MonitorItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  org.cloumon.thrift.MonitorItem _elem2;
                  _elem2 = new org.cloumon.thrift.MonitorItem();
                  _elem2.read(iprot);
                  this.monitorItems.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItems != null) {
        oprot.writeFieldBegin(MONITOR_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.monitorItems.size()));
          for (org.cloumon.thrift.MonitorItem _iter3 : this.monitorItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMinitorItem_args(");
      boolean first = true;

      sb.append("monitorItems:");
      if (this.monitorItems == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addMinitorItem_result implements org.apache.thrift.TBase<addMinitorItem_result, addMinitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMinitorItem_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMinitorItem_result.class, metaDataMap);
    }

    public addMinitorItem_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMinitorItem_result(addMinitorItem_result other) {
    }

    public addMinitorItem_result deepCopy() {
      return new addMinitorItem_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMinitorItem_result)
        return this.equals((addMinitorItem_result)that);
      return false;
    }

    public boolean equals(addMinitorItem_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addMinitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addMinitorItem_result typedOther = (addMinitorItem_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMinitorItem_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyMonitorItem_args implements org.apache.thrift.TBase<modifyMonitorItem_args, modifyMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyMonitorItem_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTO_DEPLOY_ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("autoDeployAlarm", org.apache.thrift.protocol.TType.BOOL, (short)2);

    public org.cloumon.thrift.MonitorItem monitorItem;
    public boolean autoDeployAlarm;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEM((short)1, "monitorItem"),
      AUTO_DEPLOY_ALARM((short)2, "autoDeployAlarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEM
            return MONITOR_ITEM;
          case 2: // AUTO_DEPLOY_ALARM
            return AUTO_DEPLOY_ALARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AUTODEPLOYALARM_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEM, new org.apache.thrift.meta_data.FieldMetaData("monitorItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class)));
      tmpMap.put(_Fields.AUTO_DEPLOY_ALARM, new org.apache.thrift.meta_data.FieldMetaData("autoDeployAlarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyMonitorItem_args.class, metaDataMap);
    }

    public modifyMonitorItem_args() {
    }

    public modifyMonitorItem_args(
      org.cloumon.thrift.MonitorItem monitorItem,
      boolean autoDeployAlarm)
    {
      this();
      this.monitorItem = monitorItem;
      this.autoDeployAlarm = autoDeployAlarm;
      setAutoDeployAlarmIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyMonitorItem_args(modifyMonitorItem_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetMonitorItem()) {
        this.monitorItem = new org.cloumon.thrift.MonitorItem(other.monitorItem);
      }
      this.autoDeployAlarm = other.autoDeployAlarm;
    }

    public modifyMonitorItem_args deepCopy() {
      return new modifyMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.monitorItem = null;
      setAutoDeployAlarmIsSet(false);
      this.autoDeployAlarm = false;
    }

    public org.cloumon.thrift.MonitorItem getMonitorItem() {
      return this.monitorItem;
    }

    public modifyMonitorItem_args setMonitorItem(org.cloumon.thrift.MonitorItem monitorItem) {
      this.monitorItem = monitorItem;
      return this;
    }

    public void unsetMonitorItem() {
      this.monitorItem = null;
    }

    /** Returns true if field monitorItem is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItem() {
      return this.monitorItem != null;
    }

    public void setMonitorItemIsSet(boolean value) {
      if (!value) {
        this.monitorItem = null;
      }
    }

    public boolean isAutoDeployAlarm() {
      return this.autoDeployAlarm;
    }

    public modifyMonitorItem_args setAutoDeployAlarm(boolean autoDeployAlarm) {
      this.autoDeployAlarm = autoDeployAlarm;
      setAutoDeployAlarmIsSet(true);
      return this;
    }

    public void unsetAutoDeployAlarm() {
      __isset_bit_vector.clear(__AUTODEPLOYALARM_ISSET_ID);
    }

    /** Returns true if field autoDeployAlarm is set (has been assigned a value) and false otherwise */
    public boolean isSetAutoDeployAlarm() {
      return __isset_bit_vector.get(__AUTODEPLOYALARM_ISSET_ID);
    }

    public void setAutoDeployAlarmIsSet(boolean value) {
      __isset_bit_vector.set(__AUTODEPLOYALARM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEM:
        if (value == null) {
          unsetMonitorItem();
        } else {
          setMonitorItem((org.cloumon.thrift.MonitorItem)value);
        }
        break;

      case AUTO_DEPLOY_ALARM:
        if (value == null) {
          unsetAutoDeployAlarm();
        } else {
          setAutoDeployAlarm((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEM:
        return getMonitorItem();

      case AUTO_DEPLOY_ALARM:
        return Boolean.valueOf(isAutoDeployAlarm());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEM:
        return isSetMonitorItem();
      case AUTO_DEPLOY_ALARM:
        return isSetAutoDeployAlarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyMonitorItem_args)
        return this.equals((modifyMonitorItem_args)that);
      return false;
    }

    public boolean equals(modifyMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItem = true && this.isSetMonitorItem();
      boolean that_present_monitorItem = true && that.isSetMonitorItem();
      if (this_present_monitorItem || that_present_monitorItem) {
        if (!(this_present_monitorItem && that_present_monitorItem))
          return false;
        if (!this.monitorItem.equals(that.monitorItem))
          return false;
      }

      boolean this_present_autoDeployAlarm = true;
      boolean that_present_autoDeployAlarm = true;
      if (this_present_autoDeployAlarm || that_present_autoDeployAlarm) {
        if (!(this_present_autoDeployAlarm && that_present_autoDeployAlarm))
          return false;
        if (this.autoDeployAlarm != that.autoDeployAlarm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyMonitorItem_args typedOther = (modifyMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItem()).compareTo(typedOther.isSetMonitorItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItem, typedOther.monitorItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAutoDeployAlarm()).compareTo(typedOther.isSetAutoDeployAlarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAutoDeployAlarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoDeployAlarm, typedOther.autoDeployAlarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEM
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.monitorItem = new org.cloumon.thrift.MonitorItem();
              this.monitorItem.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AUTO_DEPLOY_ALARM
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.autoDeployAlarm = iprot.readBool();
              setAutoDeployAlarmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItem != null) {
        oprot.writeFieldBegin(MONITOR_ITEM_FIELD_DESC);
        this.monitorItem.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_DEPLOY_ALARM_FIELD_DESC);
      oprot.writeBool(this.autoDeployAlarm);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyMonitorItem_args(");
      boolean first = true;

      sb.append("monitorItem:");
      if (this.monitorItem == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("autoDeployAlarm:");
      sb.append(this.autoDeployAlarm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyMonitorItem_result implements org.apache.thrift.TBase<modifyMonitorItem_result, modifyMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyMonitorItem_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyMonitorItem_result.class, metaDataMap);
    }

    public modifyMonitorItem_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyMonitorItem_result(modifyMonitorItem_result other) {
    }

    public modifyMonitorItem_result deepCopy() {
      return new modifyMonitorItem_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyMonitorItem_result)
        return this.equals((modifyMonitorItem_result)that);
      return false;
    }

    public boolean equals(modifyMonitorItem_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyMonitorItem_result typedOther = (modifyMonitorItem_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyMonitorItem_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeMonitorItem_args implements org.apache.thrift.TBase<removeMonitorItem_args, removeMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeMonitorItem_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItemId", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String monitorItemId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEM_ID((short)1, "monitorItemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEM_ID
            return MONITOR_ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("monitorItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeMonitorItem_args.class, metaDataMap);
    }

    public removeMonitorItem_args() {
    }

    public removeMonitorItem_args(
      String monitorItemId)
    {
      this();
      this.monitorItemId = monitorItemId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMonitorItem_args(removeMonitorItem_args other) {
      if (other.isSetMonitorItemId()) {
        this.monitorItemId = other.monitorItemId;
      }
    }

    public removeMonitorItem_args deepCopy() {
      return new removeMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.monitorItemId = null;
    }

    public String getMonitorItemId() {
      return this.monitorItemId;
    }

    public removeMonitorItem_args setMonitorItemId(String monitorItemId) {
      this.monitorItemId = monitorItemId;
      return this;
    }

    public void unsetMonitorItemId() {
      this.monitorItemId = null;
    }

    /** Returns true if field monitorItemId is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItemId() {
      return this.monitorItemId != null;
    }

    public void setMonitorItemIdIsSet(boolean value) {
      if (!value) {
        this.monitorItemId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEM_ID:
        if (value == null) {
          unsetMonitorItemId();
        } else {
          setMonitorItemId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEM_ID:
        return getMonitorItemId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEM_ID:
        return isSetMonitorItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMonitorItem_args)
        return this.equals((removeMonitorItem_args)that);
      return false;
    }

    public boolean equals(removeMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItemId = true && this.isSetMonitorItemId();
      boolean that_present_monitorItemId = true && that.isSetMonitorItemId();
      if (this_present_monitorItemId || that_present_monitorItemId) {
        if (!(this_present_monitorItemId && that_present_monitorItemId))
          return false;
        if (!this.monitorItemId.equals(that.monitorItemId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeMonitorItem_args typedOther = (removeMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItemId()).compareTo(typedOther.isSetMonitorItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItemId, typedOther.monitorItemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.monitorItemId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItemId != null) {
        oprot.writeFieldBegin(MONITOR_ITEM_ID_FIELD_DESC);
        oprot.writeString(this.monitorItemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeMonitorItem_args(");
      boolean first = true;

      sb.append("monitorItemId:");
      if (this.monitorItemId == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItemId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeMonitorItem_result implements org.apache.thrift.TBase<removeMonitorItem_result, removeMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeMonitorItem_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeMonitorItem_result.class, metaDataMap);
    }

    public removeMonitorItem_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMonitorItem_result(removeMonitorItem_result other) {
    }

    public removeMonitorItem_result deepCopy() {
      return new removeMonitorItem_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMonitorItem_result)
        return this.equals((removeMonitorItem_result)that);
      return false;
    }

    public boolean equals(removeMonitorItem_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeMonitorItem_result typedOther = (removeMonitorItem_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeMonitorItem_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllMonitorItems_args implements org.apache.thrift.TBase<findAllMonitorItems_args, findAllMonitorItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllMonitorItems_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllMonitorItems_args.class, metaDataMap);
    }

    public findAllMonitorItems_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllMonitorItems_args(findAllMonitorItems_args other) {
    }

    public findAllMonitorItems_args deepCopy() {
      return new findAllMonitorItems_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllMonitorItems_args)
        return this.equals((findAllMonitorItems_args)that);
      return false;
    }

    public boolean equals(findAllMonitorItems_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllMonitorItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllMonitorItems_args typedOther = (findAllMonitorItems_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllMonitorItems_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllMonitorItems_result implements org.apache.thrift.TBase<findAllMonitorItems_result, findAllMonitorItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllMonitorItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.MonitorItem> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllMonitorItems_result.class, metaDataMap);
    }

    public findAllMonitorItems_result() {
    }

    public findAllMonitorItems_result(
      List<org.cloumon.thrift.MonitorItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllMonitorItems_result(findAllMonitorItems_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.MonitorItem> __this__success = new ArrayList<org.cloumon.thrift.MonitorItem>();
        for (org.cloumon.thrift.MonitorItem other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.MonitorItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllMonitorItems_result deepCopy() {
      return new findAllMonitorItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MonitorItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.MonitorItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.MonitorItem>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.MonitorItem> getSuccess() {
      return this.success;
    }

    public findAllMonitorItems_result setSuccess(List<org.cloumon.thrift.MonitorItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.MonitorItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllMonitorItems_result)
        return this.equals((findAllMonitorItems_result)that);
      return false;
    }

    public boolean equals(findAllMonitorItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllMonitorItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllMonitorItems_result typedOther = (findAllMonitorItems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.MonitorItem>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  org.cloumon.thrift.MonitorItem _elem6;
                  _elem6 = new org.cloumon.thrift.MonitorItem();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.MonitorItem _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllMonitorItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostMonitorItems_args implements org.apache.thrift.TBase<findHostMonitorItems_args, findHostMonitorItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostMonitorItems_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String hostName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostMonitorItems_args.class, metaDataMap);
    }

    public findHostMonitorItems_args() {
    }

    public findHostMonitorItems_args(
      String hostName)
    {
      this();
      this.hostName = hostName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostMonitorItems_args(findHostMonitorItems_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
    }

    public findHostMonitorItems_args deepCopy() {
      return new findHostMonitorItems_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public findHostMonitorItems_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostMonitorItems_args)
        return this.equals((findHostMonitorItems_args)that);
      return false;
    }

    public boolean equals(findHostMonitorItems_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostMonitorItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostMonitorItems_args typedOther = (findHostMonitorItems_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostMonitorItems_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostMonitorItems_result implements org.apache.thrift.TBase<findHostMonitorItems_result, findHostMonitorItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostMonitorItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.MonitorItem> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostMonitorItems_result.class, metaDataMap);
    }

    public findHostMonitorItems_result() {
    }

    public findHostMonitorItems_result(
      List<org.cloumon.thrift.MonitorItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostMonitorItems_result(findHostMonitorItems_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.MonitorItem> __this__success = new ArrayList<org.cloumon.thrift.MonitorItem>();
        for (org.cloumon.thrift.MonitorItem other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.MonitorItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public findHostMonitorItems_result deepCopy() {
      return new findHostMonitorItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MonitorItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.MonitorItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.MonitorItem>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.MonitorItem> getSuccess() {
      return this.success;
    }

    public findHostMonitorItems_result setSuccess(List<org.cloumon.thrift.MonitorItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.MonitorItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostMonitorItems_result)
        return this.equals((findHostMonitorItems_result)that);
      return false;
    }

    public boolean equals(findHostMonitorItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostMonitorItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostMonitorItems_result typedOther = (findHostMonitorItems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.MonitorItem>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  org.cloumon.thrift.MonitorItem _elem10;
                  _elem10 = new org.cloumon.thrift.MonitorItem();
                  _elem10.read(iprot);
                  this.success.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.MonitorItem _iter11 : this.success)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostMonitorItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findMonitorItemByGroup_args implements org.apache.thrift.TBase<findMonitorItemByGroup_args, findMonitorItemByGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorItemByGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String groupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_NAME((short)1, "groupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorItemByGroup_args.class, metaDataMap);
    }

    public findMonitorItemByGroup_args() {
    }

    public findMonitorItemByGroup_args(
      String groupName)
    {
      this();
      this.groupName = groupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorItemByGroup_args(findMonitorItemByGroup_args other) {
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
    }

    public findMonitorItemByGroup_args deepCopy() {
      return new findMonitorItemByGroup_args(this);
    }

    @Override
    public void clear() {
      this.groupName = null;
    }

    public String getGroupName() {
      return this.groupName;
    }

    public findMonitorItemByGroup_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_NAME:
        return getGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_NAME:
        return isSetGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorItemByGroup_args)
        return this.equals((findMonitorItemByGroup_args)that);
      return false;
    }

    public boolean equals(findMonitorItemByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorItemByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorItemByGroup_args typedOther = (findMonitorItemByGroup_args)other;

      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorItemByGroup_args(");
      boolean first = true;

      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findMonitorItemByGroup_result implements org.apache.thrift.TBase<findMonitorItemByGroup_result, findMonitorItemByGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMonitorItemByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.MonitorItem> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMonitorItemByGroup_result.class, metaDataMap);
    }

    public findMonitorItemByGroup_result() {
    }

    public findMonitorItemByGroup_result(
      List<org.cloumon.thrift.MonitorItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMonitorItemByGroup_result(findMonitorItemByGroup_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.MonitorItem> __this__success = new ArrayList<org.cloumon.thrift.MonitorItem>();
        for (org.cloumon.thrift.MonitorItem other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.MonitorItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public findMonitorItemByGroup_result deepCopy() {
      return new findMonitorItemByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MonitorItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.MonitorItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.MonitorItem>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.MonitorItem> getSuccess() {
      return this.success;
    }

    public findMonitorItemByGroup_result setSuccess(List<org.cloumon.thrift.MonitorItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.MonitorItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMonitorItemByGroup_result)
        return this.equals((findMonitorItemByGroup_result)that);
      return false;
    }

    public boolean equals(findMonitorItemByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMonitorItemByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMonitorItemByGroup_result typedOther = (findMonitorItemByGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.MonitorItem>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  org.cloumon.thrift.MonitorItem _elem14;
                  _elem14 = new org.cloumon.thrift.MonitorItem();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.MonitorItem _iter15 : this.success)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMonitorItemByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostItemGroup_args implements org.apache.thrift.TBase<findHostItemGroup_args, findHostItemGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostItemGroup_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String hostName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostItemGroup_args.class, metaDataMap);
    }

    public findHostItemGroup_args() {
    }

    public findHostItemGroup_args(
      String hostName)
    {
      this();
      this.hostName = hostName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostItemGroup_args(findHostItemGroup_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
    }

    public findHostItemGroup_args deepCopy() {
      return new findHostItemGroup_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public findHostItemGroup_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostItemGroup_args)
        return this.equals((findHostItemGroup_args)that);
      return false;
    }

    public boolean equals(findHostItemGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostItemGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostItemGroup_args typedOther = (findHostItemGroup_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostItemGroup_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostItemGroup_result implements org.apache.thrift.TBase<findHostItemGroup_result, findHostItemGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostItemGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<String> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostItemGroup_result.class, metaDataMap);
    }

    public findHostItemGroup_result() {
    }

    public findHostItemGroup_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostItemGroup_result(findHostItemGroup_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public findHostItemGroup_result deepCopy() {
      return new findHostItemGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public findHostItemGroup_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostItemGroup_result)
        return this.equals((findHostItemGroup_result)that);
      return false;
    }

    public boolean equals(findHostItemGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostItemGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostItemGroup_result typedOther = (findHostItemGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  this.success.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (String _iter19 : this.success)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostItemGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMonitorItem_args implements org.apache.thrift.TBase<getMonitorItem_args, getMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorItem_args");

    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String itemId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_ID((short)1, "itemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorItem_args.class, metaDataMap);
    }

    public getMonitorItem_args() {
    }

    public getMonitorItem_args(
      String itemId)
    {
      this();
      this.itemId = itemId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorItem_args(getMonitorItem_args other) {
      if (other.isSetItemId()) {
        this.itemId = other.itemId;
      }
    }

    public getMonitorItem_args deepCopy() {
      return new getMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.itemId = null;
    }

    public String getItemId() {
      return this.itemId;
    }

    public getMonitorItem_args setItemId(String itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_ID:
        return getItemId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_ID:
        return isSetItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorItem_args)
        return this.equals((getMonitorItem_args)that);
      return false;
    }

    public boolean equals(getMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMonitorItem_args typedOther = (getMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.itemId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(this.itemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorItem_args(");
      boolean first = true;

      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMonitorItem_result implements org.apache.thrift.TBase<getMonitorItem_result, getMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public org.cloumon.thrift.MonitorItem success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MonitorItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorItem_result.class, metaDataMap);
    }

    public getMonitorItem_result() {
    }

    public getMonitorItem_result(
      org.cloumon.thrift.MonitorItem success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorItem_result(getMonitorItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.cloumon.thrift.MonitorItem(other.success);
      }
    }

    public getMonitorItem_result deepCopy() {
      return new getMonitorItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.cloumon.thrift.MonitorItem getSuccess() {
      return this.success;
    }

    public getMonitorItem_result setSuccess(org.cloumon.thrift.MonitorItem success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.cloumon.thrift.MonitorItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorItem_result)
        return this.equals((getMonitorItem_result)that);
      return false;
    }

    public boolean equals(getMonitorItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMonitorItem_result typedOther = (getMonitorItem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new org.cloumon.thrift.MonitorItem();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addHostToMonitorItem_args implements org.apache.thrift.TBase<addHostToMonitorItem_args, addHostToMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHostToMonitorItem_args");

    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNames", org.apache.thrift.protocol.TType.LIST, (short)2);

    public List<String> itemId;
    public List<String> hostNames;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_ID((short)1, "itemId"),
      HOST_NAMES((short)2, "hostNames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_ID
            return ITEM_ID;
          case 2: // HOST_NAMES
            return HOST_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.HOST_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hostNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHostToMonitorItem_args.class, metaDataMap);
    }

    public addHostToMonitorItem_args() {
    }

    public addHostToMonitorItem_args(
      List<String> itemId,
      List<String> hostNames)
    {
      this();
      this.itemId = itemId;
      this.hostNames = hostNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHostToMonitorItem_args(addHostToMonitorItem_args other) {
      if (other.isSetItemId()) {
        List<String> __this__itemId = new ArrayList<String>();
        for (String other_element : other.itemId) {
          __this__itemId.add(other_element);
        }
        this.itemId = __this__itemId;
      }
      if (other.isSetHostNames()) {
        List<String> __this__hostNames = new ArrayList<String>();
        for (String other_element : other.hostNames) {
          __this__hostNames.add(other_element);
        }
        this.hostNames = __this__hostNames;
      }
    }

    public addHostToMonitorItem_args deepCopy() {
      return new addHostToMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.itemId = null;
      this.hostNames = null;
    }

    public int getItemIdSize() {
      return (this.itemId == null) ? 0 : this.itemId.size();
    }

    public java.util.Iterator<String> getItemIdIterator() {
      return (this.itemId == null) ? null : this.itemId.iterator();
    }

    public void addToItemId(String elem) {
      if (this.itemId == null) {
        this.itemId = new ArrayList<String>();
      }
      this.itemId.add(elem);
    }

    public List<String> getItemId() {
      return this.itemId;
    }

    public addHostToMonitorItem_args setItemId(List<String> itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public int getHostNamesSize() {
      return (this.hostNames == null) ? 0 : this.hostNames.size();
    }

    public java.util.Iterator<String> getHostNamesIterator() {
      return (this.hostNames == null) ? null : this.hostNames.iterator();
    }

    public void addToHostNames(String elem) {
      if (this.hostNames == null) {
        this.hostNames = new ArrayList<String>();
      }
      this.hostNames.add(elem);
    }

    public List<String> getHostNames() {
      return this.hostNames;
    }

    public addHostToMonitorItem_args setHostNames(List<String> hostNames) {
      this.hostNames = hostNames;
      return this;
    }

    public void unsetHostNames() {
      this.hostNames = null;
    }

    /** Returns true if field hostNames is set (has been assigned a value) and false otherwise */
    public boolean isSetHostNames() {
      return this.hostNames != null;
    }

    public void setHostNamesIsSet(boolean value) {
      if (!value) {
        this.hostNames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((List<String>)value);
        }
        break;

      case HOST_NAMES:
        if (value == null) {
          unsetHostNames();
        } else {
          setHostNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_ID:
        return getItemId();

      case HOST_NAMES:
        return getHostNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_ID:
        return isSetItemId();
      case HOST_NAMES:
        return isSetHostNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHostToMonitorItem_args)
        return this.equals((addHostToMonitorItem_args)that);
      return false;
    }

    public boolean equals(addHostToMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      boolean this_present_hostNames = true && this.isSetHostNames();
      boolean that_present_hostNames = true && that.isSetHostNames();
      if (this_present_hostNames || that_present_hostNames) {
        if (!(this_present_hostNames && that_present_hostNames))
          return false;
        if (!this.hostNames.equals(that.hostNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHostToMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHostToMonitorItem_args typedOther = (addHostToMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostNames()).compareTo(typedOther.isSetHostNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNames, typedOther.hostNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                this.itemId = new ArrayList<String>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  String _elem22;
                  _elem22 = iprot.readString();
                  this.itemId.add(_elem22);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOST_NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                this.hostNames = new ArrayList<String>(_list23.size);
                for (int _i24 = 0; _i24 < _list23.size; ++_i24)
                {
                  String _elem25;
                  _elem25 = iprot.readString();
                  this.hostNames.add(_elem25);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.itemId.size()));
          for (String _iter26 : this.itemId)
          {
            oprot.writeString(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.hostNames != null) {
        oprot.writeFieldBegin(HOST_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostNames.size()));
          for (String _iter27 : this.hostNames)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHostToMonitorItem_args(");
      boolean first = true;

      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostNames:");
      if (this.hostNames == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addHostToMonitorItem_result implements org.apache.thrift.TBase<addHostToMonitorItem_result, addHostToMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHostToMonitorItem_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHostToMonitorItem_result.class, metaDataMap);
    }

    public addHostToMonitorItem_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHostToMonitorItem_result(addHostToMonitorItem_result other) {
    }

    public addHostToMonitorItem_result deepCopy() {
      return new addHostToMonitorItem_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHostToMonitorItem_result)
        return this.equals((addHostToMonitorItem_result)that);
      return false;
    }

    public boolean equals(addHostToMonitorItem_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHostToMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHostToMonitorItem_result typedOther = (addHostToMonitorItem_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHostToMonitorItem_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyMonitorItemToHosts_args implements org.apache.thrift.TBase<modifyMonitorItemToHosts_args, modifyMonitorItemToHosts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyMonitorItemToHosts_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItemId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOSTS_IS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostsIs", org.apache.thrift.protocol.TType.LIST, (short)2);

    public String monitorItemId;
    public List<String> hostsIs;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEM_ID((short)1, "monitorItemId"),
      HOSTS_IS((short)2, "hostsIs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEM_ID
            return MONITOR_ITEM_ID;
          case 2: // HOSTS_IS
            return HOSTS_IS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("monitorItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOSTS_IS, new org.apache.thrift.meta_data.FieldMetaData("hostsIs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyMonitorItemToHosts_args.class, metaDataMap);
    }

    public modifyMonitorItemToHosts_args() {
    }

    public modifyMonitorItemToHosts_args(
      String monitorItemId,
      List<String> hostsIs)
    {
      this();
      this.monitorItemId = monitorItemId;
      this.hostsIs = hostsIs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyMonitorItemToHosts_args(modifyMonitorItemToHosts_args other) {
      if (other.isSetMonitorItemId()) {
        this.monitorItemId = other.monitorItemId;
      }
      if (other.isSetHostsIs()) {
        List<String> __this__hostsIs = new ArrayList<String>();
        for (String other_element : other.hostsIs) {
          __this__hostsIs.add(other_element);
        }
        this.hostsIs = __this__hostsIs;
      }
    }

    public modifyMonitorItemToHosts_args deepCopy() {
      return new modifyMonitorItemToHosts_args(this);
    }

    @Override
    public void clear() {
      this.monitorItemId = null;
      this.hostsIs = null;
    }

    public String getMonitorItemId() {
      return this.monitorItemId;
    }

    public modifyMonitorItemToHosts_args setMonitorItemId(String monitorItemId) {
      this.monitorItemId = monitorItemId;
      return this;
    }

    public void unsetMonitorItemId() {
      this.monitorItemId = null;
    }

    /** Returns true if field monitorItemId is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItemId() {
      return this.monitorItemId != null;
    }

    public void setMonitorItemIdIsSet(boolean value) {
      if (!value) {
        this.monitorItemId = null;
      }
    }

    public int getHostsIsSize() {
      return (this.hostsIs == null) ? 0 : this.hostsIs.size();
    }

    public java.util.Iterator<String> getHostsIsIterator() {
      return (this.hostsIs == null) ? null : this.hostsIs.iterator();
    }

    public void addToHostsIs(String elem) {
      if (this.hostsIs == null) {
        this.hostsIs = new ArrayList<String>();
      }
      this.hostsIs.add(elem);
    }

    public List<String> getHostsIs() {
      return this.hostsIs;
    }

    public modifyMonitorItemToHosts_args setHostsIs(List<String> hostsIs) {
      this.hostsIs = hostsIs;
      return this;
    }

    public void unsetHostsIs() {
      this.hostsIs = null;
    }

    /** Returns true if field hostsIs is set (has been assigned a value) and false otherwise */
    public boolean isSetHostsIs() {
      return this.hostsIs != null;
    }

    public void setHostsIsIsSet(boolean value) {
      if (!value) {
        this.hostsIs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEM_ID:
        if (value == null) {
          unsetMonitorItemId();
        } else {
          setMonitorItemId((String)value);
        }
        break;

      case HOSTS_IS:
        if (value == null) {
          unsetHostsIs();
        } else {
          setHostsIs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEM_ID:
        return getMonitorItemId();

      case HOSTS_IS:
        return getHostsIs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEM_ID:
        return isSetMonitorItemId();
      case HOSTS_IS:
        return isSetHostsIs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyMonitorItemToHosts_args)
        return this.equals((modifyMonitorItemToHosts_args)that);
      return false;
    }

    public boolean equals(modifyMonitorItemToHosts_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItemId = true && this.isSetMonitorItemId();
      boolean that_present_monitorItemId = true && that.isSetMonitorItemId();
      if (this_present_monitorItemId || that_present_monitorItemId) {
        if (!(this_present_monitorItemId && that_present_monitorItemId))
          return false;
        if (!this.monitorItemId.equals(that.monitorItemId))
          return false;
      }

      boolean this_present_hostsIs = true && this.isSetHostsIs();
      boolean that_present_hostsIs = true && that.isSetHostsIs();
      if (this_present_hostsIs || that_present_hostsIs) {
        if (!(this_present_hostsIs && that_present_hostsIs))
          return false;
        if (!this.hostsIs.equals(that.hostsIs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyMonitorItemToHosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyMonitorItemToHosts_args typedOther = (modifyMonitorItemToHosts_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItemId()).compareTo(typedOther.isSetMonitorItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItemId, typedOther.monitorItemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostsIs()).compareTo(typedOther.isSetHostsIs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostsIs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostsIs, typedOther.hostsIs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.monitorItemId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOSTS_IS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                this.hostsIs = new ArrayList<String>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  String _elem30;
                  _elem30 = iprot.readString();
                  this.hostsIs.add(_elem30);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItemId != null) {
        oprot.writeFieldBegin(MONITOR_ITEM_ID_FIELD_DESC);
        oprot.writeString(this.monitorItemId);
        oprot.writeFieldEnd();
      }
      if (this.hostsIs != null) {
        oprot.writeFieldBegin(HOSTS_IS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostsIs.size()));
          for (String _iter31 : this.hostsIs)
          {
            oprot.writeString(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyMonitorItemToHosts_args(");
      boolean first = true;

      sb.append("monitorItemId:");
      if (this.monitorItemId == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostsIs:");
      if (this.hostsIs == null) {
        sb.append("null");
      } else {
        sb.append(this.hostsIs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyMonitorItemToHosts_result implements org.apache.thrift.TBase<modifyMonitorItemToHosts_result, modifyMonitorItemToHosts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyMonitorItemToHosts_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyMonitorItemToHosts_result.class, metaDataMap);
    }

    public modifyMonitorItemToHosts_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyMonitorItemToHosts_result(modifyMonitorItemToHosts_result other) {
    }

    public modifyMonitorItemToHosts_result deepCopy() {
      return new modifyMonitorItemToHosts_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyMonitorItemToHosts_result)
        return this.equals((modifyMonitorItemToHosts_result)that);
      return false;
    }

    public boolean equals(modifyMonitorItemToHosts_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyMonitorItemToHosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyMonitorItemToHosts_result typedOther = (modifyMonitorItemToHosts_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyMonitorItemToHosts_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyHostMonitorItem_args implements org.apache.thrift.TBase<modifyHostMonitorItem_args, modifyHostMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyHostMonitorItem_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItemId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarm", org.apache.thrift.protocol.TType.STRING, (short)3);

    public String monitorItemId;
    public String hostName;
    public String alarm;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEM_ID((short)1, "monitorItemId"),
      HOST_NAME((short)2, "hostName"),
      ALARM((short)3, "alarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEM_ID
            return MONITOR_ITEM_ID;
          case 2: // HOST_NAME
            return HOST_NAME;
          case 3: // ALARM
            return ALARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("monitorItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALARM, new org.apache.thrift.meta_data.FieldMetaData("alarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyHostMonitorItem_args.class, metaDataMap);
    }

    public modifyHostMonitorItem_args() {
    }

    public modifyHostMonitorItem_args(
      String monitorItemId,
      String hostName,
      String alarm)
    {
      this();
      this.monitorItemId = monitorItemId;
      this.hostName = hostName;
      this.alarm = alarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyHostMonitorItem_args(modifyHostMonitorItem_args other) {
      if (other.isSetMonitorItemId()) {
        this.monitorItemId = other.monitorItemId;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetAlarm()) {
        this.alarm = other.alarm;
      }
    }

    public modifyHostMonitorItem_args deepCopy() {
      return new modifyHostMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.monitorItemId = null;
      this.hostName = null;
      this.alarm = null;
    }

    public String getMonitorItemId() {
      return this.monitorItemId;
    }

    public modifyHostMonitorItem_args setMonitorItemId(String monitorItemId) {
      this.monitorItemId = monitorItemId;
      return this;
    }

    public void unsetMonitorItemId() {
      this.monitorItemId = null;
    }

    /** Returns true if field monitorItemId is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItemId() {
      return this.monitorItemId != null;
    }

    public void setMonitorItemIdIsSet(boolean value) {
      if (!value) {
        this.monitorItemId = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public modifyHostMonitorItem_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getAlarm() {
      return this.alarm;
    }

    public modifyHostMonitorItem_args setAlarm(String alarm) {
      this.alarm = alarm;
      return this;
    }

    public void unsetAlarm() {
      this.alarm = null;
    }

    /** Returns true if field alarm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarm() {
      return this.alarm != null;
    }

    public void setAlarmIsSet(boolean value) {
      if (!value) {
        this.alarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEM_ID:
        if (value == null) {
          unsetMonitorItemId();
        } else {
          setMonitorItemId((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case ALARM:
        if (value == null) {
          unsetAlarm();
        } else {
          setAlarm((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEM_ID:
        return getMonitorItemId();

      case HOST_NAME:
        return getHostName();

      case ALARM:
        return getAlarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEM_ID:
        return isSetMonitorItemId();
      case HOST_NAME:
        return isSetHostName();
      case ALARM:
        return isSetAlarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyHostMonitorItem_args)
        return this.equals((modifyHostMonitorItem_args)that);
      return false;
    }

    public boolean equals(modifyHostMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItemId = true && this.isSetMonitorItemId();
      boolean that_present_monitorItemId = true && that.isSetMonitorItemId();
      if (this_present_monitorItemId || that_present_monitorItemId) {
        if (!(this_present_monitorItemId && that_present_monitorItemId))
          return false;
        if (!this.monitorItemId.equals(that.monitorItemId))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_alarm = true && this.isSetAlarm();
      boolean that_present_alarm = true && that.isSetAlarm();
      if (this_present_alarm || that_present_alarm) {
        if (!(this_present_alarm && that_present_alarm))
          return false;
        if (!this.alarm.equals(that.alarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyHostMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyHostMonitorItem_args typedOther = (modifyHostMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItemId()).compareTo(typedOther.isSetMonitorItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItemId, typedOther.monitorItemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlarm()).compareTo(typedOther.isSetAlarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarm, typedOther.alarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.monitorItemId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ALARM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.alarm = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItemId != null) {
        oprot.writeFieldBegin(MONITOR_ITEM_ID_FIELD_DESC);
        oprot.writeString(this.monitorItemId);
        oprot.writeFieldEnd();
      }
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      if (this.alarm != null) {
        oprot.writeFieldBegin(ALARM_FIELD_DESC);
        oprot.writeString(this.alarm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyHostMonitorItem_args(");
      boolean first = true;

      sb.append("monitorItemId:");
      if (this.monitorItemId == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alarm:");
      if (this.alarm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class modifyHostMonitorItem_result implements org.apache.thrift.TBase<modifyHostMonitorItem_result, modifyHostMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyHostMonitorItem_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyHostMonitorItem_result.class, metaDataMap);
    }

    public modifyHostMonitorItem_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyHostMonitorItem_result(modifyHostMonitorItem_result other) {
    }

    public modifyHostMonitorItem_result deepCopy() {
      return new modifyHostMonitorItem_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyHostMonitorItem_result)
        return this.equals((modifyHostMonitorItem_result)that);
      return false;
    }

    public boolean equals(modifyHostMonitorItem_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyHostMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyHostMonitorItem_result typedOther = (modifyHostMonitorItem_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyHostMonitorItem_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostSummaryMetrics_args implements org.apache.thrift.TBase<getHostSummaryMetrics_args, getHostSummaryMetrics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostSummaryMetrics_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostSummaryMetrics_args.class, metaDataMap);
    }

    public getHostSummaryMetrics_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostSummaryMetrics_args(getHostSummaryMetrics_args other) {
    }

    public getHostSummaryMetrics_args deepCopy() {
      return new getHostSummaryMetrics_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostSummaryMetrics_args)
        return this.equals((getHostSummaryMetrics_args)that);
      return false;
    }

    public boolean equals(getHostSummaryMetrics_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostSummaryMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostSummaryMetrics_args typedOther = (getHostSummaryMetrics_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostSummaryMetrics_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostSummaryMetrics_result implements org.apache.thrift.TBase<getHostSummaryMetrics_result, getHostSummaryMetrics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostSummaryMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostSummaryMetrics> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostSummaryMetrics.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostSummaryMetrics_result.class, metaDataMap);
    }

    public getHostSummaryMetrics_result() {
    }

    public getHostSummaryMetrics_result(
      List<org.cloumon.thrift.HostSummaryMetrics> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostSummaryMetrics_result(getHostSummaryMetrics_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostSummaryMetrics> __this__success = new ArrayList<org.cloumon.thrift.HostSummaryMetrics>();
        for (org.cloumon.thrift.HostSummaryMetrics other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostSummaryMetrics(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHostSummaryMetrics_result deepCopy() {
      return new getHostSummaryMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostSummaryMetrics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostSummaryMetrics elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostSummaryMetrics>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostSummaryMetrics> getSuccess() {
      return this.success;
    }

    public getHostSummaryMetrics_result setSuccess(List<org.cloumon.thrift.HostSummaryMetrics> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostSummaryMetrics>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostSummaryMetrics_result)
        return this.equals((getHostSummaryMetrics_result)that);
      return false;
    }

    public boolean equals(getHostSummaryMetrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostSummaryMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostSummaryMetrics_result typedOther = (getHostSummaryMetrics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostSummaryMetrics>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  org.cloumon.thrift.HostSummaryMetrics _elem34;
                  _elem34 = new org.cloumon.thrift.HostSummaryMetrics();
                  _elem34.read(iprot);
                  this.success.add(_elem34);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostSummaryMetrics _iter35 : this.success)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostSummaryMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostCurrentMetrics_args implements org.apache.thrift.TBase<getHostCurrentMetrics_args, getHostCurrentMetrics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostCurrentMetrics_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String hostName;
    public String groupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName"),
      GROUP_NAME((short)2, "groupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostCurrentMetrics_args.class, metaDataMap);
    }

    public getHostCurrentMetrics_args() {
    }

    public getHostCurrentMetrics_args(
      String hostName,
      String groupName)
    {
      this();
      this.hostName = hostName;
      this.groupName = groupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostCurrentMetrics_args(getHostCurrentMetrics_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
    }

    public getHostCurrentMetrics_args deepCopy() {
      return new getHostCurrentMetrics_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
      this.groupName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public getHostCurrentMetrics_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getGroupName() {
      return this.groupName;
    }

    public getHostCurrentMetrics_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      case GROUP_NAME:
        return getGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      case GROUP_NAME:
        return isSetGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostCurrentMetrics_args)
        return this.equals((getHostCurrentMetrics_args)that);
      return false;
    }

    public boolean equals(getHostCurrentMetrics_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostCurrentMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostCurrentMetrics_args typedOther = (getHostCurrentMetrics_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostCurrentMetrics_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostCurrentMetrics_result implements org.apache.thrift.TBase<getHostCurrentMetrics_result, getHostCurrentMetrics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostCurrentMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.MetricViewRecord> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.MetricViewRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostCurrentMetrics_result.class, metaDataMap);
    }

    public getHostCurrentMetrics_result() {
    }

    public getHostCurrentMetrics_result(
      List<org.cloumon.thrift.MetricViewRecord> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostCurrentMetrics_result(getHostCurrentMetrics_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.MetricViewRecord> __this__success = new ArrayList<org.cloumon.thrift.MetricViewRecord>();
        for (org.cloumon.thrift.MetricViewRecord other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.MetricViewRecord(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHostCurrentMetrics_result deepCopy() {
      return new getHostCurrentMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.MetricViewRecord> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.MetricViewRecord elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.MetricViewRecord>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.MetricViewRecord> getSuccess() {
      return this.success;
    }

    public getHostCurrentMetrics_result setSuccess(List<org.cloumon.thrift.MetricViewRecord> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.MetricViewRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostCurrentMetrics_result)
        return this.equals((getHostCurrentMetrics_result)that);
      return false;
    }

    public boolean equals(getHostCurrentMetrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostCurrentMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostCurrentMetrics_result typedOther = (getHostCurrentMetrics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.MetricViewRecord>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  org.cloumon.thrift.MetricViewRecord _elem38;
                  _elem38 = new org.cloumon.thrift.MetricViewRecord();
                  _elem38.read(iprot);
                  this.success.add(_elem38);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.MetricViewRecord _iter39 : this.success)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostCurrentMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostHistoryMetrics_args implements org.apache.thrift.TBase<getHostHistoryMetrics_args, getHostHistoryMetrics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostHistoryMetrics_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)4);

    public String hostName;
    public String groupName;
    public String startTime;
    public String endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName"),
      GROUP_NAME((short)2, "groupName"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostHistoryMetrics_args.class, metaDataMap);
    }

    public getHostHistoryMetrics_args() {
    }

    public getHostHistoryMetrics_args(
      String hostName,
      String groupName,
      String startTime,
      String endTime)
    {
      this();
      this.hostName = hostName;
      this.groupName = groupName;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostHistoryMetrics_args(getHostHistoryMetrics_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public getHostHistoryMetrics_args deepCopy() {
      return new getHostHistoryMetrics_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
      this.groupName = null;
      this.startTime = null;
      this.endTime = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public getHostHistoryMetrics_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getGroupName() {
      return this.groupName;
    }

    public getHostHistoryMetrics_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public getHostHistoryMetrics_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getHostHistoryMetrics_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      case GROUP_NAME:
        return getGroupName();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      case GROUP_NAME:
        return isSetGroupName();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostHistoryMetrics_args)
        return this.equals((getHostHistoryMetrics_args)that);
      return false;
    }

    public boolean equals(getHostHistoryMetrics_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostHistoryMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostHistoryMetrics_args typedOther = (getHostHistoryMetrics_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostHistoryMetrics_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostHistoryMetrics_result implements org.apache.thrift.TBase<getHostHistoryMetrics_result, getHostHistoryMetrics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostHistoryMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostHistoryMetrics> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostHistoryMetrics.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostHistoryMetrics_result.class, metaDataMap);
    }

    public getHostHistoryMetrics_result() {
    }

    public getHostHistoryMetrics_result(
      List<org.cloumon.thrift.HostHistoryMetrics> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostHistoryMetrics_result(getHostHistoryMetrics_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostHistoryMetrics> __this__success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>();
        for (org.cloumon.thrift.HostHistoryMetrics other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostHistoryMetrics(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHostHistoryMetrics_result deepCopy() {
      return new getHostHistoryMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostHistoryMetrics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostHistoryMetrics elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> getSuccess() {
      return this.success;
    }

    public getHostHistoryMetrics_result setSuccess(List<org.cloumon.thrift.HostHistoryMetrics> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostHistoryMetrics>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostHistoryMetrics_result)
        return this.equals((getHostHistoryMetrics_result)that);
      return false;
    }

    public boolean equals(getHostHistoryMetrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostHistoryMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostHistoryMetrics_result typedOther = (getHostHistoryMetrics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  org.cloumon.thrift.HostHistoryMetrics _elem42;
                  _elem42 = new org.cloumon.thrift.HostHistoryMetrics();
                  _elem42.read(iprot);
                  this.success.add(_elem42);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostHistoryMetrics _iter43 : this.success)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostHistoryMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostHistoryItemMetrics_args implements org.apache.thrift.TBase<getHostHistoryItemMetrics_args, getHostHistoryItemMetrics_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostHistoryItemMetrics_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("itemNames", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);

    public String hostName;
    public String groupName;
    public List<String> itemNames;
    public String startTime;
    public String endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName"),
      GROUP_NAME((short)2, "groupName"),
      ITEM_NAMES((short)3, "itemNames"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          case 3: // ITEM_NAMES
            return ITEM_NAMES;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("itemNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostHistoryItemMetrics_args.class, metaDataMap);
    }

    public getHostHistoryItemMetrics_args() {
    }

    public getHostHistoryItemMetrics_args(
      String hostName,
      String groupName,
      List<String> itemNames,
      String startTime,
      String endTime)
    {
      this();
      this.hostName = hostName;
      this.groupName = groupName;
      this.itemNames = itemNames;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostHistoryItemMetrics_args(getHostHistoryItemMetrics_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
      if (other.isSetItemNames()) {
        List<String> __this__itemNames = new ArrayList<String>();
        for (String other_element : other.itemNames) {
          __this__itemNames.add(other_element);
        }
        this.itemNames = __this__itemNames;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public getHostHistoryItemMetrics_args deepCopy() {
      return new getHostHistoryItemMetrics_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
      this.groupName = null;
      this.itemNames = null;
      this.startTime = null;
      this.endTime = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public getHostHistoryItemMetrics_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getGroupName() {
      return this.groupName;
    }

    public getHostHistoryItemMetrics_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public int getItemNamesSize() {
      return (this.itemNames == null) ? 0 : this.itemNames.size();
    }

    public java.util.Iterator<String> getItemNamesIterator() {
      return (this.itemNames == null) ? null : this.itemNames.iterator();
    }

    public void addToItemNames(String elem) {
      if (this.itemNames == null) {
        this.itemNames = new ArrayList<String>();
      }
      this.itemNames.add(elem);
    }

    public List<String> getItemNames() {
      return this.itemNames;
    }

    public getHostHistoryItemMetrics_args setItemNames(List<String> itemNames) {
      this.itemNames = itemNames;
      return this;
    }

    public void unsetItemNames() {
      this.itemNames = null;
    }

    /** Returns true if field itemNames is set (has been assigned a value) and false otherwise */
    public boolean isSetItemNames() {
      return this.itemNames != null;
    }

    public void setItemNamesIsSet(boolean value) {
      if (!value) {
        this.itemNames = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public getHostHistoryItemMetrics_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getHostHistoryItemMetrics_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      case ITEM_NAMES:
        if (value == null) {
          unsetItemNames();
        } else {
          setItemNames((List<String>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      case GROUP_NAME:
        return getGroupName();

      case ITEM_NAMES:
        return getItemNames();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      case GROUP_NAME:
        return isSetGroupName();
      case ITEM_NAMES:
        return isSetItemNames();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostHistoryItemMetrics_args)
        return this.equals((getHostHistoryItemMetrics_args)that);
      return false;
    }

    public boolean equals(getHostHistoryItemMetrics_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      boolean this_present_itemNames = true && this.isSetItemNames();
      boolean that_present_itemNames = true && that.isSetItemNames();
      if (this_present_itemNames || that_present_itemNames) {
        if (!(this_present_itemNames && that_present_itemNames))
          return false;
        if (!this.itemNames.equals(that.itemNames))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostHistoryItemMetrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostHistoryItemMetrics_args typedOther = (getHostHistoryItemMetrics_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemNames()).compareTo(typedOther.isSetItemNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemNames, typedOther.itemNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.groupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ITEM_NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                this.itemNames = new ArrayList<String>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  String _elem46;
                  _elem46 = iprot.readString();
                  this.itemNames.add(_elem46);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      if (this.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.groupName);
        oprot.writeFieldEnd();
      }
      if (this.itemNames != null) {
        oprot.writeFieldBegin(ITEM_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.itemNames.size()));
          for (String _iter47 : this.itemNames)
          {
            oprot.writeString(_iter47);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostHistoryItemMetrics_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemNames:");
      if (this.itemNames == null) {
        sb.append("null");
      } else {
        sb.append(this.itemNames);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostHistoryItemMetrics_result implements org.apache.thrift.TBase<getHostHistoryItemMetrics_result, getHostHistoryItemMetrics_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostHistoryItemMetrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostHistoryMetrics> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostHistoryMetrics.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostHistoryItemMetrics_result.class, metaDataMap);
    }

    public getHostHistoryItemMetrics_result() {
    }

    public getHostHistoryItemMetrics_result(
      List<org.cloumon.thrift.HostHistoryMetrics> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostHistoryItemMetrics_result(getHostHistoryItemMetrics_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostHistoryMetrics> __this__success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>();
        for (org.cloumon.thrift.HostHistoryMetrics other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostHistoryMetrics(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHostHistoryItemMetrics_result deepCopy() {
      return new getHostHistoryItemMetrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostHistoryMetrics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostHistoryMetrics elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostHistoryMetrics> getSuccess() {
      return this.success;
    }

    public getHostHistoryItemMetrics_result setSuccess(List<org.cloumon.thrift.HostHistoryMetrics> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostHistoryMetrics>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostHistoryItemMetrics_result)
        return this.equals((getHostHistoryItemMetrics_result)that);
      return false;
    }

    public boolean equals(getHostHistoryItemMetrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostHistoryItemMetrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostHistoryItemMetrics_result typedOther = (getHostHistoryItemMetrics_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostHistoryMetrics>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  org.cloumon.thrift.HostHistoryMetrics _elem50;
                  _elem50 = new org.cloumon.thrift.HostHistoryMetrics();
                  _elem50.read(iprot);
                  this.success.add(_elem50);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostHistoryMetrics _iter51 : this.success)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostHistoryItemMetrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class checkMetricHistoryTime_args implements org.apache.thrift.TBase<checkMetricHistoryTime_args, checkMetricHistoryTime_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkMetricHistoryTime_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String startTime;
    public String endTime;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkMetricHistoryTime_args.class, metaDataMap);
    }

    public checkMetricHistoryTime_args() {
    }

    public checkMetricHistoryTime_args(
      String startTime,
      String endTime)
    {
      this();
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkMetricHistoryTime_args(checkMetricHistoryTime_args other) {
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public checkMetricHistoryTime_args deepCopy() {
      return new checkMetricHistoryTime_args(this);
    }

    @Override
    public void clear() {
      this.startTime = null;
      this.endTime = null;
    }

    public String getStartTime() {
      return this.startTime;
    }

    public checkMetricHistoryTime_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public checkMetricHistoryTime_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkMetricHistoryTime_args)
        return this.equals((checkMetricHistoryTime_args)that);
      return false;
    }

    public boolean equals(checkMetricHistoryTime_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkMetricHistoryTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkMetricHistoryTime_args typedOther = (checkMetricHistoryTime_args)other;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // START_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.startTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // END_TIME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.endTime = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(this.startTime);
        oprot.writeFieldEnd();
      }
      if (this.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(this.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkMetricHistoryTime_args(");
      boolean first = true;

      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class checkMetricHistoryTime_result implements org.apache.thrift.TBase<checkMetricHistoryTime_result, checkMetricHistoryTime_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkMetricHistoryTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkMetricHistoryTime_result.class, metaDataMap);
    }

    public checkMetricHistoryTime_result() {
    }

    public checkMetricHistoryTime_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkMetricHistoryTime_result(checkMetricHistoryTime_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkMetricHistoryTime_result deepCopy() {
      return new checkMetricHistoryTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checkMetricHistoryTime_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkMetricHistoryTime_result)
        return this.equals((checkMetricHistoryTime_result)that);
      return false;
    }

    public boolean equals(checkMetricHistoryTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkMetricHistoryTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkMetricHistoryTime_result typedOther = (checkMetricHistoryTime_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkMetricHistoryTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostInfo_args implements org.apache.thrift.TBase<getHostInfo_args, getHostInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostInfo_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String hostName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostInfo_args.class, metaDataMap);
    }

    public getHostInfo_args() {
    }

    public getHostInfo_args(
      String hostName)
    {
      this();
      this.hostName = hostName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostInfo_args(getHostInfo_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
    }

    public getHostInfo_args deepCopy() {
      return new getHostInfo_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public getHostInfo_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostInfo_args)
        return this.equals((getHostInfo_args)that);
      return false;
    }

    public boolean equals(getHostInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostInfo_args typedOther = (getHostInfo_args)other;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.hostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(this.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostInfo_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHostInfo_result implements org.apache.thrift.TBase<getHostInfo_result, getHostInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHostInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public org.cloumon.thrift.HostInfo success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHostInfo_result.class, metaDataMap);
    }

    public getHostInfo_result() {
    }

    public getHostInfo_result(
      org.cloumon.thrift.HostInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHostInfo_result(getHostInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.cloumon.thrift.HostInfo(other.success);
      }
    }

    public getHostInfo_result deepCopy() {
      return new getHostInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.cloumon.thrift.HostInfo getSuccess() {
      return this.success;
    }

    public getHostInfo_result setSuccess(org.cloumon.thrift.HostInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.cloumon.thrift.HostInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostInfo_result)
        return this.equals((getHostInfo_result)that);
      return false;
    }

    public boolean equals(getHostInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHostInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHostInfo_result typedOther = (getHostInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new org.cloumon.thrift.HostInfo();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHostInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeHosts_args implements org.apache.thrift.TBase<removeHosts_args, removeHosts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHosts_args");

    private static final org.apache.thrift.protocol.TField HOST_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNames", org.apache.thrift.protocol.TType.LIST, (short)1);

    public List<String> hostNames;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAMES((short)1, "hostNames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAMES
            return HOST_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hostNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHosts_args.class, metaDataMap);
    }

    public removeHosts_args() {
    }

    public removeHosts_args(
      List<String> hostNames)
    {
      this();
      this.hostNames = hostNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHosts_args(removeHosts_args other) {
      if (other.isSetHostNames()) {
        List<String> __this__hostNames = new ArrayList<String>();
        for (String other_element : other.hostNames) {
          __this__hostNames.add(other_element);
        }
        this.hostNames = __this__hostNames;
      }
    }

    public removeHosts_args deepCopy() {
      return new removeHosts_args(this);
    }

    @Override
    public void clear() {
      this.hostNames = null;
    }

    public int getHostNamesSize() {
      return (this.hostNames == null) ? 0 : this.hostNames.size();
    }

    public java.util.Iterator<String> getHostNamesIterator() {
      return (this.hostNames == null) ? null : this.hostNames.iterator();
    }

    public void addToHostNames(String elem) {
      if (this.hostNames == null) {
        this.hostNames = new ArrayList<String>();
      }
      this.hostNames.add(elem);
    }

    public List<String> getHostNames() {
      return this.hostNames;
    }

    public removeHosts_args setHostNames(List<String> hostNames) {
      this.hostNames = hostNames;
      return this;
    }

    public void unsetHostNames() {
      this.hostNames = null;
    }

    /** Returns true if field hostNames is set (has been assigned a value) and false otherwise */
    public boolean isSetHostNames() {
      return this.hostNames != null;
    }

    public void setHostNamesIsSet(boolean value) {
      if (!value) {
        this.hostNames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAMES:
        if (value == null) {
          unsetHostNames();
        } else {
          setHostNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAMES:
        return getHostNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAMES:
        return isSetHostNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHosts_args)
        return this.equals((removeHosts_args)that);
      return false;
    }

    public boolean equals(removeHosts_args that) {
      if (that == null)
        return false;

      boolean this_present_hostNames = true && this.isSetHostNames();
      boolean that_present_hostNames = true && that.isSetHostNames();
      if (this_present_hostNames || that_present_hostNames) {
        if (!(this_present_hostNames && that_present_hostNames))
          return false;
        if (!this.hostNames.equals(that.hostNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHosts_args typedOther = (removeHosts_args)other;

      lastComparison = Boolean.valueOf(isSetHostNames()).compareTo(typedOther.isSetHostNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNames, typedOther.hostNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // HOST_NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                this.hostNames = new ArrayList<String>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  String _elem54;
                  _elem54 = iprot.readString();
                  this.hostNames.add(_elem54);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.hostNames != null) {
        oprot.writeFieldBegin(HOST_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostNames.size()));
          for (String _iter55 : this.hostNames)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHosts_args(");
      boolean first = true;

      sb.append("hostNames:");
      if (this.hostNames == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeHosts_result implements org.apache.thrift.TBase<removeHosts_result, removeHosts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHosts_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHosts_result.class, metaDataMap);
    }

    public removeHosts_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHosts_result(removeHosts_result other) {
    }

    public removeHosts_result deepCopy() {
      return new removeHosts_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHosts_result)
        return this.equals((removeHosts_result)that);
      return false;
    }

    public boolean equals(removeHosts_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHosts_result typedOther = (removeHosts_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHosts_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllHosts_args implements org.apache.thrift.TBase<findAllHosts_args, findAllHosts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHosts_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHosts_args.class, metaDataMap);
    }

    public findAllHosts_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHosts_args(findAllHosts_args other) {
    }

    public findAllHosts_args deepCopy() {
      return new findAllHosts_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHosts_args)
        return this.equals((findAllHosts_args)that);
      return false;
    }

    public boolean equals(findAllHosts_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllHosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllHosts_args typedOther = (findAllHosts_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHosts_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllHosts_result implements org.apache.thrift.TBase<findAllHosts_result, findAllHosts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllHosts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostInfo> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllHosts_result.class, metaDataMap);
    }

    public findAllHosts_result() {
    }

    public findAllHosts_result(
      List<org.cloumon.thrift.HostInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllHosts_result(findAllHosts_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostInfo> __this__success = new ArrayList<org.cloumon.thrift.HostInfo>();
        for (org.cloumon.thrift.HostInfo other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllHosts_result deepCopy() {
      return new findAllHosts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostInfo>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostInfo> getSuccess() {
      return this.success;
    }

    public findAllHosts_result setSuccess(List<org.cloumon.thrift.HostInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllHosts_result)
        return this.equals((findAllHosts_result)that);
      return false;
    }

    public boolean equals(findAllHosts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllHosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllHosts_result typedOther = (findAllHosts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostInfo>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  org.cloumon.thrift.HostInfo _elem58;
                  _elem58 = new org.cloumon.thrift.HostInfo();
                  _elem58.read(iprot);
                  this.success.add(_elem58);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostInfo _iter59 : this.success)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllHosts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostByServiceGroup_args implements org.apache.thrift.TBase<findHostByServiceGroup_args, findHostByServiceGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostByServiceGroup_args");

    private static final org.apache.thrift.protocol.TField SERVICE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String serviceGroupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_GROUP_NAME((short)1, "serviceGroupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_GROUP_NAME
            return SERVICE_GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostByServiceGroup_args.class, metaDataMap);
    }

    public findHostByServiceGroup_args() {
    }

    public findHostByServiceGroup_args(
      String serviceGroupName)
    {
      this();
      this.serviceGroupName = serviceGroupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostByServiceGroup_args(findHostByServiceGroup_args other) {
      if (other.isSetServiceGroupName()) {
        this.serviceGroupName = other.serviceGroupName;
      }
    }

    public findHostByServiceGroup_args deepCopy() {
      return new findHostByServiceGroup_args(this);
    }

    @Override
    public void clear() {
      this.serviceGroupName = null;
    }

    public String getServiceGroupName() {
      return this.serviceGroupName;
    }

    public findHostByServiceGroup_args setServiceGroupName(String serviceGroupName) {
      this.serviceGroupName = serviceGroupName;
      return this;
    }

    public void unsetServiceGroupName() {
      this.serviceGroupName = null;
    }

    /** Returns true if field serviceGroupName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceGroupName() {
      return this.serviceGroupName != null;
    }

    public void setServiceGroupNameIsSet(boolean value) {
      if (!value) {
        this.serviceGroupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        if (value == null) {
          unsetServiceGroupName();
        } else {
          setServiceGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        return getServiceGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_GROUP_NAME:
        return isSetServiceGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostByServiceGroup_args)
        return this.equals((findHostByServiceGroup_args)that);
      return false;
    }

    public boolean equals(findHostByServiceGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceGroupName = true && this.isSetServiceGroupName();
      boolean that_present_serviceGroupName = true && that.isSetServiceGroupName();
      if (this_present_serviceGroupName || that_present_serviceGroupName) {
        if (!(this_present_serviceGroupName && that_present_serviceGroupName))
          return false;
        if (!this.serviceGroupName.equals(that.serviceGroupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostByServiceGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostByServiceGroup_args typedOther = (findHostByServiceGroup_args)other;

      lastComparison = Boolean.valueOf(isSetServiceGroupName()).compareTo(typedOther.isSetServiceGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroupName, typedOther.serviceGroupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SERVICE_GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.serviceGroupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serviceGroupName != null) {
        oprot.writeFieldBegin(SERVICE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.serviceGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostByServiceGroup_args(");
      boolean first = true;

      sb.append("serviceGroupName:");
      if (this.serviceGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceGroupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostByServiceGroup_result implements org.apache.thrift.TBase<findHostByServiceGroup_result, findHostByServiceGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostByServiceGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostInfo> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostByServiceGroup_result.class, metaDataMap);
    }

    public findHostByServiceGroup_result() {
    }

    public findHostByServiceGroup_result(
      List<org.cloumon.thrift.HostInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostByServiceGroup_result(findHostByServiceGroup_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostInfo> __this__success = new ArrayList<org.cloumon.thrift.HostInfo>();
        for (org.cloumon.thrift.HostInfo other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findHostByServiceGroup_result deepCopy() {
      return new findHostByServiceGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostInfo>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostInfo> getSuccess() {
      return this.success;
    }

    public findHostByServiceGroup_result setSuccess(List<org.cloumon.thrift.HostInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostByServiceGroup_result)
        return this.equals((findHostByServiceGroup_result)that);
      return false;
    }

    public boolean equals(findHostByServiceGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostByServiceGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostByServiceGroup_result typedOther = (findHostByServiceGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostInfo>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  org.cloumon.thrift.HostInfo _elem62;
                  _elem62 = new org.cloumon.thrift.HostInfo();
                  _elem62.read(iprot);
                  this.success.add(_elem62);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostInfo _iter63 : this.success)
          {
            _iter63.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostByServiceGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostByMonitorItem_args implements org.apache.thrift.TBase<findHostByMonitorItem_args, findHostByMonitorItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostByMonitorItem_args");

    private static final org.apache.thrift.protocol.TField MONITOR_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorItemId", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String monitorItemId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONITOR_ITEM_ID((short)1, "monitorItemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONITOR_ITEM_ID
            return MONITOR_ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONITOR_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("monitorItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostByMonitorItem_args.class, metaDataMap);
    }

    public findHostByMonitorItem_args() {
    }

    public findHostByMonitorItem_args(
      String monitorItemId)
    {
      this();
      this.monitorItemId = monitorItemId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostByMonitorItem_args(findHostByMonitorItem_args other) {
      if (other.isSetMonitorItemId()) {
        this.monitorItemId = other.monitorItemId;
      }
    }

    public findHostByMonitorItem_args deepCopy() {
      return new findHostByMonitorItem_args(this);
    }

    @Override
    public void clear() {
      this.monitorItemId = null;
    }

    public String getMonitorItemId() {
      return this.monitorItemId;
    }

    public findHostByMonitorItem_args setMonitorItemId(String monitorItemId) {
      this.monitorItemId = monitorItemId;
      return this;
    }

    public void unsetMonitorItemId() {
      this.monitorItemId = null;
    }

    /** Returns true if field monitorItemId is set (has been assigned a value) and false otherwise */
    public boolean isSetMonitorItemId() {
      return this.monitorItemId != null;
    }

    public void setMonitorItemIdIsSet(boolean value) {
      if (!value) {
        this.monitorItemId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONITOR_ITEM_ID:
        if (value == null) {
          unsetMonitorItemId();
        } else {
          setMonitorItemId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONITOR_ITEM_ID:
        return getMonitorItemId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONITOR_ITEM_ID:
        return isSetMonitorItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostByMonitorItem_args)
        return this.equals((findHostByMonitorItem_args)that);
      return false;
    }

    public boolean equals(findHostByMonitorItem_args that) {
      if (that == null)
        return false;

      boolean this_present_monitorItemId = true && this.isSetMonitorItemId();
      boolean that_present_monitorItemId = true && that.isSetMonitorItemId();
      if (this_present_monitorItemId || that_present_monitorItemId) {
        if (!(this_present_monitorItemId && that_present_monitorItemId))
          return false;
        if (!this.monitorItemId.equals(that.monitorItemId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostByMonitorItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostByMonitorItem_args typedOther = (findHostByMonitorItem_args)other;

      lastComparison = Boolean.valueOf(isSetMonitorItemId()).compareTo(typedOther.isSetMonitorItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonitorItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorItemId, typedOther.monitorItemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MONITOR_ITEM_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.monitorItemId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.monitorItemId != null) {
        oprot.writeFieldBegin(MONITOR_ITEM_ID_FIELD_DESC);
        oprot.writeString(this.monitorItemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostByMonitorItem_args(");
      boolean first = true;

      sb.append("monitorItemId:");
      if (this.monitorItemId == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorItemId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findHostByMonitorItem_result implements org.apache.thrift.TBase<findHostByMonitorItem_result, findHostByMonitorItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findHostByMonitorItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HostInfo> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findHostByMonitorItem_result.class, metaDataMap);
    }

    public findHostByMonitorItem_result() {
    }

    public findHostByMonitorItem_result(
      List<org.cloumon.thrift.HostInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findHostByMonitorItem_result(findHostByMonitorItem_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HostInfo> __this__success = new ArrayList<org.cloumon.thrift.HostInfo>();
        for (org.cloumon.thrift.HostInfo other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HostInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findHostByMonitorItem_result deepCopy() {
      return new findHostByMonitorItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HostInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HostInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HostInfo>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HostInfo> getSuccess() {
      return this.success;
    }

    public findHostByMonitorItem_result setSuccess(List<org.cloumon.thrift.HostInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HostInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findHostByMonitorItem_result)
        return this.equals((findHostByMonitorItem_result)that);
      return false;
    }

    public boolean equals(findHostByMonitorItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findHostByMonitorItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findHostByMonitorItem_result typedOther = (findHostByMonitorItem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HostInfo>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  org.cloumon.thrift.HostInfo _elem66;
                  _elem66 = new org.cloumon.thrift.HostInfo();
                  _elem66.read(iprot);
                  this.success.add(_elem66);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HostInfo _iter67 : this.success)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findHostByMonitorItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class registerAgent_args implements org.apache.thrift.TBase<registerAgent_args, registerAgent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAgent_args");

    private static final org.apache.thrift.protocol.TField AGENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("agentIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("hostInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public String agentIp;
    public org.cloumon.thrift.HostInfo hostInfo;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT_IP((short)1, "agentIp"),
      HOST_INFO((short)2, "hostInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_IP
            return AGENT_IP;
          case 2: // HOST_INFO
            return HOST_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_IP, new org.apache.thrift.meta_data.FieldMetaData("agentIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_INFO, new org.apache.thrift.meta_data.FieldMetaData("hostInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HostInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAgent_args.class, metaDataMap);
    }

    public registerAgent_args() {
    }

    public registerAgent_args(
      String agentIp,
      org.cloumon.thrift.HostInfo hostInfo)
    {
      this();
      this.agentIp = agentIp;
      this.hostInfo = hostInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAgent_args(registerAgent_args other) {
      if (other.isSetAgentIp()) {
        this.agentIp = other.agentIp;
      }
      if (other.isSetHostInfo()) {
        this.hostInfo = new org.cloumon.thrift.HostInfo(other.hostInfo);
      }
    }

    public registerAgent_args deepCopy() {
      return new registerAgent_args(this);
    }

    @Override
    public void clear() {
      this.agentIp = null;
      this.hostInfo = null;
    }

    public String getAgentIp() {
      return this.agentIp;
    }

    public registerAgent_args setAgentIp(String agentIp) {
      this.agentIp = agentIp;
      return this;
    }

    public void unsetAgentIp() {
      this.agentIp = null;
    }

    /** Returns true if field agentIp is set (has been assigned a value) and false otherwise */
    public boolean isSetAgentIp() {
      return this.agentIp != null;
    }

    public void setAgentIpIsSet(boolean value) {
      if (!value) {
        this.agentIp = null;
      }
    }

    public org.cloumon.thrift.HostInfo getHostInfo() {
      return this.hostInfo;
    }

    public registerAgent_args setHostInfo(org.cloumon.thrift.HostInfo hostInfo) {
      this.hostInfo = hostInfo;
      return this;
    }

    public void unsetHostInfo() {
      this.hostInfo = null;
    }

    /** Returns true if field hostInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetHostInfo() {
      return this.hostInfo != null;
    }

    public void setHostInfoIsSet(boolean value) {
      if (!value) {
        this.hostInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_IP:
        if (value == null) {
          unsetAgentIp();
        } else {
          setAgentIp((String)value);
        }
        break;

      case HOST_INFO:
        if (value == null) {
          unsetHostInfo();
        } else {
          setHostInfo((org.cloumon.thrift.HostInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_IP:
        return getAgentIp();

      case HOST_INFO:
        return getHostInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_IP:
        return isSetAgentIp();
      case HOST_INFO:
        return isSetHostInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAgent_args)
        return this.equals((registerAgent_args)that);
      return false;
    }

    public boolean equals(registerAgent_args that) {
      if (that == null)
        return false;

      boolean this_present_agentIp = true && this.isSetAgentIp();
      boolean that_present_agentIp = true && that.isSetAgentIp();
      if (this_present_agentIp || that_present_agentIp) {
        if (!(this_present_agentIp && that_present_agentIp))
          return false;
        if (!this.agentIp.equals(that.agentIp))
          return false;
      }

      boolean this_present_hostInfo = true && this.isSetHostInfo();
      boolean that_present_hostInfo = true && that.isSetHostInfo();
      if (this_present_hostInfo || that_present_hostInfo) {
        if (!(this_present_hostInfo && that_present_hostInfo))
          return false;
        if (!this.hostInfo.equals(that.hostInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerAgent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerAgent_args typedOther = (registerAgent_args)other;

      lastComparison = Boolean.valueOf(isSetAgentIp()).compareTo(typedOther.isSetAgentIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentIp, typedOther.agentIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostInfo()).compareTo(typedOther.isSetHostInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostInfo, typedOther.hostInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AGENT_IP
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.agentIp = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOST_INFO
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.hostInfo = new org.cloumon.thrift.HostInfo();
              this.hostInfo.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.agentIp != null) {
        oprot.writeFieldBegin(AGENT_IP_FIELD_DESC);
        oprot.writeString(this.agentIp);
        oprot.writeFieldEnd();
      }
      if (this.hostInfo != null) {
        oprot.writeFieldBegin(HOST_INFO_FIELD_DESC);
        this.hostInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAgent_args(");
      boolean first = true;

      sb.append("agentIp:");
      if (this.agentIp == null) {
        sb.append("null");
      } else {
        sb.append(this.agentIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostInfo:");
      if (this.hostInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.hostInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class registerAgent_result implements org.apache.thrift.TBase<registerAgent_result, registerAgent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAgent_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAgent_result.class, metaDataMap);
    }

    public registerAgent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAgent_result(registerAgent_result other) {
    }

    public registerAgent_result deepCopy() {
      return new registerAgent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAgent_result)
        return this.equals((registerAgent_result)that);
      return false;
    }

    public boolean equals(registerAgent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerAgent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerAgent_result typedOther = (registerAgent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAgent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAgentLiveStatus_args implements org.apache.thrift.TBase<updateAgentLiveStatus_args, updateAgentLiveStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgentLiveStatus_args");

    private static final org.apache.thrift.protocol.TField AGENT_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentHostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("liveStatus", org.apache.thrift.protocol.TType.BOOL, (short)2);

    public String agentHostName;
    public boolean liveStatus;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT_HOST_NAME((short)1, "agentHostName"),
      LIVE_STATUS((short)2, "liveStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_HOST_NAME
            return AGENT_HOST_NAME;
          case 2: // LIVE_STATUS
            return LIVE_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIVESTATUS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("agentHostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("liveStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgentLiveStatus_args.class, metaDataMap);
    }

    public updateAgentLiveStatus_args() {
    }

    public updateAgentLiveStatus_args(
      String agentHostName,
      boolean liveStatus)
    {
      this();
      this.agentHostName = agentHostName;
      this.liveStatus = liveStatus;
      setLiveStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgentLiveStatus_args(updateAgentLiveStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAgentHostName()) {
        this.agentHostName = other.agentHostName;
      }
      this.liveStatus = other.liveStatus;
    }

    public updateAgentLiveStatus_args deepCopy() {
      return new updateAgentLiveStatus_args(this);
    }

    @Override
    public void clear() {
      this.agentHostName = null;
      setLiveStatusIsSet(false);
      this.liveStatus = false;
    }

    public String getAgentHostName() {
      return this.agentHostName;
    }

    public updateAgentLiveStatus_args setAgentHostName(String agentHostName) {
      this.agentHostName = agentHostName;
      return this;
    }

    public void unsetAgentHostName() {
      this.agentHostName = null;
    }

    /** Returns true if field agentHostName is set (has been assigned a value) and false otherwise */
    public boolean isSetAgentHostName() {
      return this.agentHostName != null;
    }

    public void setAgentHostNameIsSet(boolean value) {
      if (!value) {
        this.agentHostName = null;
      }
    }

    public boolean isLiveStatus() {
      return this.liveStatus;
    }

    public updateAgentLiveStatus_args setLiveStatus(boolean liveStatus) {
      this.liveStatus = liveStatus;
      setLiveStatusIsSet(true);
      return this;
    }

    public void unsetLiveStatus() {
      __isset_bit_vector.clear(__LIVESTATUS_ISSET_ID);
    }

    /** Returns true if field liveStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetLiveStatus() {
      return __isset_bit_vector.get(__LIVESTATUS_ISSET_ID);
    }

    public void setLiveStatusIsSet(boolean value) {
      __isset_bit_vector.set(__LIVESTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_HOST_NAME:
        if (value == null) {
          unsetAgentHostName();
        } else {
          setAgentHostName((String)value);
        }
        break;

      case LIVE_STATUS:
        if (value == null) {
          unsetLiveStatus();
        } else {
          setLiveStatus((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_HOST_NAME:
        return getAgentHostName();

      case LIVE_STATUS:
        return Boolean.valueOf(isLiveStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_HOST_NAME:
        return isSetAgentHostName();
      case LIVE_STATUS:
        return isSetLiveStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgentLiveStatus_args)
        return this.equals((updateAgentLiveStatus_args)that);
      return false;
    }

    public boolean equals(updateAgentLiveStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_agentHostName = true && this.isSetAgentHostName();
      boolean that_present_agentHostName = true && that.isSetAgentHostName();
      if (this_present_agentHostName || that_present_agentHostName) {
        if (!(this_present_agentHostName && that_present_agentHostName))
          return false;
        if (!this.agentHostName.equals(that.agentHostName))
          return false;
      }

      boolean this_present_liveStatus = true;
      boolean that_present_liveStatus = true;
      if (this_present_liveStatus || that_present_liveStatus) {
        if (!(this_present_liveStatus && that_present_liveStatus))
          return false;
        if (this.liveStatus != that.liveStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgentLiveStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgentLiveStatus_args typedOther = (updateAgentLiveStatus_args)other;

      lastComparison = Boolean.valueOf(isSetAgentHostName()).compareTo(typedOther.isSetAgentHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentHostName, typedOther.agentHostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLiveStatus()).compareTo(typedOther.isSetLiveStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLiveStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveStatus, typedOther.liveStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AGENT_HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.agentHostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LIVE_STATUS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.liveStatus = iprot.readBool();
              setLiveStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.agentHostName != null) {
        oprot.writeFieldBegin(AGENT_HOST_NAME_FIELD_DESC);
        oprot.writeString(this.agentHostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIVE_STATUS_FIELD_DESC);
      oprot.writeBool(this.liveStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgentLiveStatus_args(");
      boolean first = true;

      sb.append("agentHostName:");
      if (this.agentHostName == null) {
        sb.append("null");
      } else {
        sb.append(this.agentHostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("liveStatus:");
      sb.append(this.liveStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAgentLiveStatus_result implements org.apache.thrift.TBase<updateAgentLiveStatus_result, updateAgentLiveStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgentLiveStatus_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgentLiveStatus_result.class, metaDataMap);
    }

    public updateAgentLiveStatus_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgentLiveStatus_result(updateAgentLiveStatus_result other) {
    }

    public updateAgentLiveStatus_result deepCopy() {
      return new updateAgentLiveStatus_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgentLiveStatus_result)
        return this.equals((updateAgentLiveStatus_result)that);
      return false;
    }

    public boolean equals(updateAgentLiveStatus_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgentLiveStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgentLiveStatus_result typedOther = (updateAgentLiveStatus_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgentLiveStatus_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAgentAlarm_args implements org.apache.thrift.TBase<updateAgentAlarm_args, updateAgentAlarm_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgentAlarm_args");

    private static final org.apache.thrift.protocol.TField AGENT_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentHostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarm", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ON_FIELD_DESC = new org.apache.thrift.protocol.TField("on", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public String agentHostName;
    public String alarm;
    public boolean on;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT_HOST_NAME((short)1, "agentHostName"),
      ALARM((short)2, "alarm"),
      ON((short)3, "on");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT_HOST_NAME
            return AGENT_HOST_NAME;
          case 2: // ALARM
            return ALARM;
          case 3: // ON
            return ON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ON_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("agentHostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALARM, new org.apache.thrift.meta_data.FieldMetaData("alarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ON, new org.apache.thrift.meta_data.FieldMetaData("on", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgentAlarm_args.class, metaDataMap);
    }

    public updateAgentAlarm_args() {
    }

    public updateAgentAlarm_args(
      String agentHostName,
      String alarm,
      boolean on)
    {
      this();
      this.agentHostName = agentHostName;
      this.alarm = alarm;
      this.on = on;
      setOnIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgentAlarm_args(updateAgentAlarm_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAgentHostName()) {
        this.agentHostName = other.agentHostName;
      }
      if (other.isSetAlarm()) {
        this.alarm = other.alarm;
      }
      this.on = other.on;
    }

    public updateAgentAlarm_args deepCopy() {
      return new updateAgentAlarm_args(this);
    }

    @Override
    public void clear() {
      this.agentHostName = null;
      this.alarm = null;
      setOnIsSet(false);
      this.on = false;
    }

    public String getAgentHostName() {
      return this.agentHostName;
    }

    public updateAgentAlarm_args setAgentHostName(String agentHostName) {
      this.agentHostName = agentHostName;
      return this;
    }

    public void unsetAgentHostName() {
      this.agentHostName = null;
    }

    /** Returns true if field agentHostName is set (has been assigned a value) and false otherwise */
    public boolean isSetAgentHostName() {
      return this.agentHostName != null;
    }

    public void setAgentHostNameIsSet(boolean value) {
      if (!value) {
        this.agentHostName = null;
      }
    }

    public String getAlarm() {
      return this.alarm;
    }

    public updateAgentAlarm_args setAlarm(String alarm) {
      this.alarm = alarm;
      return this;
    }

    public void unsetAlarm() {
      this.alarm = null;
    }

    /** Returns true if field alarm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarm() {
      return this.alarm != null;
    }

    public void setAlarmIsSet(boolean value) {
      if (!value) {
        this.alarm = null;
      }
    }

    public boolean isOn() {
      return this.on;
    }

    public updateAgentAlarm_args setOn(boolean on) {
      this.on = on;
      setOnIsSet(true);
      return this;
    }

    public void unsetOn() {
      __isset_bit_vector.clear(__ON_ISSET_ID);
    }

    /** Returns true if field on is set (has been assigned a value) and false otherwise */
    public boolean isSetOn() {
      return __isset_bit_vector.get(__ON_ISSET_ID);
    }

    public void setOnIsSet(boolean value) {
      __isset_bit_vector.set(__ON_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT_HOST_NAME:
        if (value == null) {
          unsetAgentHostName();
        } else {
          setAgentHostName((String)value);
        }
        break;

      case ALARM:
        if (value == null) {
          unsetAlarm();
        } else {
          setAlarm((String)value);
        }
        break;

      case ON:
        if (value == null) {
          unsetOn();
        } else {
          setOn((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT_HOST_NAME:
        return getAgentHostName();

      case ALARM:
        return getAlarm();

      case ON:
        return Boolean.valueOf(isOn());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT_HOST_NAME:
        return isSetAgentHostName();
      case ALARM:
        return isSetAlarm();
      case ON:
        return isSetOn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgentAlarm_args)
        return this.equals((updateAgentAlarm_args)that);
      return false;
    }

    public boolean equals(updateAgentAlarm_args that) {
      if (that == null)
        return false;

      boolean this_present_agentHostName = true && this.isSetAgentHostName();
      boolean that_present_agentHostName = true && that.isSetAgentHostName();
      if (this_present_agentHostName || that_present_agentHostName) {
        if (!(this_present_agentHostName && that_present_agentHostName))
          return false;
        if (!this.agentHostName.equals(that.agentHostName))
          return false;
      }

      boolean this_present_alarm = true && this.isSetAlarm();
      boolean that_present_alarm = true && that.isSetAlarm();
      if (this_present_alarm || that_present_alarm) {
        if (!(this_present_alarm && that_present_alarm))
          return false;
        if (!this.alarm.equals(that.alarm))
          return false;
      }

      boolean this_present_on = true;
      boolean that_present_on = true;
      if (this_present_on || that_present_on) {
        if (!(this_present_on && that_present_on))
          return false;
        if (this.on != that.on)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgentAlarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgentAlarm_args typedOther = (updateAgentAlarm_args)other;

      lastComparison = Boolean.valueOf(isSetAgentHostName()).compareTo(typedOther.isSetAgentHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgentHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentHostName, typedOther.agentHostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlarm()).compareTo(typedOther.isSetAlarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarm, typedOther.alarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOn()).compareTo(typedOther.isSetOn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.on, typedOther.on);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AGENT_HOST_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.agentHostName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ALARM
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.alarm = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ON
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.on = iprot.readBool();
              setOnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.agentHostName != null) {
        oprot.writeFieldBegin(AGENT_HOST_NAME_FIELD_DESC);
        oprot.writeString(this.agentHostName);
        oprot.writeFieldEnd();
      }
      if (this.alarm != null) {
        oprot.writeFieldBegin(ALARM_FIELD_DESC);
        oprot.writeString(this.alarm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_FIELD_DESC);
      oprot.writeBool(this.on);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgentAlarm_args(");
      boolean first = true;

      sb.append("agentHostName:");
      if (this.agentHostName == null) {
        sb.append("null");
      } else {
        sb.append(this.agentHostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alarm:");
      if (this.alarm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("on:");
      sb.append(this.on);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class updateAgentAlarm_result implements org.apache.thrift.TBase<updateAgentAlarm_result, updateAgentAlarm_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgentAlarm_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgentAlarm_result.class, metaDataMap);
    }

    public updateAgentAlarm_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgentAlarm_result(updateAgentAlarm_result other) {
    }

    public updateAgentAlarm_result deepCopy() {
      return new updateAgentAlarm_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgentAlarm_result)
        return this.equals((updateAgentAlarm_result)that);
      return false;
    }

    public boolean equals(updateAgentAlarm_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgentAlarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgentAlarm_result typedOther = (updateAgentAlarm_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgentAlarm_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllServiceGroup_args implements org.apache.thrift.TBase<findAllServiceGroup_args, findAllServiceGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllServiceGroup_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllServiceGroup_args.class, metaDataMap);
    }

    public findAllServiceGroup_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllServiceGroup_args(findAllServiceGroup_args other) {
    }

    public findAllServiceGroup_args deepCopy() {
      return new findAllServiceGroup_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllServiceGroup_args)
        return this.equals((findAllServiceGroup_args)that);
      return false;
    }

    public boolean equals(findAllServiceGroup_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllServiceGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllServiceGroup_args typedOther = (findAllServiceGroup_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllServiceGroup_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class findAllServiceGroup_result implements org.apache.thrift.TBase<findAllServiceGroup_result, findAllServiceGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllServiceGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.ServiceGroup> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.ServiceGroup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllServiceGroup_result.class, metaDataMap);
    }

    public findAllServiceGroup_result() {
    }

    public findAllServiceGroup_result(
      List<org.cloumon.thrift.ServiceGroup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllServiceGroup_result(findAllServiceGroup_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.ServiceGroup> __this__success = new ArrayList<org.cloumon.thrift.ServiceGroup>();
        for (org.cloumon.thrift.ServiceGroup other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.ServiceGroup(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllServiceGroup_result deepCopy() {
      return new findAllServiceGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.ServiceGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.ServiceGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.ServiceGroup>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.ServiceGroup> getSuccess() {
      return this.success;
    }

    public findAllServiceGroup_result setSuccess(List<org.cloumon.thrift.ServiceGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.ServiceGroup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllServiceGroup_result)
        return this.equals((findAllServiceGroup_result)that);
      return false;
    }

    public boolean equals(findAllServiceGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAllServiceGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAllServiceGroup_result typedOther = (findAllServiceGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.ServiceGroup>(_list68.size);
                for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                {
                  org.cloumon.thrift.ServiceGroup _elem70;
                  _elem70 = new org.cloumon.thrift.ServiceGroup();
                  _elem70.read(iprot);
                  this.success.add(_elem70);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.ServiceGroup _iter71 : this.success)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllServiceGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addServiceGroup_args implements org.apache.thrift.TBase<addServiceGroup_args, addServiceGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServiceGroup_args");

    private static final org.apache.thrift.protocol.TField SERVICE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public org.cloumon.thrift.ServiceGroup serviceGroup;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_GROUP((short)1, "serviceGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_GROUP
            return SERVICE_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("serviceGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.ServiceGroup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServiceGroup_args.class, metaDataMap);
    }

    public addServiceGroup_args() {
    }

    public addServiceGroup_args(
      org.cloumon.thrift.ServiceGroup serviceGroup)
    {
      this();
      this.serviceGroup = serviceGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServiceGroup_args(addServiceGroup_args other) {
      if (other.isSetServiceGroup()) {
        this.serviceGroup = new org.cloumon.thrift.ServiceGroup(other.serviceGroup);
      }
    }

    public addServiceGroup_args deepCopy() {
      return new addServiceGroup_args(this);
    }

    @Override
    public void clear() {
      this.serviceGroup = null;
    }

    public org.cloumon.thrift.ServiceGroup getServiceGroup() {
      return this.serviceGroup;
    }

    public addServiceGroup_args setServiceGroup(org.cloumon.thrift.ServiceGroup serviceGroup) {
      this.serviceGroup = serviceGroup;
      return this;
    }

    public void unsetServiceGroup() {
      this.serviceGroup = null;
    }

    /** Returns true if field serviceGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceGroup() {
      return this.serviceGroup != null;
    }

    public void setServiceGroupIsSet(boolean value) {
      if (!value) {
        this.serviceGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_GROUP:
        if (value == null) {
          unsetServiceGroup();
        } else {
          setServiceGroup((org.cloumon.thrift.ServiceGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_GROUP:
        return getServiceGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_GROUP:
        return isSetServiceGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServiceGroup_args)
        return this.equals((addServiceGroup_args)that);
      return false;
    }

    public boolean equals(addServiceGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceGroup = true && this.isSetServiceGroup();
      boolean that_present_serviceGroup = true && that.isSetServiceGroup();
      if (this_present_serviceGroup || that_present_serviceGroup) {
        if (!(this_present_serviceGroup && that_present_serviceGroup))
          return false;
        if (!this.serviceGroup.equals(that.serviceGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServiceGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServiceGroup_args typedOther = (addServiceGroup_args)other;

      lastComparison = Boolean.valueOf(isSetServiceGroup()).compareTo(typedOther.isSetServiceGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroup, typedOther.serviceGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SERVICE_GROUP
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.serviceGroup = new org.cloumon.thrift.ServiceGroup();
              this.serviceGroup.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serviceGroup != null) {
        oprot.writeFieldBegin(SERVICE_GROUP_FIELD_DESC);
        this.serviceGroup.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServiceGroup_args(");
      boolean first = true;

      sb.append("serviceGroup:");
      if (this.serviceGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addServiceGroup_result implements org.apache.thrift.TBase<addServiceGroup_result, addServiceGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addServiceGroup_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addServiceGroup_result.class, metaDataMap);
    }

    public addServiceGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addServiceGroup_result(addServiceGroup_result other) {
    }

    public addServiceGroup_result deepCopy() {
      return new addServiceGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addServiceGroup_result)
        return this.equals((addServiceGroup_result)that);
      return false;
    }

    public boolean equals(addServiceGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addServiceGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addServiceGroup_result typedOther = (addServiceGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addServiceGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeServiceGroup_args implements org.apache.thrift.TBase<removeServiceGroup_args, removeServiceGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServiceGroup_args");

    private static final org.apache.thrift.protocol.TField SERVICE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String serviceGroupName;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_GROUP_NAME((short)1, "serviceGroupName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_GROUP_NAME
            return SERVICE_GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServiceGroup_args.class, metaDataMap);
    }

    public removeServiceGroup_args() {
    }

    public removeServiceGroup_args(
      String serviceGroupName)
    {
      this();
      this.serviceGroupName = serviceGroupName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServiceGroup_args(removeServiceGroup_args other) {
      if (other.isSetServiceGroupName()) {
        this.serviceGroupName = other.serviceGroupName;
      }
    }

    public removeServiceGroup_args deepCopy() {
      return new removeServiceGroup_args(this);
    }

    @Override
    public void clear() {
      this.serviceGroupName = null;
    }

    public String getServiceGroupName() {
      return this.serviceGroupName;
    }

    public removeServiceGroup_args setServiceGroupName(String serviceGroupName) {
      this.serviceGroupName = serviceGroupName;
      return this;
    }

    public void unsetServiceGroupName() {
      this.serviceGroupName = null;
    }

    /** Returns true if field serviceGroupName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceGroupName() {
      return this.serviceGroupName != null;
    }

    public void setServiceGroupNameIsSet(boolean value) {
      if (!value) {
        this.serviceGroupName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        if (value == null) {
          unsetServiceGroupName();
        } else {
          setServiceGroupName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        return getServiceGroupName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_GROUP_NAME:
        return isSetServiceGroupName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServiceGroup_args)
        return this.equals((removeServiceGroup_args)that);
      return false;
    }

    public boolean equals(removeServiceGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceGroupName = true && this.isSetServiceGroupName();
      boolean that_present_serviceGroupName = true && that.isSetServiceGroupName();
      if (this_present_serviceGroupName || that_present_serviceGroupName) {
        if (!(this_present_serviceGroupName && that_present_serviceGroupName))
          return false;
        if (!this.serviceGroupName.equals(that.serviceGroupName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServiceGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServiceGroup_args typedOther = (removeServiceGroup_args)other;

      lastComparison = Boolean.valueOf(isSetServiceGroupName()).compareTo(typedOther.isSetServiceGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroupName, typedOther.serviceGroupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SERVICE_GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.serviceGroupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serviceGroupName != null) {
        oprot.writeFieldBegin(SERVICE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.serviceGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServiceGroup_args(");
      boolean first = true;

      sb.append("serviceGroupName:");
      if (this.serviceGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceGroupName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeServiceGroup_result implements org.apache.thrift.TBase<removeServiceGroup_result, removeServiceGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeServiceGroup_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeServiceGroup_result.class, metaDataMap);
    }

    public removeServiceGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeServiceGroup_result(removeServiceGroup_result other) {
    }

    public removeServiceGroup_result deepCopy() {
      return new removeServiceGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeServiceGroup_result)
        return this.equals((removeServiceGroup_result)that);
      return false;
    }

    public boolean equals(removeServiceGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeServiceGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeServiceGroup_result typedOther = (removeServiceGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeServiceGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeHostsFromServiceGroup_args implements org.apache.thrift.TBase<removeHostsFromServiceGroup_args, removeHostsFromServiceGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHostsFromServiceGroup_args");

    private static final org.apache.thrift.protocol.TField SERVICE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNames", org.apache.thrift.protocol.TType.LIST, (short)2);

    public String serviceGroupName;
    public List<String> hostNames;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_GROUP_NAME((short)1, "serviceGroupName"),
      HOST_NAMES((short)2, "hostNames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_GROUP_NAME
            return SERVICE_GROUP_NAME;
          case 2: // HOST_NAMES
            return HOST_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hostNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHostsFromServiceGroup_args.class, metaDataMap);
    }

    public removeHostsFromServiceGroup_args() {
    }

    public removeHostsFromServiceGroup_args(
      String serviceGroupName,
      List<String> hostNames)
    {
      this();
      this.serviceGroupName = serviceGroupName;
      this.hostNames = hostNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHostsFromServiceGroup_args(removeHostsFromServiceGroup_args other) {
      if (other.isSetServiceGroupName()) {
        this.serviceGroupName = other.serviceGroupName;
      }
      if (other.isSetHostNames()) {
        List<String> __this__hostNames = new ArrayList<String>();
        for (String other_element : other.hostNames) {
          __this__hostNames.add(other_element);
        }
        this.hostNames = __this__hostNames;
      }
    }

    public removeHostsFromServiceGroup_args deepCopy() {
      return new removeHostsFromServiceGroup_args(this);
    }

    @Override
    public void clear() {
      this.serviceGroupName = null;
      this.hostNames = null;
    }

    public String getServiceGroupName() {
      return this.serviceGroupName;
    }

    public removeHostsFromServiceGroup_args setServiceGroupName(String serviceGroupName) {
      this.serviceGroupName = serviceGroupName;
      return this;
    }

    public void unsetServiceGroupName() {
      this.serviceGroupName = null;
    }

    /** Returns true if field serviceGroupName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceGroupName() {
      return this.serviceGroupName != null;
    }

    public void setServiceGroupNameIsSet(boolean value) {
      if (!value) {
        this.serviceGroupName = null;
      }
    }

    public int getHostNamesSize() {
      return (this.hostNames == null) ? 0 : this.hostNames.size();
    }

    public java.util.Iterator<String> getHostNamesIterator() {
      return (this.hostNames == null) ? null : this.hostNames.iterator();
    }

    public void addToHostNames(String elem) {
      if (this.hostNames == null) {
        this.hostNames = new ArrayList<String>();
      }
      this.hostNames.add(elem);
    }

    public List<String> getHostNames() {
      return this.hostNames;
    }

    public removeHostsFromServiceGroup_args setHostNames(List<String> hostNames) {
      this.hostNames = hostNames;
      return this;
    }

    public void unsetHostNames() {
      this.hostNames = null;
    }

    /** Returns true if field hostNames is set (has been assigned a value) and false otherwise */
    public boolean isSetHostNames() {
      return this.hostNames != null;
    }

    public void setHostNamesIsSet(boolean value) {
      if (!value) {
        this.hostNames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        if (value == null) {
          unsetServiceGroupName();
        } else {
          setServiceGroupName((String)value);
        }
        break;

      case HOST_NAMES:
        if (value == null) {
          unsetHostNames();
        } else {
          setHostNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        return getServiceGroupName();

      case HOST_NAMES:
        return getHostNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_GROUP_NAME:
        return isSetServiceGroupName();
      case HOST_NAMES:
        return isSetHostNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHostsFromServiceGroup_args)
        return this.equals((removeHostsFromServiceGroup_args)that);
      return false;
    }

    public boolean equals(removeHostsFromServiceGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceGroupName = true && this.isSetServiceGroupName();
      boolean that_present_serviceGroupName = true && that.isSetServiceGroupName();
      if (this_present_serviceGroupName || that_present_serviceGroupName) {
        if (!(this_present_serviceGroupName && that_present_serviceGroupName))
          return false;
        if (!this.serviceGroupName.equals(that.serviceGroupName))
          return false;
      }

      boolean this_present_hostNames = true && this.isSetHostNames();
      boolean that_present_hostNames = true && that.isSetHostNames();
      if (this_present_hostNames || that_present_hostNames) {
        if (!(this_present_hostNames && that_present_hostNames))
          return false;
        if (!this.hostNames.equals(that.hostNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHostsFromServiceGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHostsFromServiceGroup_args typedOther = (removeHostsFromServiceGroup_args)other;

      lastComparison = Boolean.valueOf(isSetServiceGroupName()).compareTo(typedOther.isSetServiceGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroupName, typedOther.serviceGroupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostNames()).compareTo(typedOther.isSetHostNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNames, typedOther.hostNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SERVICE_GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.serviceGroupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOST_NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                this.hostNames = new ArrayList<String>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  String _elem74;
                  _elem74 = iprot.readString();
                  this.hostNames.add(_elem74);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serviceGroupName != null) {
        oprot.writeFieldBegin(SERVICE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.serviceGroupName);
        oprot.writeFieldEnd();
      }
      if (this.hostNames != null) {
        oprot.writeFieldBegin(HOST_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostNames.size()));
          for (String _iter75 : this.hostNames)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHostsFromServiceGroup_args(");
      boolean first = true;

      sb.append("serviceGroupName:");
      if (this.serviceGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceGroupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostNames:");
      if (this.hostNames == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class removeHostsFromServiceGroup_result implements org.apache.thrift.TBase<removeHostsFromServiceGroup_result, removeHostsFromServiceGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHostsFromServiceGroup_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHostsFromServiceGroup_result.class, metaDataMap);
    }

    public removeHostsFromServiceGroup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHostsFromServiceGroup_result(removeHostsFromServiceGroup_result other) {
    }

    public removeHostsFromServiceGroup_result deepCopy() {
      return new removeHostsFromServiceGroup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHostsFromServiceGroup_result)
        return this.equals((removeHostsFromServiceGroup_result)that);
      return false;
    }

    public boolean equals(removeHostsFromServiceGroup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHostsFromServiceGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHostsFromServiceGroup_result typedOther = (removeHostsFromServiceGroup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHostsFromServiceGroup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addHostToService_args implements org.apache.thrift.TBase<addHostToService_args, addHostToService_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHostToService_args");

    private static final org.apache.thrift.protocol.TField SERVICE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNames", org.apache.thrift.protocol.TType.LIST, (short)2);

    public String serviceGroupName;
    public List<String> hostNames;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_GROUP_NAME((short)1, "serviceGroupName"),
      HOST_NAMES((short)2, "hostNames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_GROUP_NAME
            return SERVICE_GROUP_NAME;
          case 2: // HOST_NAMES
            return HOST_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hostNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHostToService_args.class, metaDataMap);
    }

    public addHostToService_args() {
    }

    public addHostToService_args(
      String serviceGroupName,
      List<String> hostNames)
    {
      this();
      this.serviceGroupName = serviceGroupName;
      this.hostNames = hostNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHostToService_args(addHostToService_args other) {
      if (other.isSetServiceGroupName()) {
        this.serviceGroupName = other.serviceGroupName;
      }
      if (other.isSetHostNames()) {
        List<String> __this__hostNames = new ArrayList<String>();
        for (String other_element : other.hostNames) {
          __this__hostNames.add(other_element);
        }
        this.hostNames = __this__hostNames;
      }
    }

    public addHostToService_args deepCopy() {
      return new addHostToService_args(this);
    }

    @Override
    public void clear() {
      this.serviceGroupName = null;
      this.hostNames = null;
    }

    public String getServiceGroupName() {
      return this.serviceGroupName;
    }

    public addHostToService_args setServiceGroupName(String serviceGroupName) {
      this.serviceGroupName = serviceGroupName;
      return this;
    }

    public void unsetServiceGroupName() {
      this.serviceGroupName = null;
    }

    /** Returns true if field serviceGroupName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceGroupName() {
      return this.serviceGroupName != null;
    }

    public void setServiceGroupNameIsSet(boolean value) {
      if (!value) {
        this.serviceGroupName = null;
      }
    }

    public int getHostNamesSize() {
      return (this.hostNames == null) ? 0 : this.hostNames.size();
    }

    public java.util.Iterator<String> getHostNamesIterator() {
      return (this.hostNames == null) ? null : this.hostNames.iterator();
    }

    public void addToHostNames(String elem) {
      if (this.hostNames == null) {
        this.hostNames = new ArrayList<String>();
      }
      this.hostNames.add(elem);
    }

    public List<String> getHostNames() {
      return this.hostNames;
    }

    public addHostToService_args setHostNames(List<String> hostNames) {
      this.hostNames = hostNames;
      return this;
    }

    public void unsetHostNames() {
      this.hostNames = null;
    }

    /** Returns true if field hostNames is set (has been assigned a value) and false otherwise */
    public boolean isSetHostNames() {
      return this.hostNames != null;
    }

    public void setHostNamesIsSet(boolean value) {
      if (!value) {
        this.hostNames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        if (value == null) {
          unsetServiceGroupName();
        } else {
          setServiceGroupName((String)value);
        }
        break;

      case HOST_NAMES:
        if (value == null) {
          unsetHostNames();
        } else {
          setHostNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_GROUP_NAME:
        return getServiceGroupName();

      case HOST_NAMES:
        return getHostNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_GROUP_NAME:
        return isSetServiceGroupName();
      case HOST_NAMES:
        return isSetHostNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHostToService_args)
        return this.equals((addHostToService_args)that);
      return false;
    }

    public boolean equals(addHostToService_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceGroupName = true && this.isSetServiceGroupName();
      boolean that_present_serviceGroupName = true && that.isSetServiceGroupName();
      if (this_present_serviceGroupName || that_present_serviceGroupName) {
        if (!(this_present_serviceGroupName && that_present_serviceGroupName))
          return false;
        if (!this.serviceGroupName.equals(that.serviceGroupName))
          return false;
      }

      boolean this_present_hostNames = true && this.isSetHostNames();
      boolean that_present_hostNames = true && that.isSetHostNames();
      if (this_present_hostNames || that_present_hostNames) {
        if (!(this_present_hostNames && that_present_hostNames))
          return false;
        if (!this.hostNames.equals(that.hostNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHostToService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHostToService_args typedOther = (addHostToService_args)other;

      lastComparison = Boolean.valueOf(isSetServiceGroupName()).compareTo(typedOther.isSetServiceGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroupName, typedOther.serviceGroupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostNames()).compareTo(typedOther.isSetHostNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNames, typedOther.hostNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SERVICE_GROUP_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.serviceGroupName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // HOST_NAMES
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                this.hostNames = new ArrayList<String>(_list76.size);
                for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                {
                  String _elem78;
                  _elem78 = iprot.readString();
                  this.hostNames.add(_elem78);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serviceGroupName != null) {
        oprot.writeFieldBegin(SERVICE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(this.serviceGroupName);
        oprot.writeFieldEnd();
      }
      if (this.hostNames != null) {
        oprot.writeFieldBegin(HOST_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostNames.size()));
          for (String _iter79 : this.hostNames)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHostToService_args(");
      boolean first = true;

      sb.append("serviceGroupName:");
      if (this.serviceGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceGroupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostNames:");
      if (this.hostNames == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class addHostToService_result implements org.apache.thrift.TBase<addHostToService_result, addHostToService_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHostToService_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHostToService_result.class, metaDataMap);
    }

    public addHostToService_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHostToService_result(addHostToService_result other) {
    }

    public addHostToService_result deepCopy() {
      return new addHostToService_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHostToService_result)
        return this.equals((addHostToService_result)that);
      return false;
    }

    public boolean equals(addHostToService_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHostToService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHostToService_result typedOther = (addHostToService_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHostToService_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHadoopServerList_args implements org.apache.thrift.TBase<getHadoopServerList_args, getHadoopServerList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHadoopServerList_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String type;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHadoopServerList_args.class, metaDataMap);
    }

    public getHadoopServerList_args() {
    }

    public getHadoopServerList_args(
      String type)
    {
      this();
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHadoopServerList_args(getHadoopServerList_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getHadoopServerList_args deepCopy() {
      return new getHadoopServerList_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
    }

    public String getType() {
      return this.type;
    }

    public getHadoopServerList_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHadoopServerList_args)
        return this.equals((getHadoopServerList_args)that);
      return false;
    }

    public boolean equals(getHadoopServerList_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHadoopServerList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHadoopServerList_args typedOther = (getHadoopServerList_args)other;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TYPE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.type = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(this.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHadoopServerList_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getHadoopServerList_result implements org.apache.thrift.TBase<getHadoopServerList_result, getHadoopServerList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHadoopServerList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<org.cloumon.thrift.HadoopServerStatus> success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.cloumon.thrift.HadoopServerStatus.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHadoopServerList_result.class, metaDataMap);
    }

    public getHadoopServerList_result() {
    }

    public getHadoopServerList_result(
      List<org.cloumon.thrift.HadoopServerStatus> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHadoopServerList_result(getHadoopServerList_result other) {
      if (other.isSetSuccess()) {
        List<org.cloumon.thrift.HadoopServerStatus> __this__success = new ArrayList<org.cloumon.thrift.HadoopServerStatus>();
        for (org.cloumon.thrift.HadoopServerStatus other_element : other.success) {
          __this__success.add(new org.cloumon.thrift.HadoopServerStatus(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHadoopServerList_result deepCopy() {
      return new getHadoopServerList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.cloumon.thrift.HadoopServerStatus> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.cloumon.thrift.HadoopServerStatus elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.cloumon.thrift.HadoopServerStatus>();
      }
      this.success.add(elem);
    }

    public List<org.cloumon.thrift.HadoopServerStatus> getSuccess() {
      return this.success;
    }

    public getHadoopServerList_result setSuccess(List<org.cloumon.thrift.HadoopServerStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.cloumon.thrift.HadoopServerStatus>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHadoopServerList_result)
        return this.equals((getHadoopServerList_result)that);
      return false;
    }

    public boolean equals(getHadoopServerList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHadoopServerList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHadoopServerList_result typedOther = (getHadoopServerList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                this.success = new ArrayList<org.cloumon.thrift.HadoopServerStatus>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  org.cloumon.thrift.HadoopServerStatus _elem82;
                  _elem82 = new org.cloumon.thrift.HadoopServerStatus();
                  _elem82.read(iprot);
                  this.success.add(_elem82);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (org.cloumon.thrift.HadoopServerStatus _iter83 : this.success)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHadoopServerList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
