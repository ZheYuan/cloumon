/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceGroup implements org.apache.thrift.TBase<ServiceGroup, ServiceGroup._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceGroup");

  private static final org.apache.thrift.protocol.TField SERVICE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);

  public String serviceGroupName;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_GROUP_NAME((short)1, "serviceGroupName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_GROUP_NAME
          return SERVICE_GROUP_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceGroup.class, metaDataMap);
  }

  public ServiceGroup() {
  }

  public ServiceGroup(
    String serviceGroupName)
  {
    this();
    this.serviceGroupName = serviceGroupName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceGroup(ServiceGroup other) {
    if (other.isSetServiceGroupName()) {
      this.serviceGroupName = other.serviceGroupName;
    }
  }

  public ServiceGroup deepCopy() {
    return new ServiceGroup(this);
  }

  @Override
  public void clear() {
    this.serviceGroupName = null;
  }

  public String getServiceGroupName() {
    return this.serviceGroupName;
  }

  public ServiceGroup setServiceGroupName(String serviceGroupName) {
    this.serviceGroupName = serviceGroupName;
    return this;
  }

  public void unsetServiceGroupName() {
    this.serviceGroupName = null;
  }

  /** Returns true if field serviceGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceGroupName() {
    return this.serviceGroupName != null;
  }

  public void setServiceGroupNameIsSet(boolean value) {
    if (!value) {
      this.serviceGroupName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_GROUP_NAME:
      if (value == null) {
        unsetServiceGroupName();
      } else {
        setServiceGroupName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_GROUP_NAME:
      return getServiceGroupName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_GROUP_NAME:
      return isSetServiceGroupName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceGroup)
      return this.equals((ServiceGroup)that);
    return false;
  }

  public boolean equals(ServiceGroup that) {
    if (that == null)
      return false;

    boolean this_present_serviceGroupName = true && this.isSetServiceGroupName();
    boolean that_present_serviceGroupName = true && that.isSetServiceGroupName();
    if (this_present_serviceGroupName || that_present_serviceGroupName) {
      if (!(this_present_serviceGroupName && that_present_serviceGroupName))
        return false;
      if (!this.serviceGroupName.equals(that.serviceGroupName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceGroup typedOther = (ServiceGroup)other;

    lastComparison = Boolean.valueOf(isSetServiceGroupName()).compareTo(typedOther.isSetServiceGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceGroupName, typedOther.serviceGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SERVICE_GROUP_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.serviceGroupName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.serviceGroupName != null) {
      oprot.writeFieldBegin(SERVICE_GROUP_NAME_FIELD_DESC);
      oprot.writeString(this.serviceGroupName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceGroup(");
    boolean first = true;

    sb.append("serviceGroupName:");
    if (this.serviceGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceGroupName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

