/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostInfo implements org.apache.thrift.TBase<HostInfo, HostInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostInfo");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hostType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_SYSTEM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSystemInfo", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MACHINE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField MEM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("memInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField NETWORK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("networkInfo", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("liveStatus", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField ALARM_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmOn", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField HOST_ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAlarm", org.apache.thrift.protocol.TType.STRING, (short)12);

  public String hostName;
  public String hostType;
  public List<String> hostIps;
  public SystemCpuInfo cpuInfo;
  public SystemFileSystemInfo fileSystemInfo;
  public SystemMachineInfo machineInfo;
  public SystemMemInfo memInfo;
  public SystemNetworkInterfaceInfo networkInfo;
  public String alarm;
  public boolean liveStatus;
  public boolean alarmOn;
  public String hostAlarm;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "hostName"),
    HOST_TYPE((short)2, "hostType"),
    HOST_IPS((short)3, "hostIps"),
    CPU_INFO((short)4, "cpuInfo"),
    FILE_SYSTEM_INFO((short)5, "fileSystemInfo"),
    MACHINE_INFO((short)6, "machineInfo"),
    MEM_INFO((short)7, "memInfo"),
    NETWORK_INFO((short)8, "networkInfo"),
    ALARM((short)9, "alarm"),
    LIVE_STATUS((short)10, "liveStatus"),
    ALARM_ON((short)11, "alarmOn"),
    HOST_ALARM((short)12, "hostAlarm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // HOST_TYPE
          return HOST_TYPE;
        case 3: // HOST_IPS
          return HOST_IPS;
        case 4: // CPU_INFO
          return CPU_INFO;
        case 5: // FILE_SYSTEM_INFO
          return FILE_SYSTEM_INFO;
        case 6: // MACHINE_INFO
          return MACHINE_INFO;
        case 7: // MEM_INFO
          return MEM_INFO;
        case 8: // NETWORK_INFO
          return NETWORK_INFO;
        case 9: // ALARM
          return ALARM;
        case 10: // LIVE_STATUS
          return LIVE_STATUS;
        case 11: // ALARM_ON
          return ALARM_ON;
        case 12: // HOST_ALARM
          return HOST_ALARM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIVESTATUS_ISSET_ID = 0;
  private static final int __ALARMON_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hostType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CPU_INFO, new org.apache.thrift.meta_data.FieldMetaData("cpuInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemCpuInfo.class)));
    tmpMap.put(_Fields.FILE_SYSTEM_INFO, new org.apache.thrift.meta_data.FieldMetaData("fileSystemInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemFileSystemInfo.class)));
    tmpMap.put(_Fields.MACHINE_INFO, new org.apache.thrift.meta_data.FieldMetaData("machineInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemMachineInfo.class)));
    tmpMap.put(_Fields.MEM_INFO, new org.apache.thrift.meta_data.FieldMetaData("memInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemMemInfo.class)));
    tmpMap.put(_Fields.NETWORK_INFO, new org.apache.thrift.meta_data.FieldMetaData("networkInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemNetworkInterfaceInfo.class)));
    tmpMap.put(_Fields.ALARM, new org.apache.thrift.meta_data.FieldMetaData("alarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("liveStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALARM_ON, new org.apache.thrift.meta_data.FieldMetaData("alarmOn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HOST_ALARM, new org.apache.thrift.meta_data.FieldMetaData("hostAlarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostInfo.class, metaDataMap);
  }

  public HostInfo() {
  }

  public HostInfo(
    String hostName,
    String hostType,
    List<String> hostIps,
    SystemCpuInfo cpuInfo,
    SystemFileSystemInfo fileSystemInfo,
    SystemMachineInfo machineInfo,
    SystemMemInfo memInfo,
    SystemNetworkInterfaceInfo networkInfo,
    String alarm,
    boolean liveStatus,
    boolean alarmOn,
    String hostAlarm)
  {
    this();
    this.hostName = hostName;
    this.hostType = hostType;
    this.hostIps = hostIps;
    this.cpuInfo = cpuInfo;
    this.fileSystemInfo = fileSystemInfo;
    this.machineInfo = machineInfo;
    this.memInfo = memInfo;
    this.networkInfo = networkInfo;
    this.alarm = alarm;
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
    this.alarmOn = alarmOn;
    setAlarmOnIsSet(true);
    this.hostAlarm = hostAlarm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostInfo(HostInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetHostType()) {
      this.hostType = other.hostType;
    }
    if (other.isSetHostIps()) {
      List<String> __this__hostIps = new ArrayList<String>();
      for (String other_element : other.hostIps) {
        __this__hostIps.add(other_element);
      }
      this.hostIps = __this__hostIps;
    }
    if (other.isSetCpuInfo()) {
      this.cpuInfo = new SystemCpuInfo(other.cpuInfo);
    }
    if (other.isSetFileSystemInfo()) {
      this.fileSystemInfo = new SystemFileSystemInfo(other.fileSystemInfo);
    }
    if (other.isSetMachineInfo()) {
      this.machineInfo = new SystemMachineInfo(other.machineInfo);
    }
    if (other.isSetMemInfo()) {
      this.memInfo = new SystemMemInfo(other.memInfo);
    }
    if (other.isSetNetworkInfo()) {
      this.networkInfo = new SystemNetworkInterfaceInfo(other.networkInfo);
    }
    if (other.isSetAlarm()) {
      this.alarm = other.alarm;
    }
    this.liveStatus = other.liveStatus;
    this.alarmOn = other.alarmOn;
    if (other.isSetHostAlarm()) {
      this.hostAlarm = other.hostAlarm;
    }
  }

  public HostInfo deepCopy() {
    return new HostInfo(this);
  }

  @Override
  public void clear() {
    this.hostName = null;
    this.hostType = null;
    this.hostIps = null;
    this.cpuInfo = null;
    this.fileSystemInfo = null;
    this.machineInfo = null;
    this.memInfo = null;
    this.networkInfo = null;
    this.alarm = null;
    setLiveStatusIsSet(false);
    this.liveStatus = false;
    setAlarmOnIsSet(false);
    this.alarmOn = false;
    this.hostAlarm = null;
  }

  public String getHostName() {
    return this.hostName;
  }

  public HostInfo setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public String getHostType() {
    return this.hostType;
  }

  public HostInfo setHostType(String hostType) {
    this.hostType = hostType;
    return this;
  }

  public void unsetHostType() {
    this.hostType = null;
  }

  /** Returns true if field hostType is set (has been assigned a value) and false otherwise */
  public boolean isSetHostType() {
    return this.hostType != null;
  }

  public void setHostTypeIsSet(boolean value) {
    if (!value) {
      this.hostType = null;
    }
  }

  public int getHostIpsSize() {
    return (this.hostIps == null) ? 0 : this.hostIps.size();
  }

  public java.util.Iterator<String> getHostIpsIterator() {
    return (this.hostIps == null) ? null : this.hostIps.iterator();
  }

  public void addToHostIps(String elem) {
    if (this.hostIps == null) {
      this.hostIps = new ArrayList<String>();
    }
    this.hostIps.add(elem);
  }

  public List<String> getHostIps() {
    return this.hostIps;
  }

  public HostInfo setHostIps(List<String> hostIps) {
    this.hostIps = hostIps;
    return this;
  }

  public void unsetHostIps() {
    this.hostIps = null;
  }

  /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
  public boolean isSetHostIps() {
    return this.hostIps != null;
  }

  public void setHostIpsIsSet(boolean value) {
    if (!value) {
      this.hostIps = null;
    }
  }

  public SystemCpuInfo getCpuInfo() {
    return this.cpuInfo;
  }

  public HostInfo setCpuInfo(SystemCpuInfo cpuInfo) {
    this.cpuInfo = cpuInfo;
    return this;
  }

  public void unsetCpuInfo() {
    this.cpuInfo = null;
  }

  /** Returns true if field cpuInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuInfo() {
    return this.cpuInfo != null;
  }

  public void setCpuInfoIsSet(boolean value) {
    if (!value) {
      this.cpuInfo = null;
    }
  }

  public SystemFileSystemInfo getFileSystemInfo() {
    return this.fileSystemInfo;
  }

  public HostInfo setFileSystemInfo(SystemFileSystemInfo fileSystemInfo) {
    this.fileSystemInfo = fileSystemInfo;
    return this;
  }

  public void unsetFileSystemInfo() {
    this.fileSystemInfo = null;
  }

  /** Returns true if field fileSystemInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSystemInfo() {
    return this.fileSystemInfo != null;
  }

  public void setFileSystemInfoIsSet(boolean value) {
    if (!value) {
      this.fileSystemInfo = null;
    }
  }

  public SystemMachineInfo getMachineInfo() {
    return this.machineInfo;
  }

  public HostInfo setMachineInfo(SystemMachineInfo machineInfo) {
    this.machineInfo = machineInfo;
    return this;
  }

  public void unsetMachineInfo() {
    this.machineInfo = null;
  }

  /** Returns true if field machineInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInfo() {
    return this.machineInfo != null;
  }

  public void setMachineInfoIsSet(boolean value) {
    if (!value) {
      this.machineInfo = null;
    }
  }

  public SystemMemInfo getMemInfo() {
    return this.memInfo;
  }

  public HostInfo setMemInfo(SystemMemInfo memInfo) {
    this.memInfo = memInfo;
    return this;
  }

  public void unsetMemInfo() {
    this.memInfo = null;
  }

  /** Returns true if field memInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMemInfo() {
    return this.memInfo != null;
  }

  public void setMemInfoIsSet(boolean value) {
    if (!value) {
      this.memInfo = null;
    }
  }

  public SystemNetworkInterfaceInfo getNetworkInfo() {
    return this.networkInfo;
  }

  public HostInfo setNetworkInfo(SystemNetworkInterfaceInfo networkInfo) {
    this.networkInfo = networkInfo;
    return this;
  }

  public void unsetNetworkInfo() {
    this.networkInfo = null;
  }

  /** Returns true if field networkInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkInfo() {
    return this.networkInfo != null;
  }

  public void setNetworkInfoIsSet(boolean value) {
    if (!value) {
      this.networkInfo = null;
    }
  }

  public String getAlarm() {
    return this.alarm;
  }

  public HostInfo setAlarm(String alarm) {
    this.alarm = alarm;
    return this;
  }

  public void unsetAlarm() {
    this.alarm = null;
  }

  /** Returns true if field alarm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarm() {
    return this.alarm != null;
  }

  public void setAlarmIsSet(boolean value) {
    if (!value) {
      this.alarm = null;
    }
  }

  public boolean isLiveStatus() {
    return this.liveStatus;
  }

  public HostInfo setLiveStatus(boolean liveStatus) {
    this.liveStatus = liveStatus;
    setLiveStatusIsSet(true);
    return this;
  }

  public void unsetLiveStatus() {
    __isset_bit_vector.clear(__LIVESTATUS_ISSET_ID);
  }

  /** Returns true if field liveStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveStatus() {
    return __isset_bit_vector.get(__LIVESTATUS_ISSET_ID);
  }

  public void setLiveStatusIsSet(boolean value) {
    __isset_bit_vector.set(__LIVESTATUS_ISSET_ID, value);
  }

  public boolean isAlarmOn() {
    return this.alarmOn;
  }

  public HostInfo setAlarmOn(boolean alarmOn) {
    this.alarmOn = alarmOn;
    setAlarmOnIsSet(true);
    return this;
  }

  public void unsetAlarmOn() {
    __isset_bit_vector.clear(__ALARMON_ISSET_ID);
  }

  /** Returns true if field alarmOn is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmOn() {
    return __isset_bit_vector.get(__ALARMON_ISSET_ID);
  }

  public void setAlarmOnIsSet(boolean value) {
    __isset_bit_vector.set(__ALARMON_ISSET_ID, value);
  }

  public String getHostAlarm() {
    return this.hostAlarm;
  }

  public HostInfo setHostAlarm(String hostAlarm) {
    this.hostAlarm = hostAlarm;
    return this;
  }

  public void unsetHostAlarm() {
    this.hostAlarm = null;
  }

  /** Returns true if field hostAlarm is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAlarm() {
    return this.hostAlarm != null;
  }

  public void setHostAlarmIsSet(boolean value) {
    if (!value) {
      this.hostAlarm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case HOST_TYPE:
      if (value == null) {
        unsetHostType();
      } else {
        setHostType((String)value);
      }
      break;

    case HOST_IPS:
      if (value == null) {
        unsetHostIps();
      } else {
        setHostIps((List<String>)value);
      }
      break;

    case CPU_INFO:
      if (value == null) {
        unsetCpuInfo();
      } else {
        setCpuInfo((SystemCpuInfo)value);
      }
      break;

    case FILE_SYSTEM_INFO:
      if (value == null) {
        unsetFileSystemInfo();
      } else {
        setFileSystemInfo((SystemFileSystemInfo)value);
      }
      break;

    case MACHINE_INFO:
      if (value == null) {
        unsetMachineInfo();
      } else {
        setMachineInfo((SystemMachineInfo)value);
      }
      break;

    case MEM_INFO:
      if (value == null) {
        unsetMemInfo();
      } else {
        setMemInfo((SystemMemInfo)value);
      }
      break;

    case NETWORK_INFO:
      if (value == null) {
        unsetNetworkInfo();
      } else {
        setNetworkInfo((SystemNetworkInterfaceInfo)value);
      }
      break;

    case ALARM:
      if (value == null) {
        unsetAlarm();
      } else {
        setAlarm((String)value);
      }
      break;

    case LIVE_STATUS:
      if (value == null) {
        unsetLiveStatus();
      } else {
        setLiveStatus((Boolean)value);
      }
      break;

    case ALARM_ON:
      if (value == null) {
        unsetAlarmOn();
      } else {
        setAlarmOn((Boolean)value);
      }
      break;

    case HOST_ALARM:
      if (value == null) {
        unsetHostAlarm();
      } else {
        setHostAlarm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHostName();

    case HOST_TYPE:
      return getHostType();

    case HOST_IPS:
      return getHostIps();

    case CPU_INFO:
      return getCpuInfo();

    case FILE_SYSTEM_INFO:
      return getFileSystemInfo();

    case MACHINE_INFO:
      return getMachineInfo();

    case MEM_INFO:
      return getMemInfo();

    case NETWORK_INFO:
      return getNetworkInfo();

    case ALARM:
      return getAlarm();

    case LIVE_STATUS:
      return Boolean.valueOf(isLiveStatus());

    case ALARM_ON:
      return Boolean.valueOf(isAlarmOn());

    case HOST_ALARM:
      return getHostAlarm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHostName();
    case HOST_TYPE:
      return isSetHostType();
    case HOST_IPS:
      return isSetHostIps();
    case CPU_INFO:
      return isSetCpuInfo();
    case FILE_SYSTEM_INFO:
      return isSetFileSystemInfo();
    case MACHINE_INFO:
      return isSetMachineInfo();
    case MEM_INFO:
      return isSetMemInfo();
    case NETWORK_INFO:
      return isSetNetworkInfo();
    case ALARM:
      return isSetAlarm();
    case LIVE_STATUS:
      return isSetLiveStatus();
    case ALARM_ON:
      return isSetAlarmOn();
    case HOST_ALARM:
      return isSetHostAlarm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostInfo)
      return this.equals((HostInfo)that);
    return false;
  }

  public boolean equals(HostInfo that) {
    if (that == null)
      return false;

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_hostType = true && this.isSetHostType();
    boolean that_present_hostType = true && that.isSetHostType();
    if (this_present_hostType || that_present_hostType) {
      if (!(this_present_hostType && that_present_hostType))
        return false;
      if (!this.hostType.equals(that.hostType))
        return false;
    }

    boolean this_present_hostIps = true && this.isSetHostIps();
    boolean that_present_hostIps = true && that.isSetHostIps();
    if (this_present_hostIps || that_present_hostIps) {
      if (!(this_present_hostIps && that_present_hostIps))
        return false;
      if (!this.hostIps.equals(that.hostIps))
        return false;
    }

    boolean this_present_cpuInfo = true && this.isSetCpuInfo();
    boolean that_present_cpuInfo = true && that.isSetCpuInfo();
    if (this_present_cpuInfo || that_present_cpuInfo) {
      if (!(this_present_cpuInfo && that_present_cpuInfo))
        return false;
      if (!this.cpuInfo.equals(that.cpuInfo))
        return false;
    }

    boolean this_present_fileSystemInfo = true && this.isSetFileSystemInfo();
    boolean that_present_fileSystemInfo = true && that.isSetFileSystemInfo();
    if (this_present_fileSystemInfo || that_present_fileSystemInfo) {
      if (!(this_present_fileSystemInfo && that_present_fileSystemInfo))
        return false;
      if (!this.fileSystemInfo.equals(that.fileSystemInfo))
        return false;
    }

    boolean this_present_machineInfo = true && this.isSetMachineInfo();
    boolean that_present_machineInfo = true && that.isSetMachineInfo();
    if (this_present_machineInfo || that_present_machineInfo) {
      if (!(this_present_machineInfo && that_present_machineInfo))
        return false;
      if (!this.machineInfo.equals(that.machineInfo))
        return false;
    }

    boolean this_present_memInfo = true && this.isSetMemInfo();
    boolean that_present_memInfo = true && that.isSetMemInfo();
    if (this_present_memInfo || that_present_memInfo) {
      if (!(this_present_memInfo && that_present_memInfo))
        return false;
      if (!this.memInfo.equals(that.memInfo))
        return false;
    }

    boolean this_present_networkInfo = true && this.isSetNetworkInfo();
    boolean that_present_networkInfo = true && that.isSetNetworkInfo();
    if (this_present_networkInfo || that_present_networkInfo) {
      if (!(this_present_networkInfo && that_present_networkInfo))
        return false;
      if (!this.networkInfo.equals(that.networkInfo))
        return false;
    }

    boolean this_present_alarm = true && this.isSetAlarm();
    boolean that_present_alarm = true && that.isSetAlarm();
    if (this_present_alarm || that_present_alarm) {
      if (!(this_present_alarm && that_present_alarm))
        return false;
      if (!this.alarm.equals(that.alarm))
        return false;
    }

    boolean this_present_liveStatus = true;
    boolean that_present_liveStatus = true;
    if (this_present_liveStatus || that_present_liveStatus) {
      if (!(this_present_liveStatus && that_present_liveStatus))
        return false;
      if (this.liveStatus != that.liveStatus)
        return false;
    }

    boolean this_present_alarmOn = true;
    boolean that_present_alarmOn = true;
    if (this_present_alarmOn || that_present_alarmOn) {
      if (!(this_present_alarmOn && that_present_alarmOn))
        return false;
      if (this.alarmOn != that.alarmOn)
        return false;
    }

    boolean this_present_hostAlarm = true && this.isSetHostAlarm();
    boolean that_present_hostAlarm = true && that.isSetHostAlarm();
    if (this_present_hostAlarm || that_present_hostAlarm) {
      if (!(this_present_hostAlarm && that_present_hostAlarm))
        return false;
      if (!this.hostAlarm.equals(that.hostAlarm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HostInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HostInfo typedOther = (HostInfo)other;

    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(typedOther.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, typedOther.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostType()).compareTo(typedOther.isSetHostType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostType, typedOther.hostType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostIps()).compareTo(typedOther.isSetHostIps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostIps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, typedOther.hostIps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuInfo()).compareTo(typedOther.isSetCpuInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuInfo, typedOther.cpuInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSystemInfo()).compareTo(typedOther.isSetFileSystemInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSystemInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSystemInfo, typedOther.fileSystemInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInfo()).compareTo(typedOther.isSetMachineInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInfo, typedOther.machineInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemInfo()).compareTo(typedOther.isSetMemInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memInfo, typedOther.memInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkInfo()).compareTo(typedOther.isSetNetworkInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkInfo, typedOther.networkInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarm()).compareTo(typedOther.isSetAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarm, typedOther.alarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveStatus()).compareTo(typedOther.isSetLiveStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveStatus, typedOther.liveStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmOn()).compareTo(typedOther.isSetAlarmOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmOn, typedOther.alarmOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAlarm()).compareTo(typedOther.isSetHostAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAlarm, typedOther.hostAlarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HOST_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hostName = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HOST_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hostType = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HOST_IPS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.hostIps = new ArrayList<String>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                String _elem14;
                _elem14 = iprot.readString();
                this.hostIps.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CPU_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.cpuInfo = new SystemCpuInfo();
            this.cpuInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FILE_SYSTEM_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.fileSystemInfo = new SystemFileSystemInfo();
            this.fileSystemInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MACHINE_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.machineInfo = new SystemMachineInfo();
            this.machineInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // MEM_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.memInfo = new SystemMemInfo();
            this.memInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // NETWORK_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.networkInfo = new SystemNetworkInterfaceInfo();
            this.networkInfo.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ALARM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.alarm = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // LIVE_STATUS
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.liveStatus = iprot.readBool();
            setLiveStatusIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ALARM_ON
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.alarmOn = iprot.readBool();
            setAlarmOnIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // HOST_ALARM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.hostAlarm = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.hostName != null) {
      oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
      oprot.writeString(this.hostName);
      oprot.writeFieldEnd();
    }
    if (this.hostType != null) {
      oprot.writeFieldBegin(HOST_TYPE_FIELD_DESC);
      oprot.writeString(this.hostType);
      oprot.writeFieldEnd();
    }
    if (this.hostIps != null) {
      oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostIps.size()));
        for (String _iter15 : this.hostIps)
        {
          oprot.writeString(_iter15);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.cpuInfo != null) {
      oprot.writeFieldBegin(CPU_INFO_FIELD_DESC);
      this.cpuInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.fileSystemInfo != null) {
      oprot.writeFieldBegin(FILE_SYSTEM_INFO_FIELD_DESC);
      this.fileSystemInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.machineInfo != null) {
      oprot.writeFieldBegin(MACHINE_INFO_FIELD_DESC);
      this.machineInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.memInfo != null) {
      oprot.writeFieldBegin(MEM_INFO_FIELD_DESC);
      this.memInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.networkInfo != null) {
      oprot.writeFieldBegin(NETWORK_INFO_FIELD_DESC);
      this.networkInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.alarm != null) {
      oprot.writeFieldBegin(ALARM_FIELD_DESC);
      oprot.writeString(this.alarm);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LIVE_STATUS_FIELD_DESC);
    oprot.writeBool(this.liveStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ALARM_ON_FIELD_DESC);
    oprot.writeBool(this.alarmOn);
    oprot.writeFieldEnd();
    if (this.hostAlarm != null) {
      oprot.writeFieldBegin(HOST_ALARM_FIELD_DESC);
      oprot.writeString(this.hostAlarm);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostInfo(");
    boolean first = true;

    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostType:");
    if (this.hostType == null) {
      sb.append("null");
    } else {
      sb.append(this.hostType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostIps:");
    if (this.hostIps == null) {
      sb.append("null");
    } else {
      sb.append(this.hostIps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuInfo:");
    if (this.cpuInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSystemInfo:");
    if (this.fileSystemInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.fileSystemInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("machineInfo:");
    if (this.machineInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.machineInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memInfo:");
    if (this.memInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.memInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("networkInfo:");
    if (this.networkInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.networkInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarm:");
    if (this.alarm == null) {
      sb.append("null");
    } else {
      sb.append(this.alarm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveStatus:");
    sb.append(this.liveStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmOn:");
    sb.append(this.alarmOn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostAlarm:");
    if (this.hostAlarm == null) {
      sb.append("null");
    } else {
      sb.append(this.hostAlarm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

