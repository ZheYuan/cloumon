/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloumon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SystemMemInfo implements org.apache.thrift.TBase<SystemMemInfo, SystemMemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemMemInfo");

  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USED_FIELD_DESC = new org.apache.thrift.protocol.TField("used", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("free", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACTUAL_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("actualUsed", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ACTUAL_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualFree", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SWAP_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("swapTotal", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SWAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("swapUsed", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SWAP_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("swapFree", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SWAP_PAGE_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("swapPageIn", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SWAP_PAGE_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("swapPageOut", org.apache.thrift.protocol.TType.I64, (short)11);

  public long memory;
  public long total;
  public long used;
  public long free;
  public long actualUsed;
  public long actualFree;
  public long swapTotal;
  public long swapUsed;
  public long swapFree;
  public long swapPageIn;
  public long swapPageOut;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMORY((short)1, "memory"),
    TOTAL((short)2, "total"),
    USED((short)3, "used"),
    FREE((short)4, "free"),
    ACTUAL_USED((short)5, "actualUsed"),
    ACTUAL_FREE((short)6, "actualFree"),
    SWAP_TOTAL((short)7, "swapTotal"),
    SWAP_USED((short)8, "swapUsed"),
    SWAP_FREE((short)9, "swapFree"),
    SWAP_PAGE_IN((short)10, "swapPageIn"),
    SWAP_PAGE_OUT((short)11, "swapPageOut");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMORY
          return MEMORY;
        case 2: // TOTAL
          return TOTAL;
        case 3: // USED
          return USED;
        case 4: // FREE
          return FREE;
        case 5: // ACTUAL_USED
          return ACTUAL_USED;
        case 6: // ACTUAL_FREE
          return ACTUAL_FREE;
        case 7: // SWAP_TOTAL
          return SWAP_TOTAL;
        case 8: // SWAP_USED
          return SWAP_USED;
        case 9: // SWAP_FREE
          return SWAP_FREE;
        case 10: // SWAP_PAGE_IN
          return SWAP_PAGE_IN;
        case 11: // SWAP_PAGE_OUT
          return SWAP_PAGE_OUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMORY_ISSET_ID = 0;
  private static final int __TOTAL_ISSET_ID = 1;
  private static final int __USED_ISSET_ID = 2;
  private static final int __FREE_ISSET_ID = 3;
  private static final int __ACTUALUSED_ISSET_ID = 4;
  private static final int __ACTUALFREE_ISSET_ID = 5;
  private static final int __SWAPTOTAL_ISSET_ID = 6;
  private static final int __SWAPUSED_ISSET_ID = 7;
  private static final int __SWAPFREE_ISSET_ID = 8;
  private static final int __SWAPPAGEIN_ISSET_ID = 9;
  private static final int __SWAPPAGEOUT_ISSET_ID = 10;
  private BitSet __isset_bit_vector = new BitSet(11);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USED, new org.apache.thrift.meta_data.FieldMetaData("used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREE, new org.apache.thrift.meta_data.FieldMetaData("free", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTUAL_USED, new org.apache.thrift.meta_data.FieldMetaData("actualUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTUAL_FREE, new org.apache.thrift.meta_data.FieldMetaData("actualFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("swapTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_USED, new org.apache.thrift.meta_data.FieldMetaData("swapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_FREE, new org.apache.thrift.meta_data.FieldMetaData("swapFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_PAGE_IN, new org.apache.thrift.meta_data.FieldMetaData("swapPageIn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SWAP_PAGE_OUT, new org.apache.thrift.meta_data.FieldMetaData("swapPageOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemMemInfo.class, metaDataMap);
  }

  public SystemMemInfo() {
  }

  public SystemMemInfo(
    long memory,
    long total,
    long used,
    long free,
    long actualUsed,
    long actualFree,
    long swapTotal,
    long swapUsed,
    long swapFree,
    long swapPageIn,
    long swapPageOut)
  {
    this();
    this.memory = memory;
    setMemoryIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.used = used;
    setUsedIsSet(true);
    this.free = free;
    setFreeIsSet(true);
    this.actualUsed = actualUsed;
    setActualUsedIsSet(true);
    this.actualFree = actualFree;
    setActualFreeIsSet(true);
    this.swapTotal = swapTotal;
    setSwapTotalIsSet(true);
    this.swapUsed = swapUsed;
    setSwapUsedIsSet(true);
    this.swapFree = swapFree;
    setSwapFreeIsSet(true);
    this.swapPageIn = swapPageIn;
    setSwapPageInIsSet(true);
    this.swapPageOut = swapPageOut;
    setSwapPageOutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemMemInfo(SystemMemInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.memory = other.memory;
    this.total = other.total;
    this.used = other.used;
    this.free = other.free;
    this.actualUsed = other.actualUsed;
    this.actualFree = other.actualFree;
    this.swapTotal = other.swapTotal;
    this.swapUsed = other.swapUsed;
    this.swapFree = other.swapFree;
    this.swapPageIn = other.swapPageIn;
    this.swapPageOut = other.swapPageOut;
  }

  public SystemMemInfo deepCopy() {
    return new SystemMemInfo(this);
  }

  @Override
  public void clear() {
    setMemoryIsSet(false);
    this.memory = 0;
    setTotalIsSet(false);
    this.total = 0;
    setUsedIsSet(false);
    this.used = 0;
    setFreeIsSet(false);
    this.free = 0;
    setActualUsedIsSet(false);
    this.actualUsed = 0;
    setActualFreeIsSet(false);
    this.actualFree = 0;
    setSwapTotalIsSet(false);
    this.swapTotal = 0;
    setSwapUsedIsSet(false);
    this.swapUsed = 0;
    setSwapFreeIsSet(false);
    this.swapFree = 0;
    setSwapPageInIsSet(false);
    this.swapPageIn = 0;
    setSwapPageOutIsSet(false);
    this.swapPageOut = 0;
  }

  public long getMemory() {
    return this.memory;
  }

  public SystemMemInfo setMemory(long memory) {
    this.memory = memory;
    setMemoryIsSet(true);
    return this;
  }

  public void unsetMemory() {
    __isset_bit_vector.clear(__MEMORY_ISSET_ID);
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return __isset_bit_vector.get(__MEMORY_ISSET_ID);
  }

  public void setMemoryIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORY_ISSET_ID, value);
  }

  public long getTotal() {
    return this.total;
  }

  public SystemMemInfo setTotal(long total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bit_vector.clear(__TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return __isset_bit_vector.get(__TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bit_vector.set(__TOTAL_ISSET_ID, value);
  }

  public long getUsed() {
    return this.used;
  }

  public SystemMemInfo setUsed(long used) {
    this.used = used;
    setUsedIsSet(true);
    return this;
  }

  public void unsetUsed() {
    __isset_bit_vector.clear(__USED_ISSET_ID);
  }

  /** Returns true if field used is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed() {
    return __isset_bit_vector.get(__USED_ISSET_ID);
  }

  public void setUsedIsSet(boolean value) {
    __isset_bit_vector.set(__USED_ISSET_ID, value);
  }

  public long getFree() {
    return this.free;
  }

  public SystemMemInfo setFree(long free) {
    this.free = free;
    setFreeIsSet(true);
    return this;
  }

  public void unsetFree() {
    __isset_bit_vector.clear(__FREE_ISSET_ID);
  }

  /** Returns true if field free is set (has been assigned a value) and false otherwise */
  public boolean isSetFree() {
    return __isset_bit_vector.get(__FREE_ISSET_ID);
  }

  public void setFreeIsSet(boolean value) {
    __isset_bit_vector.set(__FREE_ISSET_ID, value);
  }

  public long getActualUsed() {
    return this.actualUsed;
  }

  public SystemMemInfo setActualUsed(long actualUsed) {
    this.actualUsed = actualUsed;
    setActualUsedIsSet(true);
    return this;
  }

  public void unsetActualUsed() {
    __isset_bit_vector.clear(__ACTUALUSED_ISSET_ID);
  }

  /** Returns true if field actualUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetActualUsed() {
    return __isset_bit_vector.get(__ACTUALUSED_ISSET_ID);
  }

  public void setActualUsedIsSet(boolean value) {
    __isset_bit_vector.set(__ACTUALUSED_ISSET_ID, value);
  }

  public long getActualFree() {
    return this.actualFree;
  }

  public SystemMemInfo setActualFree(long actualFree) {
    this.actualFree = actualFree;
    setActualFreeIsSet(true);
    return this;
  }

  public void unsetActualFree() {
    __isset_bit_vector.clear(__ACTUALFREE_ISSET_ID);
  }

  /** Returns true if field actualFree is set (has been assigned a value) and false otherwise */
  public boolean isSetActualFree() {
    return __isset_bit_vector.get(__ACTUALFREE_ISSET_ID);
  }

  public void setActualFreeIsSet(boolean value) {
    __isset_bit_vector.set(__ACTUALFREE_ISSET_ID, value);
  }

  public long getSwapTotal() {
    return this.swapTotal;
  }

  public SystemMemInfo setSwapTotal(long swapTotal) {
    this.swapTotal = swapTotal;
    setSwapTotalIsSet(true);
    return this;
  }

  public void unsetSwapTotal() {
    __isset_bit_vector.clear(__SWAPTOTAL_ISSET_ID);
  }

  /** Returns true if field swapTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapTotal() {
    return __isset_bit_vector.get(__SWAPTOTAL_ISSET_ID);
  }

  public void setSwapTotalIsSet(boolean value) {
    __isset_bit_vector.set(__SWAPTOTAL_ISSET_ID, value);
  }

  public long getSwapUsed() {
    return this.swapUsed;
  }

  public SystemMemInfo setSwapUsed(long swapUsed) {
    this.swapUsed = swapUsed;
    setSwapUsedIsSet(true);
    return this;
  }

  public void unsetSwapUsed() {
    __isset_bit_vector.clear(__SWAPUSED_ISSET_ID);
  }

  /** Returns true if field swapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapUsed() {
    return __isset_bit_vector.get(__SWAPUSED_ISSET_ID);
  }

  public void setSwapUsedIsSet(boolean value) {
    __isset_bit_vector.set(__SWAPUSED_ISSET_ID, value);
  }

  public long getSwapFree() {
    return this.swapFree;
  }

  public SystemMemInfo setSwapFree(long swapFree) {
    this.swapFree = swapFree;
    setSwapFreeIsSet(true);
    return this;
  }

  public void unsetSwapFree() {
    __isset_bit_vector.clear(__SWAPFREE_ISSET_ID);
  }

  /** Returns true if field swapFree is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapFree() {
    return __isset_bit_vector.get(__SWAPFREE_ISSET_ID);
  }

  public void setSwapFreeIsSet(boolean value) {
    __isset_bit_vector.set(__SWAPFREE_ISSET_ID, value);
  }

  public long getSwapPageIn() {
    return this.swapPageIn;
  }

  public SystemMemInfo setSwapPageIn(long swapPageIn) {
    this.swapPageIn = swapPageIn;
    setSwapPageInIsSet(true);
    return this;
  }

  public void unsetSwapPageIn() {
    __isset_bit_vector.clear(__SWAPPAGEIN_ISSET_ID);
  }

  /** Returns true if field swapPageIn is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapPageIn() {
    return __isset_bit_vector.get(__SWAPPAGEIN_ISSET_ID);
  }

  public void setSwapPageInIsSet(boolean value) {
    __isset_bit_vector.set(__SWAPPAGEIN_ISSET_ID, value);
  }

  public long getSwapPageOut() {
    return this.swapPageOut;
  }

  public SystemMemInfo setSwapPageOut(long swapPageOut) {
    this.swapPageOut = swapPageOut;
    setSwapPageOutIsSet(true);
    return this;
  }

  public void unsetSwapPageOut() {
    __isset_bit_vector.clear(__SWAPPAGEOUT_ISSET_ID);
  }

  /** Returns true if field swapPageOut is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapPageOut() {
    return __isset_bit_vector.get(__SWAPPAGEOUT_ISSET_ID);
  }

  public void setSwapPageOutIsSet(boolean value) {
    __isset_bit_vector.set(__SWAPPAGEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((Long)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Long)value);
      }
      break;

    case USED:
      if (value == null) {
        unsetUsed();
      } else {
        setUsed((Long)value);
      }
      break;

    case FREE:
      if (value == null) {
        unsetFree();
      } else {
        setFree((Long)value);
      }
      break;

    case ACTUAL_USED:
      if (value == null) {
        unsetActualUsed();
      } else {
        setActualUsed((Long)value);
      }
      break;

    case ACTUAL_FREE:
      if (value == null) {
        unsetActualFree();
      } else {
        setActualFree((Long)value);
      }
      break;

    case SWAP_TOTAL:
      if (value == null) {
        unsetSwapTotal();
      } else {
        setSwapTotal((Long)value);
      }
      break;

    case SWAP_USED:
      if (value == null) {
        unsetSwapUsed();
      } else {
        setSwapUsed((Long)value);
      }
      break;

    case SWAP_FREE:
      if (value == null) {
        unsetSwapFree();
      } else {
        setSwapFree((Long)value);
      }
      break;

    case SWAP_PAGE_IN:
      if (value == null) {
        unsetSwapPageIn();
      } else {
        setSwapPageIn((Long)value);
      }
      break;

    case SWAP_PAGE_OUT:
      if (value == null) {
        unsetSwapPageOut();
      } else {
        setSwapPageOut((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMORY:
      return Long.valueOf(getMemory());

    case TOTAL:
      return Long.valueOf(getTotal());

    case USED:
      return Long.valueOf(getUsed());

    case FREE:
      return Long.valueOf(getFree());

    case ACTUAL_USED:
      return Long.valueOf(getActualUsed());

    case ACTUAL_FREE:
      return Long.valueOf(getActualFree());

    case SWAP_TOTAL:
      return Long.valueOf(getSwapTotal());

    case SWAP_USED:
      return Long.valueOf(getSwapUsed());

    case SWAP_FREE:
      return Long.valueOf(getSwapFree());

    case SWAP_PAGE_IN:
      return Long.valueOf(getSwapPageIn());

    case SWAP_PAGE_OUT:
      return Long.valueOf(getSwapPageOut());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMORY:
      return isSetMemory();
    case TOTAL:
      return isSetTotal();
    case USED:
      return isSetUsed();
    case FREE:
      return isSetFree();
    case ACTUAL_USED:
      return isSetActualUsed();
    case ACTUAL_FREE:
      return isSetActualFree();
    case SWAP_TOTAL:
      return isSetSwapTotal();
    case SWAP_USED:
      return isSetSwapUsed();
    case SWAP_FREE:
      return isSetSwapFree();
    case SWAP_PAGE_IN:
      return isSetSwapPageIn();
    case SWAP_PAGE_OUT:
      return isSetSwapPageOut();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemMemInfo)
      return this.equals((SystemMemInfo)that);
    return false;
  }

  public boolean equals(SystemMemInfo that) {
    if (that == null)
      return false;

    boolean this_present_memory = true;
    boolean that_present_memory = true;
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (this.memory != that.memory)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_used = true;
    boolean that_present_used = true;
    if (this_present_used || that_present_used) {
      if (!(this_present_used && that_present_used))
        return false;
      if (this.used != that.used)
        return false;
    }

    boolean this_present_free = true;
    boolean that_present_free = true;
    if (this_present_free || that_present_free) {
      if (!(this_present_free && that_present_free))
        return false;
      if (this.free != that.free)
        return false;
    }

    boolean this_present_actualUsed = true;
    boolean that_present_actualUsed = true;
    if (this_present_actualUsed || that_present_actualUsed) {
      if (!(this_present_actualUsed && that_present_actualUsed))
        return false;
      if (this.actualUsed != that.actualUsed)
        return false;
    }

    boolean this_present_actualFree = true;
    boolean that_present_actualFree = true;
    if (this_present_actualFree || that_present_actualFree) {
      if (!(this_present_actualFree && that_present_actualFree))
        return false;
      if (this.actualFree != that.actualFree)
        return false;
    }

    boolean this_present_swapTotal = true;
    boolean that_present_swapTotal = true;
    if (this_present_swapTotal || that_present_swapTotal) {
      if (!(this_present_swapTotal && that_present_swapTotal))
        return false;
      if (this.swapTotal != that.swapTotal)
        return false;
    }

    boolean this_present_swapUsed = true;
    boolean that_present_swapUsed = true;
    if (this_present_swapUsed || that_present_swapUsed) {
      if (!(this_present_swapUsed && that_present_swapUsed))
        return false;
      if (this.swapUsed != that.swapUsed)
        return false;
    }

    boolean this_present_swapFree = true;
    boolean that_present_swapFree = true;
    if (this_present_swapFree || that_present_swapFree) {
      if (!(this_present_swapFree && that_present_swapFree))
        return false;
      if (this.swapFree != that.swapFree)
        return false;
    }

    boolean this_present_swapPageIn = true;
    boolean that_present_swapPageIn = true;
    if (this_present_swapPageIn || that_present_swapPageIn) {
      if (!(this_present_swapPageIn && that_present_swapPageIn))
        return false;
      if (this.swapPageIn != that.swapPageIn)
        return false;
    }

    boolean this_present_swapPageOut = true;
    boolean that_present_swapPageOut = true;
    if (this_present_swapPageOut || that_present_swapPageOut) {
      if (!(this_present_swapPageOut && that_present_swapPageOut))
        return false;
      if (this.swapPageOut != that.swapPageOut)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SystemMemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SystemMemInfo typedOther = (SystemMemInfo)other;

    lastComparison = Boolean.valueOf(isSetMemory()).compareTo(typedOther.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, typedOther.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed()).compareTo(typedOther.isSetUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used, typedOther.used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree()).compareTo(typedOther.isSetFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free, typedOther.free);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualUsed()).compareTo(typedOther.isSetActualUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualUsed, typedOther.actualUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualFree()).compareTo(typedOther.isSetActualFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualFree, typedOther.actualFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapTotal()).compareTo(typedOther.isSetSwapTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapTotal, typedOther.swapTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapUsed()).compareTo(typedOther.isSetSwapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapUsed, typedOther.swapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapFree()).compareTo(typedOther.isSetSwapFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapFree, typedOther.swapFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapPageIn()).compareTo(typedOther.isSetSwapPageIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapPageIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapPageIn, typedOther.swapPageIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwapPageOut()).compareTo(typedOther.isSetSwapPageOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapPageOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapPageOut, typedOther.swapPageOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MEMORY
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.memory = iprot.readI64();
            setMemoryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOTAL
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.total = iprot.readI64();
            setTotalIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.used = iprot.readI64();
            setUsedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FREE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.free = iprot.readI64();
            setFreeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ACTUAL_USED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.actualUsed = iprot.readI64();
            setActualUsedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ACTUAL_FREE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.actualFree = iprot.readI64();
            setActualFreeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SWAP_TOTAL
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.swapTotal = iprot.readI64();
            setSwapTotalIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SWAP_USED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.swapUsed = iprot.readI64();
            setSwapUsedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SWAP_FREE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.swapFree = iprot.readI64();
            setSwapFreeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SWAP_PAGE_IN
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.swapPageIn = iprot.readI64();
            setSwapPageInIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // SWAP_PAGE_OUT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.swapPageOut = iprot.readI64();
            setSwapPageOutIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MEMORY_FIELD_DESC);
    oprot.writeI64(this.memory);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_FIELD_DESC);
    oprot.writeI64(this.total);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(USED_FIELD_DESC);
    oprot.writeI64(this.used);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FREE_FIELD_DESC);
    oprot.writeI64(this.free);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ACTUAL_USED_FIELD_DESC);
    oprot.writeI64(this.actualUsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ACTUAL_FREE_FIELD_DESC);
    oprot.writeI64(this.actualFree);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SWAP_TOTAL_FIELD_DESC);
    oprot.writeI64(this.swapTotal);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SWAP_USED_FIELD_DESC);
    oprot.writeI64(this.swapUsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SWAP_FREE_FIELD_DESC);
    oprot.writeI64(this.swapFree);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SWAP_PAGE_IN_FIELD_DESC);
    oprot.writeI64(this.swapPageIn);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SWAP_PAGE_OUT_FIELD_DESC);
    oprot.writeI64(this.swapPageOut);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemMemInfo(");
    boolean first = true;

    sb.append("memory:");
    sb.append(this.memory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("used:");
    sb.append(this.used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free:");
    sb.append(this.free);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualUsed:");
    sb.append(this.actualUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualFree:");
    sb.append(this.actualFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapTotal:");
    sb.append(this.swapTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapUsed:");
    sb.append(this.swapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapFree:");
    sb.append(this.swapFree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapPageIn:");
    sb.append(this.swapPageIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapPageOut:");
    sb.append(this.swapPageOut);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

